{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"themes/tomotoes/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/default.cur","path":"img/default.cur","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/desktop.ini","path":"img/desktop.ini","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/pointer.cur","path":"img/pointer.cur","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/js/script.min.js","path":"js/script.min.js","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/img/dog.png","path":"img/dog.png","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7f6da7e27de0b42849169b8c0ec1ed39380a2f42","modified":1593963177000},{"_id":"source/README.md","hash":"147dc464a557fd15e1e4c49b14ca98cfc1067dd7","modified":1599120208000},{"_id":"themes/tomotoes/.editorconfig","hash":"0d2cf13902004154df065912edffc29e9304a2a3","modified":1593957811000},{"_id":"themes/tomotoes/CODE_OF_CONDUCT.md","hash":"40cdc0e1d863590b7274b41b0209c16f8ffb30b3","modified":1593957811000},{"_id":"themes/tomotoes/CONTRIBUTING.md","hash":"1894528fea687bac6bad619f18299c3445455adc","modified":1593957811000},{"_id":"themes/tomotoes/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1593957811000},{"_id":"themes/tomotoes/README.md","hash":"508daf95d8314b06e1de0e1ee17c9ee23c356d89","modified":1593957811000},{"_id":"themes/tomotoes/_config.yml","hash":"1eb9d9697139af4f1abf39d350e0d7de33ddb76f","modified":1599056362000},{"_id":"themes/tomotoes/package-lock.json","hash":"02707edeaf14b2d15617c30b587710376a25f5f7","modified":1593957811000},{"_id":"themes/tomotoes/package.json","hash":"9ffa2ecbc0b4825cdce926207f782a4d9f9804b1","modified":1593957811000},{"_id":"source/_posts/2-Linux如何学习、主机规划与磁盘分区.md","hash":"f31472ab65a2131d51930ecd320b24e2ff0c3716","modified":1594283361000},{"_id":"source/_posts/AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction.md","hash":"0c777b7cd6891ef0845c7209acd80aa15530c3f1","modified":1600655342000},{"_id":"source/_posts/ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction.md","hash":"2f8e233287c12c375b23336f988818cc442879be","modified":1603333125000},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction.md","hash":"c3ca122f70e7f7e1cef266599281d5cd8c8d1a19","modified":1600258563000},{"_id":"source/_posts/ACL-2020-Relation-Extraction-with-Explanation.md","hash":"08694a1b3482b673f522f5e6d7fc80154cf02878","modified":1599384199000},{"_id":"source/_posts/COLING-2020-Improving-Long-Tail-Relation-Extraction-with-Collaborating-Relation-Augmented-Attention.md","hash":"4644604525869f66305ec9a8ae4e0902b15993d6","modified":1604234664000},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels.md","hash":"d2b61b34e153ccdc22f3cfdb8ece1e88b1296665","modified":1604220028000},{"_id":"source/_posts/Kubernetes配置指南.md","hash":"8bd8e985fe79bbf8e99c6f8b944733fc479cf0d5","modified":1594989077000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS.md","hash":"e3a5ab005e1703d7f4be4da29e3d90a1901b12d5","modified":1599119423000},{"_id":"source/_posts/Linux是什么.md","hash":"23c8b5907869df84b24037373c6bedfa2b00f383","modified":1594092848000},{"_id":"source/_posts/Linux的文件权限.md","hash":"61ad9ee092b4b5796fef4d8dc6232a50cd87fa0c","modified":1594802059000},{"_id":"source/_posts/Scrapy笔记.md","hash":"868db726b2680386fb831e43db6a8035bcebcb41","modified":1598509145000},{"_id":"source/_posts/VS-code-Module-torch-has-no-xxx-member.md","hash":"24b7885fb286d151f7ac44cc90b4c11b766d6471","modified":1599550208000},{"_id":"source/_posts/dpkg强制卸载软件.md","hash":"934260173f22fa09a514480817a7049507e83584","modified":1612597138000},{"_id":"source/_posts/markdownPad2-破解.md","hash":"60ac98a7c4e40f4800cc0005da843fadb3ce44e5","modified":1599047970000},{"_id":"source/_posts/主题模型.md","hash":"500b1fbbde353645b3f056a92e4325bba3302665","modified":1600749615000},{"_id":"source/_posts/入门.md","hash":"6d8b26d4603fcea571bb7469e35319c6d0fcfd04","modified":1594798604000},{"_id":"source/_posts/计算机概论.md","hash":"2b0d0620099db8e4755a8b85e380e67f66649e4f","modified":1594005138000},{"_id":"source/_posts/论文笔记-关系抽取概述.md","hash":"560780776d2bbdfb46a4cf3204888f2d71de7ad8","modified":1600778985000},{"_id":"source/_posts/软件学报2020-基于带噪观测的远监督神经网络关系抽取.md","hash":"da1087175b94f151a1b1cf6d1f82d589a6028aa4","modified":1603265595000},{"_id":"source/_posts/首次登录与在线求助.md","hash":"265170e461a3024538ab798176746647e38b744b","modified":1594631655000},{"_id":"source/about/index.md","hash":"c4900a39221d559a57ba45ffc9735fbd38e18722","modified":1593958071000},{"_id":"source/categories/index.md","hash":"0e7e24a163df5e4471fb16b6700108f7fee85075","modified":1593958054000},{"_id":"source/tags/index.md","hash":"807598a0775616069bb3a2b991d612afaee4f408","modified":1593958030000},{"_id":"themes/tomotoes/languages/en.yml","hash":"11cb8fe0a699d9a9840dd080d80dec8326e53d90","modified":1593957811000},{"_id":"themes/tomotoes/languages/es-ES.yml","hash":"b8b330fdc997463db838f6cfdb40108f6a746b27","modified":1593957811000},{"_id":"themes/tomotoes/languages/ja.yml","hash":"215b56fcede2a1e660943ca2d41319e98a680ab6","modified":1593957811000},{"_id":"themes/tomotoes/languages/zh-CN.yml","hash":"e268c0a5c6785aebdf63ec1f46b18c3105ef089c","modified":1593957811000},{"_id":"themes/tomotoes/languages/nl-NL.yml","hash":"b722f7b096879f8f45e8bdf26345722d6da8ff21","modified":1593957811000},{"_id":"themes/tomotoes/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1593957811000},{"_id":"themes/tomotoes/layout/archive.ejs","hash":"e1508c8ab49ede817ea2ee06d2fe1169aed2018a","modified":1593957811000},{"_id":"themes/tomotoes/layout/card.ejs","hash":"93d20fa97d68472d949bafe729aa1a836669c108","modified":1593957811000},{"_id":"themes/tomotoes/layout/categories.ejs","hash":"9084ecdd9dd950afa0c3149d2be05611bc7c78f5","modified":1593957811000},{"_id":"themes/tomotoes/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1593957811000},{"_id":"themes/tomotoes/layout/index.ejs","hash":"88066d4d2af25ff93cf7c7334e0a39adfbe848dc","modified":1593957811000},{"_id":"themes/tomotoes/layout/layout.ejs","hash":"6c4415a5d86f4271db79808dca28b902f4b8a381","modified":1593957811000},{"_id":"themes/tomotoes/layout/page.ejs","hash":"18a3cfa0d0d3cd9f4c94a0a8107112d93f394d0f","modified":1593957811000},{"_id":"themes/tomotoes/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1593957811000},{"_id":"themes/tomotoes/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1593957811000},{"_id":"themes/tomotoes/layout/tags.ejs","hash":"857cae4e9bb1d8da70b8ba1a0545a9baee38d79d","modified":1593957811000},{"_id":"themes/tomotoes/scripts/plugins.js","hash":"232f6c4ff28782abaaff14ed65d98e3eff5285d0","modified":1593957811000},{"_id":"source/_posts/ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/overlapType.jpg","hash":"c41d49e9efb66cd63f660859f9bb881cf6b97d19","modified":1601966621000},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-formula.JPG","hash":"481aef73fdf674626d530babf4158b50acdbf423","modified":1598755508000},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-img.png","hash":"8a73e677c5a49ea48382fc314d04f37fb1645268","modified":1598770277000},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/on-lstm-img.jpg","hash":"4b13ddc0706f58b13f7725fb998fdbe17581eb3b","modified":1599118789000},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/model_train.jpg","hash":"190c0152b72a26bc14047ca55485ee1df98127ef","modified":1603335993000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-state-flow.jpg","hash":"08d337de0474490e51e482d78f278d7d980dfd2c","modified":1599035311000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-update.JPG","hash":"1827e82d32d5f37fb502739247de1fd187fe365f","modified":1599035437000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/eg1.JPG","hash":"0154e03ca7e5680cb77049e9b37056c2437a4170","modified":1599035666000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/level-his-now.jpg","hash":"0cc1859fc5107d668bd9935d4bf96327a5705bbf","modified":1599115070000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-formula.jpg","hash":"481aef73fdf674626d530babf4158b50acdbf423","modified":1598755508000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-img.png","hash":"8a73e677c5a49ea48382fc314d04f37fb1645268","modified":1598770277000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/on-lstm-img.jpg","hash":"4b13ddc0706f58b13f7725fb998fdbe17581eb3b","modified":1599118789000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/two-case.jpg","hash":"e84579e62cb52cfa90c5e2490a4a7397908be0e8","modified":1599115220000},{"_id":"source/_posts/VS-code-Module-torch-has-no-xxx-member/hello.jpg","hash":"097a6cb757989483123c5c4e1cecc017a1a309db","modified":1599269283000},{"_id":"source/_posts/markdownPad2-破解/hello.jpg","hash":"097a6cb757989483123c5c4e1cecc017a1a309db","modified":1599269269000},{"_id":"source/_posts/软件学报2020-基于带噪观测的远监督神经网络关系抽取/model.jpg","hash":"db323716b225fe62d3ef985ed3b346f2760c0109","modified":1603265518000},{"_id":"themes/tomotoes/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16dbe91b392ef9debb7abeffde473668d3337eb2","modified":1593957811000},{"_id":"themes/tomotoes/.github/ISSUE_TEMPLATE/custom.md","hash":"a3b49dff53b405dbafe2e96834313fc329710007","modified":1593957811000},{"_id":"themes/tomotoes/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/after-footer.ejs","hash":"211e5f8b428384d2f98eb245d2bf0cae07b4ccc1","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/archive.ejs","hash":"4b5a3e10e63bab91a7cd0b42ff17a48562a54665","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/footer.ejs","hash":"392314fb7c2eac4bf983a5c3fb6870b369f3aa92","modified":1594295540000},{"_id":"themes/tomotoes/layout/_partial/head.ejs","hash":"00160e18400303a4d3580951b2977e05fa638734","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/header.ejs","hash":"ac53bc3028d317f309e6b73db90e32d355862b92","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/index-item.ejs","hash":"08983b4bcb3457cbd95e8d5d3c12f46dfc4e347c","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/loading.ejs","hash":"fd88a2c7e11f758531663cfb72f4bcaf54d5a747","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/menu.ejs","hash":"565574e1e364d99a445cc5707871649710753b82","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post.ejs","hash":"0044ab24d1aa26f5ce3b26e0686da5cf3551d73f","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/script.ejs","hash":"c3893e66017d7621cd11ebce6bb83f4165564f63","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/search.ejs","hash":"5141bf384a847d2838a1f7c18bf6f80ad58ddf2c","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/switch.ejs","hash":"24bffdb2b334fd94a781f3836d80111a357a3e88","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/tags-bar.ejs","hash":"73d8bd3016265be07603a20756069cb8e36a61dc","modified":1593957811000},{"_id":"themes/tomotoes/source/css/style.less","hash":"3ef6677628e100ca02e95a5f2ea81222c7a0b69a","modified":1593957811000},{"_id":"themes/tomotoes/source/img/alipay.png","hash":"2b57ab7f2dae6c5b8fd34b50a38f2d47c141942a","modified":1593957811000},{"_id":"themes/tomotoes/source/img/avatar.jpg","hash":"32c6e1b06b37c5c1ab13e95578ed1100abe5c440","modified":1593957811000},{"_id":"themes/tomotoes/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1593957811000},{"_id":"themes/tomotoes/source/img/default.cur","hash":"3381d41a9dcbb4c4e69559723481f85e2b8cf99e","modified":1593957811000},{"_id":"themes/tomotoes/source/img/desktop.ini","hash":"fd3170725ac95ea5e63ed2bd1275480b95d6e46c","modified":1593957811000},{"_id":"themes/tomotoes/source/img/favicon.ico","hash":"848593b6cb46a400c48ae2b81f3eaad270a26855","modified":1593957811000},{"_id":"themes/tomotoes/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1593957811000},{"_id":"themes/tomotoes/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1593957811000},{"_id":"themes/tomotoes/source/img/pointer.cur","hash":"3adb643f97571f547021fb57b2d9d768a252d546","modified":1593957811000},{"_id":"themes/tomotoes/source/img/wechat.png","hash":"40e61c097e4eaddff95a27d7a4980fbbf596d43e","modified":1593957811000},{"_id":"themes/tomotoes/source/js/main.js","hash":"483d5a7d02a59d5469bb13e40f59aa966698ef29","modified":1593957811000},{"_id":"themes/tomotoes/source/js/main.min.js","hash":"483d5a7d02a59d5469bb13e40f59aa966698ef29","modified":1593957811000},{"_id":"themes/tomotoes/source/js/script.js","hash":"89a196b73388085d2083d32ead9691a061f2d5f8","modified":1593957811000},{"_id":"themes/tomotoes/source/js/script.min.js","hash":"89a196b73388085d2083d32ead9691a061f2d5f8","modified":1593957811000},{"_id":"source/_posts/AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction/model.jpg","hash":"245f1b663854a4346d72d2ce6397c8c0a642d096","modified":1600402739000},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/2.JPG","hash":"bde63a65366a8a64b6864cfc0e5ba33682ce8127","modified":1605234993000},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/3.JPG","hash":"eb7688ea35efb3a4a2b4cacb8a25f45d987f9479","modified":1605235134000},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/捕获.JPG","hash":"31b324723479dd73c448853334a7329c25694f48","modified":1605234567000},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/捕获1.JPG","hash":"dca79a3ea46ee7f01e11dc834d1e9e9cbaadc192","modified":1605234581000},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/police-tree.jpg","hash":"dc01a312bf4de0408d526396c18af85cf445881c","modified":1599033966000},{"_id":"themes/tomotoes/source/img/dog.png","hash":"ef30d046fa20b3e9b01d6531e5e435dc4c9076a1","modified":1593957811000},{"_id":"themes/tomotoes/source/js/jquery.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1593957811000},{"_id":"themes/tomotoes/source/js/jquery.min.js","hash":"1f994bb1c682f967bfe9128fc4a94a82d6afcfb3","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/baidu.ejs","hash":"319a03def9d0158f4a12597af9d7175ff4b11cca","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/gitalk.ejs","hash":"e12689917bb11d24a9e226ff22466fc5d12342a4","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/page-visit.ejs","hash":"cff0ec17dfae630ddae470f719c7761ad98518fb","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/site-visit.ejs","hash":"5e3f129818512f4190bffd3b69a39b14d22ea8fc","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/plugins/valine.ejs","hash":"bbdb3e0b8de1334db5747934e8217992bbc974da","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/category.ejs","hash":"61750d41d8b5e838fbaa4011d6a1af5baf45591b","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/comment.ejs","hash":"42cd59b0f2a9725977acecf97c75f32b15106034","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/copyright.ejs","hash":"bf70db059408704ce69bc999da59009b73f701a1","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/nav.ejs","hash":"56c8fa34198f3df7573fd2d08ad9f8b2ee819eb1","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/reward-btn.ejs","hash":"c954f13d5472946991ce2bca5d110935bcd63020","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/reward.ejs","hash":"7709eed57556784b1a58a25f879c47b0cdb94156","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/share.ejs","hash":"2871f4624d3ad37b624a9ad1649887f8682a1a81","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/title.ejs","hash":"e308f5202e62e90ae678c5bff865f07ee204f423","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/toc.ejs","hash":"d146530e081ec2fc0593a6bb250bd6569427a072","modified":1593957811000},{"_id":"themes/tomotoes/layout/_partial/post/updated.ejs","hash":"25b9e923e9a60187755f713f2e5b4828e1fa97b3","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/archives.less","hash":"6069bacf1d387f94c5269b32f1e607a638e9c4d4","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/article.less","hash":"259ed9304de68856e9b051a8cd6588ebb00396a2","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/cursor.less","hash":"3e98a1d67c05bc2bdb9e52387ae7b28cedc41e4c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/footer.less","hash":"0ef121c89f6ddb328d0ca397b6c76ed5c0584bf9","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/gotop.less","hash":"605ff30fa57f3f84c6edbba914ef996d61813bd9","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/header.less","hash":"d8f2bc2f62312aa6f98f1f5558ea047da102ac99","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/highlight.less","hash":"b58ea9692556c72e58316a70f2f984156ed8d4b8","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/layout.less","hash":"f013c3f30a5a689880e264658823cd9dc47d4b25","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/lightbox.less","hash":"b058a0ca88a5f0f7d207a2b182b172addfa1e5d8","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/loading.less","hash":"ccc9cd3ae59c051cb38d32ddbbb85c3355ce4a74","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/menu.less","hash":"652caf790107ea590642895fd49a0db0d199cd6c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/page.less","hash":"107dfaaad36704e5ef1d152606ace374f8739a5c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/postlist.less","hash":"c4883ab531cd7fa6d60c535f267f71fc047126c8","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/reward.less","hash":"6fd843bf90042fa33c08848f4233a87259aad22c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/search.less","hash":"5173bb54f3f12471ae14222d8e7c872e15ea718b","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/share.less","hash":"8c5d4fd2c8c107a05c47de9bbca5c15589358f88","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/tags.less","hash":"90d99814a60100c8cefca5c1863a9a4c572b7693","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/variable.less","hash":"b05623fee7a21d0680c87d32eb29a478196455cd","modified":1593957811000},{"_id":"themes/tomotoes/source/css/_partial/waves.less","hash":"f54f963e3c2db0aeac2443e28bc322dae1db4c91","modified":1593957811000},{"_id":"source/_posts/ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/casrel.jpg","hash":"f11c34703621b06f75adfefdee91ea7fd29d2e92","modified":1603198196000},{"_id":"themes/tomotoes/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1593957811000},{"_id":"themes/tomotoes/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1593957811000},{"_id":"public/atom.xml","hash":"0f94e86cba3533fff9d30de7870e045c3936f026","modified":1613639379043},{"_id":"public/content.json","hash":"b8a00fc7521a1f15aad38a75e1cf1f628fb8c3ae","modified":1613639379043},{"_id":"public/about/index.html","hash":"1291965d8d564ad005c087f32e399d9ac233122c","modified":1613639379043},{"_id":"public/tags/index.html","hash":"f8741a468a504fdfd430b1edef17dbb74b8e6811","modified":1613639379043},{"_id":"public/categories/index.html","hash":"236f75f9e38c7c0bd0c19d78888b8274036a2c28","modified":1613639379043},{"_id":"public/posts/20210206/index.html","hash":"254b4ecdc43b823da0603e96ed19ee4e411e15eb","modified":1613639379043},{"_id":"public/posts/20201101/index.html","hash":"e11608b6ae39631219def9b0d921819ecfaf5d7c","modified":1613639379043},{"_id":"public/posts/20201022/index.html","hash":"858d018298e62a2fbf25d4673c24cab619c2a4cd","modified":1613639379043},{"_id":"public/posts/20201020/index.html","hash":"375219817ddfd0b52c7276c80bccc3c127b00d6d","modified":1613639379043},{"_id":"public/posts/20201006/index.html","hash":"b592aefeb1667cd29e18970f9bb3324554a01049","modified":1613639379043},{"_id":"public/posts/20200921-TopicModel/index.html","hash":"0e895fe9ad0c1637650c37bd1c3982ae31ab9c18","modified":1613639379043},{"_id":"public/posts/20200916/index.html","hash":"bef785c82cd21ddaec5417d75be25a0ab5f1525c","modified":1613639379043},{"_id":"public/posts/20200905/index.html","hash":"c9118ff4a3f52490ae8f82100dc6b3a0f4ec4fab","modified":1613639379043},{"_id":"public/posts/20200904a/index.html","hash":"19274ce620d18427d40d44742cf732727dbb3540","modified":1613639379043},{"_id":"public/posts/20200902a/index.html","hash":"b94065e544fdce4795e56efa790f336995f28884","modified":1613639379043},{"_id":"public/posts/20200830a/index.html","hash":"6fc10dd0ea61297f4c8afab49e3078c0699a5abf","modified":1613639379043},{"_id":"public/posts/20200829a/index.html","hash":"589ffed52e00dd7a7087d5bc6c8728533a420029","modified":1613639379043},{"_id":"public/posts/20200827a/index.html","hash":"9fbb799de28cd2aaccf4fa2aa2cf8389cf792588","modified":1613639379043},{"_id":"public/posts/k8sConfig/index.html","hash":"02055bd23d2e83b02353f571f03f43b7555ea0b5","modified":1613639379043},{"_id":"public/posts/200715a/index.html","hash":"beffc61c98d57ebd8c3788c521cd6cb9d2cbe577","modified":1613639379043},{"_id":"public/posts/200711ia/index.html","hash":"e69c2db0c8316bfb72fd4a0b1a556f920a2657b3","modified":1613639379043},{"_id":"public/posts/927108io/index.html","hash":"851d4e938db1deb15c05ffd0a02c022059467004","modified":1613639379043},{"_id":"public/posts/927108rt/index.html","hash":"eeb8cfe1b7672ac87d64a71986b92a057a53582a","modified":1613639379043},{"_id":"public/posts/e3a70ff1/index.html","hash":"e9f7cc634e95b460a7b25737ef3dc1f680e8f329","modified":1613639379043},{"_id":"public/posts/b4c6216f/index.html","hash":"708d5c3783a4b8db16cfcf1d21d0b7d28134b652","modified":1613639379043},{"_id":"public/posts/92710899/index.html","hash":"bcf5ef4a65bd4efcac3c6958fa2a68d545deb659","modified":1613639379043},{"_id":"public/categories/Linux-鸟哥私房菜/index.html","hash":"cbaa15ebe82d2443f54078bacdcca7922f942a05","modified":1613639379043},{"_id":"public/categories/Relation-Extraction-Notes/index.html","hash":"01be95b1e85c181b075e72ad0695fbc7200951ec","modified":1613639379043},{"_id":"public/categories/Relation-Extraction-Notes/COLING-2020/index.html","hash":"27f3d203f06427c75b247e5eaa4331f41137457c","modified":1613639379043},{"_id":"public/categories/Relation-Extraction-Notes/AAAI-2020/index.html","hash":"d8ff95837ff0390f31bc324fb59ca46a88b990c3","modified":1613639379043},{"_id":"public/categories/Relation-Extraction-Notes/ICASSP-2016/index.html","hash":"8444698c23a4175f13186a8d21d12ce4bfb98eaf","modified":1613639379043},{"_id":"public/categories/Kubernetes/index.html","hash":"2bda0cf76cc5fa0493d6f880221e6375a16ea5f4","modified":1613639379043},{"_id":"public/categories/Relation-Extraction-Notes/ACL-2020/index.html","hash":"6d7c4ce8449bf1cc67a5c9b93de36bee9438e513","modified":1613639379043},{"_id":"public/categories/ICLR-2019/index.html","hash":"0ac6fd053563081d4b84e46db8e540cf9a6b22f1","modified":1613639379043},{"_id":"public/categories/python爬虫/index.html","hash":"329cd6293478794ef78c5acecc3f4e1b12e7e46b","modified":1613639379043},{"_id":"public/categories/VS-code/index.html","hash":"96b284792025842f5401847633aeaa15331a8b5e","modified":1613639379043},{"_id":"public/categories/dpkg/index.html","hash":"e697c4ab9b98bd3a84abda725dccdbfe7d3079a8","modified":1613639379043},{"_id":"public/categories/MarkdownPad2/index.html","hash":"2f7cec31b9fae9d0ae9a2d303358e5ea6868f4b8","modified":1613639379043},{"_id":"public/categories/Topic-Model/index.html","hash":"937d7e07747daa18a9574afd9f6c5ffed2c63025","modified":1613639379043},{"_id":"public/categories/入门/index.html","hash":"9f66c963e54c3380f70a09226b16fbd4e3fd19e5","modified":1613639379043},{"_id":"public/categories/Relation-Extraction-Notes/软件学报-2020/index.html","hash":"1bf2e791f516ff0132e21329920be97648b18b46","modified":1613639379043},{"_id":"public/categories/Kubernetes/K8s/index.html","hash":"88e28b2ca991d8dfc786abdbc5bd658636d612ae","modified":1613639379043},{"_id":"public/categories/Topic-Model/主题模型/index.html","hash":"daee62ba947b4589c9f9b3f4b454d04e670757a8","modified":1613639379043},{"_id":"public/archives/index.html","hash":"9532d3c5e0972b2ff7a45645f58568c31393ddd3","modified":1613639379043},{"_id":"public/archives/page/2/index.html","hash":"cce6f6215fc58dc59ab46956b6a1f1b264d1912a","modified":1613639379043},{"_id":"public/archives/page/3/index.html","hash":"8c3b1545072782eb62b4538554b0ca6e819049c9","modified":1613639379043},{"_id":"public/archives/2020/index.html","hash":"fb9c3af117edfda99fb3d7c35ebc90007bbe46e1","modified":1613639379043},{"_id":"public/archives/2020/page/2/index.html","hash":"7a364beb14e2251e27ee35b8d88bd11f4db0f906","modified":1613639379043},{"_id":"public/archives/2020/07/index.html","hash":"c5de1e55977cdf557bbbedfdd1a38adfe6583530","modified":1613639379043},{"_id":"public/archives/2020/08/index.html","hash":"fba789217be53955a2cbd62cc61f4447cb09b169","modified":1613639379043},{"_id":"public/archives/2020/09/index.html","hash":"635f8aef8cc67d32ebbd611b2b9786f93e79063f","modified":1613639379043},{"_id":"public/archives/2020/10/index.html","hash":"fcfeb7132e8ada622c06a7e323d736c821ad8c0e","modified":1613639379043},{"_id":"public/archives/2020/11/index.html","hash":"3faef012cba5fc450a7a9eeaa983fe0795a24c2f","modified":1613639379043},{"_id":"public/archives/2021/index.html","hash":"1595b3512825b3ec598d7c16a6b3ea12a221c0d0","modified":1613639379043},{"_id":"public/index.html","hash":"0fe6e8c08c7c008389d6f2cbc0bca2acda3e6fb7","modified":1613639379043},{"_id":"public/archives/2021/02/index.html","hash":"975635ad5d7df6917642f4fca8f3729196e3ce6c","modified":1613639379043},{"_id":"public/page/3/index.html","hash":"4eebd87fc325edbb04308a8fb6da11814b62b5ea","modified":1613639379043},{"_id":"public/page/2/index.html","hash":"c94e981b04419eb7b20b40efb78cff77b3d73976","modified":1613639379043},{"_id":"public/tags/linux/index.html","hash":"80207f2b46173291625e9c83b3fc53323eaa0da5","modified":1613639379043},{"_id":"public/tags/AAAI-2020/index.html","hash":"6919649cec16d28a69c341632d873b7e571def36","modified":1613639379043},{"_id":"public/tags/Relation-Extraction/index.html","hash":"a3d3165a20c553659345385fe25528158cc1b904","modified":1613639379043},{"_id":"public/tags/ACL-2020/index.html","hash":"c0adb422945e2c02c6a1edb7956e53a4c69aba9f","modified":1613639379043},{"_id":"public/tags/COLING-2020/index.html","hash":"a5e6a60f11d47dfff22ec05e7413c309655199f2","modified":1613639379043},{"_id":"public/tags/ICASSP-2016/index.html","hash":"f91e72d48d42105d7a88ee44a3222ccdc3af2271","modified":1613639379043},{"_id":"public/tags/Kubernetes配置/index.html","hash":"94ff098e606a16514ff25121e8de6b8392a10b49","modified":1613639379043},{"_id":"public/tags/K8s配置/index.html","hash":"6ca658737d10ae28adc72d44ec10282c558b733b","modified":1613639379043},{"_id":"public/tags/ICLR-2019/index.html","hash":"c02421c0575c5b05c6b18dc711728d08a27cf188","modified":1613639379043},{"_id":"public/tags/python/index.html","hash":"d9a33fa217caa529f7daf8e15cd158a048584229","modified":1613639379043},{"_id":"public/tags/爬虫框架/index.html","hash":"caed9536003e1d57ef6312d12b72952567b7f838","modified":1613639379043},{"_id":"public/tags/VS-code/index.html","hash":"118b5ba99a10f8a98c2f7221e3e7a2a0bc05c0f1","modified":1613639379043},{"_id":"public/tags/dpkg/index.html","hash":"761cbe404124f05b4fddd3d88adf48f04c4e5d13","modified":1613639379043},{"_id":"public/tags/MarkdownPad2/index.html","hash":"6c10f8a2244a19f9f046d2bdc9cd7bc9c8281be7","modified":1613639379043},{"_id":"public/tags/Topic-Model/index.html","hash":"4217a66fbae7db819909771e1f66a0c3afa25d94","modified":1613639379043},{"_id":"public/tags/markdown/index.html","hash":"6c52be1951273f6b1e16138f57b5409508279b97","modified":1613639379043},{"_id":"public/tags/主题模型/index.html","hash":"4e7e54110dd49a9667e9d666ac4899b74f6f89ee","modified":1613639379043},{"_id":"public/tags/软件学报-2020/index.html","hash":"c49ae6134bef2ef8c9acecfec33f02e84a94e733","modified":1613639379043},{"_id":"public/README.md","hash":"147dc464a557fd15e1e4c49b14ca98cfc1067dd7","modified":1613639379043},{"_id":"public/CNAME","hash":"7f6da7e27de0b42849169b8c0ec1ed39380a2f42","modified":1613639379043},{"_id":"public/img/alipay.png","hash":"2b57ab7f2dae6c5b8fd34b50a38f2d47c141942a","modified":1613639379043},{"_id":"public/img/avatar.jpg","hash":"32c6e1b06b37c5c1ab13e95578ed1100abe5c440","modified":1613639379043},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1613639379043},{"_id":"public/img/default.cur","hash":"3381d41a9dcbb4c4e69559723481f85e2b8cf99e","modified":1613639379043},{"_id":"public/img/desktop.ini","hash":"fd3170725ac95ea5e63ed2bd1275480b95d6e46c","modified":1613639379043},{"_id":"public/img/favicon.ico","hash":"848593b6cb46a400c48ae2b81f3eaad270a26855","modified":1613639379043},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1613639379043},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1613639379043},{"_id":"public/img/pointer.cur","hash":"3adb643f97571f547021fb57b2d9d768a252d546","modified":1613639379043},{"_id":"public/img/wechat.png","hash":"40e61c097e4eaddff95a27d7a4980fbbf596d43e","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1613639379043},{"_id":"public/posts/20200904a/hello.jpg","hash":"097a6cb757989483123c5c4e1cecc017a1a309db","modified":1613639379043},{"_id":"public/posts/20200902a/hello.jpg","hash":"097a6cb757989483123c5c4e1cecc017a1a309db","modified":1613639379043},{"_id":"public/posts/20201020/model.jpg","hash":"db323716b225fe62d3ef985ed3b346f2760c0109","modified":1613639379043},{"_id":"public/posts/20201006/overlapType.jpg","hash":"c41d49e9efb66cd63f660859f9bb881cf6b97d19","modified":1613639379043},{"_id":"public/posts/20200829a/lstm-formula.JPG","hash":"481aef73fdf674626d530babf4158b50acdbf423","modified":1613639379043},{"_id":"public/posts/20200829a/lstm-img.png","hash":"8a73e677c5a49ea48382fc314d04f37fb1645268","modified":1613639379043},{"_id":"public/posts/20200829a/on-lstm-img.jpg","hash":"4b13ddc0706f58b13f7725fb998fdbe17581eb3b","modified":1613639379043},{"_id":"public/posts/20201022/model_train.jpg","hash":"190c0152b72a26bc14047ca55485ee1df98127ef","modified":1613639379043},{"_id":"public/posts/20200830a/cell-state-flow.jpg","hash":"08d337de0474490e51e482d78f278d7d980dfd2c","modified":1613639379043},{"_id":"public/posts/20200830a/cell-update.JPG","hash":"1827e82d32d5f37fb502739247de1fd187fe365f","modified":1613639379043},{"_id":"public/posts/20200830a/eg1.JPG","hash":"0154e03ca7e5680cb77049e9b37056c2437a4170","modified":1613639379043},{"_id":"public/posts/20200830a/level-his-now.jpg","hash":"0cc1859fc5107d668bd9935d4bf96327a5705bbf","modified":1613639379043},{"_id":"public/posts/20200830a/lstm-formula.jpg","hash":"481aef73fdf674626d530babf4158b50acdbf423","modified":1613639379043},{"_id":"public/posts/20200830a/lstm-img.png","hash":"8a73e677c5a49ea48382fc314d04f37fb1645268","modified":1613639379043},{"_id":"public/posts/20200830a/on-lstm-img.jpg","hash":"4b13ddc0706f58b13f7725fb998fdbe17581eb3b","modified":1613639379043},{"_id":"public/posts/20200830a/two-case.jpg","hash":"e84579e62cb52cfa90c5e2490a4a7397908be0e8","modified":1613639379043},{"_id":"public/img/dog.png","hash":"ef30d046fa20b3e9b01d6531e5e435dc4c9076a1","modified":1613639379043},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1613639379043},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1613639379043},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1613639379043},{"_id":"public/posts/20200916/model.jpg","hash":"245f1b663854a4346d72d2ce6397c8c0a642d096","modified":1613639379043},{"_id":"public/posts/20201022/2.JPG","hash":"bde63a65366a8a64b6864cfc0e5ba33682ce8127","modified":1613639379043},{"_id":"public/posts/20201022/3.JPG","hash":"eb7688ea35efb3a4a2b4cacb8a25f45d987f9479","modified":1613639379043},{"_id":"public/posts/20201022/捕获.JPG","hash":"31b324723479dd73c448853334a7329c25694f48","modified":1613639379043},{"_id":"public/posts/20201022/捕获1.JPG","hash":"dca79a3ea46ee7f01e11dc834d1e9e9cbaadc192","modified":1613639379043},{"_id":"public/posts/20200830a/police-tree.jpg","hash":"dc01a312bf4de0408d526396c18af85cf445881c","modified":1613639379043},{"_id":"public/js/main.js","hash":"7b067789f5be7937d4f0a38d6abb9ffd311fe161","modified":1613639379043},{"_id":"public/js/main.min.js","hash":"7b067789f5be7937d4f0a38d6abb9ffd311fe161","modified":1613639379043},{"_id":"public/js/script.min.js","hash":"dbae78528d3c9b6a88a7e6acab359c202e3a12c6","modified":1613639379043},{"_id":"public/js/script.js","hash":"dbae78528d3c9b6a88a7e6acab359c202e3a12c6","modified":1613639379043},{"_id":"public/js/jquery.min.js","hash":"2c5a2df970b0f3e004aa0e7c8564726b3f388af9","modified":1613639379043},{"_id":"public/js/jquery.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1613639379043},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1613639379043},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1613639379043},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1613639379043},{"_id":"public/posts/20201006/casrel.jpg","hash":"f11c34703621b06f75adfefdee91ea7fd29d2e92","modified":1613639379043},{"_id":"public/css/style.css","hash":"5c00bd9217664169cd97daa1274921f6132fba8a","modified":1613639379043},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1613639379043}],"Category":[{"name":"Linux-鸟哥私房菜","_id":"cklan82mj0004dgtq4795hsz1"},{"name":"Relation Extraction Notes","_id":"cklan82mp000adgtq2a15d4hm"},{"name":"COLING 2020","parent":"cklan82mp000adgtq2a15d4hm","_id":"cklan82n2000wdgtq35dlgaob"},{"name":"AAAI 2020","parent":"cklan82mp000adgtq2a15d4hm","_id":"cklan82n50013dgtqb6lbft58"},{"name":"ICASSP 2016","parent":"cklan82mp000adgtq2a15d4hm","_id":"cklan82n80019dgtq27o97mwm"},{"name":"Kubernetes","_id":"cklan82nb001jdgtq29an44ld"},{"name":"ACL 2020","parent":"cklan82mp000adgtq2a15d4hm","_id":"cklan82ne001qdgtq37192m4i"},{"name":"ICLR 2019","_id":"cklan82nf001wdgtq355qbin8"},{"name":"python爬虫","_id":"cklan82nk0027dgtqdp8fg0ow"},{"name":"VS code","_id":"cklan82no002gdgtq7n094oyw"},{"name":"dpkg","_id":"cklan82np002kdgtq53zc9jn4"},{"name":"MarkdownPad2","_id":"cklan82nq002qdgtqeb9fgqvh"},{"name":"Topic Model","_id":"cklan82ns002udgtq31mockfo"},{"name":"入门","_id":"cklan82ns002xdgtq6tlxapm8"},{"name":"软件学报 2020","parent":"cklan82mp000adgtq2a15d4hm","_id":"cklan82nt0031dgtqa3114d93"},{"name":"K8s","parent":"cklan82nb001jdgtq29an44ld","_id":"cklan82nu0035dgtqg8sh95jw"},{"name":"主题模型","parent":"cklan82ns002udgtq31mockfo","_id":"cklan82nv0039dgtq7iqnhtkg"}],"Data":[],"Page":[{"title":"about","date":"2020-07-05T14:06:11.000Z","layout":"about","comments":1,"reward":false,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-07-05 22:06:11\nlayout: about\ncomments: true\nreward: false\n---\n","updated":"2020-07-05T14:07:51.000Z","path":"about/index.html","_id":"cklan82mf0001dgtqh0091qh3","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-07-05T14:06:03.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-07-05 22:06:03\nlayout: categories\ncomments: false\n---\n","updated":"2020-07-05T14:07:34.000Z","path":"categories/index.html","_id":"cklan82mi0003dgtq1rxzcaxp","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-07-05T14:05:44.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-07-05 22:05:44\nlayout: tags\ncomments: false\n---\n","updated":"2020-07-05T14:07:10.000Z","path":"tags/index.html","_id":"cklan82mm0007dgtqfoxrei95","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2.Linux如何学习、主机规划与磁盘分区","date":"2020-07-08T00:53:05.000Z","abbrlink":"927108rt","_content":"\n# Linux操作模式\n\t\n* 图形界面\n* 命令行界面（Command Line）\n\n# Linux与硬件的搭配\n\n* 各个组件或设备在Linux下面都是一个文件\n\t* 硬盘 /dev/sd[a-p]\n\n# 磁盘分区\n\n* SATA/USB接口的磁盘根本没有一定的顺序\n\t* 设备文件名命名时，根据Linux内核检测到磁盘的顺序命名\n\n* 磁盘的组成\n\t* 磁盘的第一个扇区特别重要，包括：\n\t\t* **主引导分区**（Master Boot Record， MBR）\n\t\t\t* 安装引导加载程序的地方，446B\n\t\t\t* 系统开机的时候会主动读取\n\t\t* **分区表**（partition table）\n\t\t\t* 记录整块硬盘分区的状态， 64B\n\t\t\t* 分为若干记录区（最多4个），每组记录区记录了该区段的起始与结束的柱面号码\n\n> 所谓的分区只是针对64B的分区表进行设置\n> \n> 硬盘默认的分区表仅能写入四组分区信息，这四个分区信息称为**主分区（primary）**或**扩展分区（extended）**\n> \n> 扩展分区最多只能有一个\n> \n> 分区最小的单位是**柱面**\n> \n> 扩展分区继续切分的分区，叫做**逻辑分区**，逻辑分区的设备名称号码由**5**开始，1-4是保留给主分区或者扩展分区使用的，SATA硬盘最多11个逻辑分区（5-15）\n> \n> 能够被格式化后作为数据访问的分区为**主分区**与**逻辑分区**，**扩展分区**无法格式化\n\n# 开机流程\n\n* BIOS是开机时计算机系统主动执行的第一个程序\n* BIOS会依据用户的设置去取得能够开机的硬盘，并读取该硬盘第一个扇区的MBR，MBR放置着最基本的引导加载程序，剩下的任务由该引导加载程序（Boot Loader）完成\n* 引导加载程序目的是**加载内核文件**，剩下的由操作系统完成\n\n### Boot Loader\n\n* 提供菜单：用户可以选择不同的开机选项\n* 载入内核文件，开始操作系统\n* 转交其他Loader：多重引导\n\n> 引导加载程序可以安装在MBR，也可安装于每个分区的引导扇区（boot sector）\n\n* 每个分区都有启动扇区\n* 实际可开机的内核文件是放置在各分区内的\n* loader只会认识自己的系统分区内可开机的内核文件和其他loader\n* loader可以直接指向或者间接将管理权转交给另一个管理程序\n\n# Linux安装模式下，磁盘分区的选择\n\n> Linux的所有数据都是以文件的形态呈现的\n> \n> 目录树结构\n\n## 文件系统与目录树的关系（挂载）\n\n* 挂载\n\t* 利用一个目录作为进入点，将磁盘分区的数据放置在该目录下\n\t* 进入点叫做**挂载点**\n\t\n### 安装distributions，挂载点及磁盘分区的规划\n\n* /\n* swap\n* 预留一个备用的剩余磁盘空间\n> 可以把/home、/usr、/boot、/var都单独分区\n\n","source":"_posts/2-Linux如何学习、主机规划与磁盘分区.md","raw":"---\ntitle: 2.Linux如何学习、主机规划与磁盘分区\ndate: 2020-07-08 08:53:05\ntags: linux\ncategories: Linux-鸟哥私房菜\nabbrlink: '927108rt'\n---\n\n# Linux操作模式\n\t\n* 图形界面\n* 命令行界面（Command Line）\n\n# Linux与硬件的搭配\n\n* 各个组件或设备在Linux下面都是一个文件\n\t* 硬盘 /dev/sd[a-p]\n\n# 磁盘分区\n\n* SATA/USB接口的磁盘根本没有一定的顺序\n\t* 设备文件名命名时，根据Linux内核检测到磁盘的顺序命名\n\n* 磁盘的组成\n\t* 磁盘的第一个扇区特别重要，包括：\n\t\t* **主引导分区**（Master Boot Record， MBR）\n\t\t\t* 安装引导加载程序的地方，446B\n\t\t\t* 系统开机的时候会主动读取\n\t\t* **分区表**（partition table）\n\t\t\t* 记录整块硬盘分区的状态， 64B\n\t\t\t* 分为若干记录区（最多4个），每组记录区记录了该区段的起始与结束的柱面号码\n\n> 所谓的分区只是针对64B的分区表进行设置\n> \n> 硬盘默认的分区表仅能写入四组分区信息，这四个分区信息称为**主分区（primary）**或**扩展分区（extended）**\n> \n> 扩展分区最多只能有一个\n> \n> 分区最小的单位是**柱面**\n> \n> 扩展分区继续切分的分区，叫做**逻辑分区**，逻辑分区的设备名称号码由**5**开始，1-4是保留给主分区或者扩展分区使用的，SATA硬盘最多11个逻辑分区（5-15）\n> \n> 能够被格式化后作为数据访问的分区为**主分区**与**逻辑分区**，**扩展分区**无法格式化\n\n# 开机流程\n\n* BIOS是开机时计算机系统主动执行的第一个程序\n* BIOS会依据用户的设置去取得能够开机的硬盘，并读取该硬盘第一个扇区的MBR，MBR放置着最基本的引导加载程序，剩下的任务由该引导加载程序（Boot Loader）完成\n* 引导加载程序目的是**加载内核文件**，剩下的由操作系统完成\n\n### Boot Loader\n\n* 提供菜单：用户可以选择不同的开机选项\n* 载入内核文件，开始操作系统\n* 转交其他Loader：多重引导\n\n> 引导加载程序可以安装在MBR，也可安装于每个分区的引导扇区（boot sector）\n\n* 每个分区都有启动扇区\n* 实际可开机的内核文件是放置在各分区内的\n* loader只会认识自己的系统分区内可开机的内核文件和其他loader\n* loader可以直接指向或者间接将管理权转交给另一个管理程序\n\n# Linux安装模式下，磁盘分区的选择\n\n> Linux的所有数据都是以文件的形态呈现的\n> \n> 目录树结构\n\n## 文件系统与目录树的关系（挂载）\n\n* 挂载\n\t* 利用一个目录作为进入点，将磁盘分区的数据放置在该目录下\n\t* 进入点叫做**挂载点**\n\t\n### 安装distributions，挂载点及磁盘分区的规划\n\n* /\n* swap\n* 预留一个备用的剩余磁盘空间\n> 可以把/home、/usr、/boot、/var都单独分区\n\n","slug":"2-Linux如何学习、主机规划与磁盘分区","published":1,"updated":"2020-07-09T08:29:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82m90000dgtqasiu4t1y","content":"<h1 id=\"Linux操作模式\"><a href=\"#Linux操作模式\" class=\"headerlink\" title=\"Linux操作模式\"></a>Linux操作模式</h1><ul>\n<li>图形界面</li>\n<li>命令行界面（Command Line）</li>\n</ul>\n<h1 id=\"Linux与硬件的搭配\"><a href=\"#Linux与硬件的搭配\" class=\"headerlink\" title=\"Linux与硬件的搭配\"></a>Linux与硬件的搭配</h1><ul>\n<li>各个组件或设备在Linux下面都是一个文件<ul>\n<li>硬盘 /dev/sd[a-p]</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h1><ul>\n<li><p>SATA/USB接口的磁盘根本没有一定的顺序</p>\n<ul>\n<li>设备文件名命名时，根据Linux内核检测到磁盘的顺序命名</li>\n</ul>\n</li>\n<li><p>磁盘的组成</p>\n<ul>\n<li>磁盘的第一个扇区特别重要，包括：<ul>\n<li><strong>主引导分区</strong>（Master Boot Record， MBR）<ul>\n<li>安装引导加载程序的地方，446B</li>\n<li>系统开机的时候会主动读取</li>\n</ul>\n</li>\n<li><strong>分区表</strong>（partition table）<ul>\n<li>记录整块硬盘分区的状态， 64B</li>\n<li>分为若干记录区（最多4个），每组记录区记录了该区段的起始与结束的柱面号码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所谓的分区只是针对64B的分区表进行设置</p>\n<p>硬盘默认的分区表仅能写入四组分区信息，这四个分区信息称为<strong>主分区（primary）</strong>或<strong>扩展分区（extended）</strong></p>\n<p>扩展分区最多只能有一个</p>\n<p>分区最小的单位是<strong>柱面</strong></p>\n<p>扩展分区继续切分的分区，叫做<strong>逻辑分区</strong>，逻辑分区的设备名称号码由<strong>5</strong>开始，1-4是保留给主分区或者扩展分区使用的，SATA硬盘最多11个逻辑分区（5-15）</p>\n<p>能够被格式化后作为数据访问的分区为<strong>主分区</strong>与<strong>逻辑分区</strong>，<strong>扩展分区</strong>无法格式化</p>\n</blockquote>\n<h1 id=\"开机流程\"><a href=\"#开机流程\" class=\"headerlink\" title=\"开机流程\"></a>开机流程</h1><ul>\n<li>BIOS是开机时计算机系统主动执行的第一个程序</li>\n<li>BIOS会依据用户的设置去取得能够开机的硬盘，并读取该硬盘第一个扇区的MBR，MBR放置着最基本的引导加载程序，剩下的任务由该引导加载程序（Boot Loader）完成</li>\n<li>引导加载程序目的是<strong>加载内核文件</strong>，剩下的由操作系统完成</li>\n</ul>\n<h3 id=\"Boot-Loader\"><a href=\"#Boot-Loader\" class=\"headerlink\" title=\"Boot Loader\"></a>Boot Loader</h3><ul>\n<li>提供菜单：用户可以选择不同的开机选项</li>\n<li>载入内核文件，开始操作系统</li>\n<li>转交其他Loader：多重引导</li>\n</ul>\n<blockquote>\n<p>引导加载程序可以安装在MBR，也可安装于每个分区的引导扇区（boot sector）</p>\n</blockquote>\n<ul>\n<li>每个分区都有启动扇区</li>\n<li>实际可开机的内核文件是放置在各分区内的</li>\n<li>loader只会认识自己的系统分区内可开机的内核文件和其他loader</li>\n<li>loader可以直接指向或者间接将管理权转交给另一个管理程序</li>\n</ul>\n<h1 id=\"Linux安装模式下，磁盘分区的选择\"><a href=\"#Linux安装模式下，磁盘分区的选择\" class=\"headerlink\" title=\"Linux安装模式下，磁盘分区的选择\"></a>Linux安装模式下，磁盘分区的选择</h1><blockquote>\n<p>Linux的所有数据都是以文件的形态呈现的</p>\n<p>目录树结构</p>\n</blockquote>\n<h2 id=\"文件系统与目录树的关系（挂载）\"><a href=\"#文件系统与目录树的关系（挂载）\" class=\"headerlink\" title=\"文件系统与目录树的关系（挂载）\"></a>文件系统与目录树的关系（挂载）</h2><ul>\n<li>挂载<ul>\n<li>利用一个目录作为进入点，将磁盘分区的数据放置在该目录下</li>\n<li>进入点叫做<strong>挂载点</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装distributions，挂载点及磁盘分区的规划\"><a href=\"#安装distributions，挂载点及磁盘分区的规划\" class=\"headerlink\" title=\"安装distributions，挂载点及磁盘分区的规划\"></a>安装distributions，挂载点及磁盘分区的规划</h3><ul>\n<li>/</li>\n<li>swap</li>\n<li>预留一个备用的剩余磁盘空间<blockquote>\n<p>可以把/home、/usr、/boot、/var都单独分区</p>\n</blockquote>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux操作模式\"><a href=\"#Linux操作模式\" class=\"headerlink\" title=\"Linux操作模式\"></a>Linux操作模式</h1><ul>\n<li>图形界面</li>\n<li>命令行界面（Command Line）</li>\n</ul>\n<h1 id=\"Linux与硬件的搭配\"><a href=\"#Linux与硬件的搭配\" class=\"headerlink\" title=\"Linux与硬件的搭配\"></a>Linux与硬件的搭配</h1><ul>\n<li>各个组件或设备在Linux下面都是一个文件<ul>\n<li>硬盘 /dev/sd[a-p]</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h1><ul>\n<li><p>SATA/USB接口的磁盘根本没有一定的顺序</p>\n<ul>\n<li>设备文件名命名时，根据Linux内核检测到磁盘的顺序命名</li>\n</ul>\n</li>\n<li><p>磁盘的组成</p>\n<ul>\n<li>磁盘的第一个扇区特别重要，包括：<ul>\n<li><strong>主引导分区</strong>（Master Boot Record， MBR）<ul>\n<li>安装引导加载程序的地方，446B</li>\n<li>系统开机的时候会主动读取</li>\n</ul>\n</li>\n<li><strong>分区表</strong>（partition table）<ul>\n<li>记录整块硬盘分区的状态， 64B</li>\n<li>分为若干记录区（最多4个），每组记录区记录了该区段的起始与结束的柱面号码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所谓的分区只是针对64B的分区表进行设置</p>\n<p>硬盘默认的分区表仅能写入四组分区信息，这四个分区信息称为<strong>主分区（primary）</strong>或<strong>扩展分区（extended）</strong></p>\n<p>扩展分区最多只能有一个</p>\n<p>分区最小的单位是<strong>柱面</strong></p>\n<p>扩展分区继续切分的分区，叫做<strong>逻辑分区</strong>，逻辑分区的设备名称号码由<strong>5</strong>开始，1-4是保留给主分区或者扩展分区使用的，SATA硬盘最多11个逻辑分区（5-15）</p>\n<p>能够被格式化后作为数据访问的分区为<strong>主分区</strong>与<strong>逻辑分区</strong>，<strong>扩展分区</strong>无法格式化</p>\n</blockquote>\n<h1 id=\"开机流程\"><a href=\"#开机流程\" class=\"headerlink\" title=\"开机流程\"></a>开机流程</h1><ul>\n<li>BIOS是开机时计算机系统主动执行的第一个程序</li>\n<li>BIOS会依据用户的设置去取得能够开机的硬盘，并读取该硬盘第一个扇区的MBR，MBR放置着最基本的引导加载程序，剩下的任务由该引导加载程序（Boot Loader）完成</li>\n<li>引导加载程序目的是<strong>加载内核文件</strong>，剩下的由操作系统完成</li>\n</ul>\n<h3 id=\"Boot-Loader\"><a href=\"#Boot-Loader\" class=\"headerlink\" title=\"Boot Loader\"></a>Boot Loader</h3><ul>\n<li>提供菜单：用户可以选择不同的开机选项</li>\n<li>载入内核文件，开始操作系统</li>\n<li>转交其他Loader：多重引导</li>\n</ul>\n<blockquote>\n<p>引导加载程序可以安装在MBR，也可安装于每个分区的引导扇区（boot sector）</p>\n</blockquote>\n<ul>\n<li>每个分区都有启动扇区</li>\n<li>实际可开机的内核文件是放置在各分区内的</li>\n<li>loader只会认识自己的系统分区内可开机的内核文件和其他loader</li>\n<li>loader可以直接指向或者间接将管理权转交给另一个管理程序</li>\n</ul>\n<h1 id=\"Linux安装模式下，磁盘分区的选择\"><a href=\"#Linux安装模式下，磁盘分区的选择\" class=\"headerlink\" title=\"Linux安装模式下，磁盘分区的选择\"></a>Linux安装模式下，磁盘分区的选择</h1><blockquote>\n<p>Linux的所有数据都是以文件的形态呈现的</p>\n<p>目录树结构</p>\n</blockquote>\n<h2 id=\"文件系统与目录树的关系（挂载）\"><a href=\"#文件系统与目录树的关系（挂载）\" class=\"headerlink\" title=\"文件系统与目录树的关系（挂载）\"></a>文件系统与目录树的关系（挂载）</h2><ul>\n<li>挂载<ul>\n<li>利用一个目录作为进入点，将磁盘分区的数据放置在该目录下</li>\n<li>进入点叫做<strong>挂载点</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装distributions，挂载点及磁盘分区的规划\"><a href=\"#安装distributions，挂载点及磁盘分区的规划\" class=\"headerlink\" title=\"安装distributions，挂载点及磁盘分区的规划\"></a>安装distributions，挂载点及磁盘分区的规划</h3><ul>\n<li>/</li>\n<li>swap</li>\n<li>预留一个备用的剩余磁盘空间<blockquote>\n<p>可以把/home、/usr、/boot、/var都单独分区</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"AAAI 2020 -- Self-Attention Enhanced Selective Gate with Entity-Aware Embedding for Distantly Supervised Relation Extraction","date":"2020-09-16T12:15:08.000Z","abbrlink":"20200916","_content":"\n# 摘要\n\n> 远程监督由于其强烈的假设，深受噪音数据标签的影响。\n>\n> 大多数现有工作都在bag级别采用选择性注意力机制来降噪。\n但是其无法胜任**单句子bag**的情况。\n\n>本文提出：\n> * 提出一种实体感知词嵌入方法(**entity-aware word embedding**),来**整合位置信息和头/尾实体embedding，以突出此任务的实体本质**； \n> * 以PCNN捕获局部依存关系，并提出一种自注意力机制（**self-attention**）来捕获全局依存关系，作为PCNN的补充； \n> * 设计一个基于池的门(**pooling-equipped gate**)，来代替选择性注意力机制，该门基于上下文表示，作为聚合器生成bag级别的表示。\n\n> 与**选择性注意力机制**相比，该门控机制的主要**优点**是，**即使bag中只有一个句子，也可以稳定执行，从而在所有训练数据中保持一致**。\n>\n> 在NYT 2010数据集上实验表明，该模型在AUC和top-n指标方面均达到SOTA性能。\n\n\n# 拟解决的问题\n\n* **单句子bag**在实际数据集上占比很高，并且单句子bag的标签很可能是错误的，即噪音bag；\n* **单句子bag**的情况，会迫使基于选择性注意力机制的模型，返回单值标量的权重，导致注意力模块不能充分训练，从而影响性能。\n\n# 创新点\n\n* 使用实体嵌入(entity embedding)和相对位置嵌入(position embedding)，并**提出一种实体感知嵌入方法(entity-aware embedding approach)将实体信息动态集成到每个单词嵌入中，产生更具表达力的表示**; \n* 为增强PCNN捕获长期依赖的能力（Yu等人，2018），**开发一种轻量级的自注意机制来捕获丰富的依赖信息**，为PCNN产生互补依赖表示;\n* **设计一个选择性门结构（selective gate），将句子级别表示聚合为bag级别的表示**。\n\n# Model\n\n(**注: 本人认为本篇论文中的公式描述和模型图片都有点错误**)\n![结构图](AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction/model.jpg)\n\n## Entity-Aware Embedding\n\n计算过程如下：\n\n1.首先针对bag中的每一个句子：\n\n$s= [\\omega_1,\\omega_2,...,\\omega_n]$, 词嵌入表示为 $X^{(\\omega)} = [v_1,v_2,...,v_n] \\in R^{d_\\omega \\times n}$\n\n2.加入相对位置嵌入(相对距离), 位置嵌入表示为 $ r_i^{e_h} 、r_i^{e_t} \\in R^{d_r}$：\n\n$ X^{(p)} = [x_1^{(p)}, x_2^{(p)},...,x_n^{(p)}] \\in R^{d_p \\times n} , \\forall x_i^{(p)} = [v_i; r_i^{e_h}; r_i^{e_t}], 其中d_p = d_\\omega + 2 \\times d_r$\n\n3.加入实体嵌入, 头尾实体嵌入表示为$v^{(h)}、v^{(t)}$：\n\n$X^{(e)} = [x_1^{(e)}, x_2^{(e)},...,x_n^{(e)}] \\in R^{3d_\\omega \\times n}, \\forall x_i^{(e)} = [v_i; v^{(h)};v^{(t)}] \\in R^{3d_\\omega}$\n\n4.gate机制计算：\n\n$ \\alpha=sigmoid(\\lambda \\cdot (W^{(g1)}X^{(e)} + b^{(g1)})) \\in R^{d_h \\times n}, W^{(g1)} \\in R^{d_h \\times 3d_\\omega},  \\lambda是超参数$\n\n$\\tilde{X}^{(p)} = \\tanh(W^{(g2)}X^{(p)} + b^{(g2)}) \\in R^{d_h \\times n}, W^{(g2)} \\in R^{d_h \\times d_p}$\n\n$X =\\alpha \\cdot (W^{(X)} X^{(e)}+ b^{(X)}) + (1-\\alpha) \\cdot \\tilde X ^{(p)} \\in R^{d_h \\times n}, 其中W^{(X)} \\in R^{d_h \\times 3d_\\omega}$\n\n得到的$X$,被认为是所有单词的entity-aware embedding。\n\n## self-Attention Enhanced Neural Network\n\n> 之前的一些工作（Vaswani等人，2017）发现，CNN由于缺乏衡量长期依赖的能力，即使堆叠多层，也无法在大多数NLP Benchmarks上达到SOTA性能。\n\n### PCNN\n\n针对每一个句子的计算公式\n\n一维卷积操作可以表示为：\n\n$ H^{(c)} = 1D\\_CNN(X;W^{(c)}; b^{(c)}) \\in R^{d_c \\times n}, d_c是输出通道个数(卷积核个数)$\n\n所得output根据头尾实体位置划分：\n\n$H^{(c)} = [H^{(1)},H^{(2)},H^{(3)}]$\n\n$s = \\tanh([Pool(H^{(1)}); Pool(H^{(2)}); Pool(H^{(3)})]) \\in R^{3d_c}$\n\n### Self-Attention Mechanism\n\n计算公式:\n\n$A = W^{(\\alpha2)} \\sigma(W^{(\\alpha1)}X + b^{(\\alpha1)}) + b^{(\\alpha2)}, 其中W^{(\\alpha1)}、W^{(\\alpha2)} \\in R^{d_h \\times d_h}, \\sigma 是激活函数$ \n\n$P^{(A)} = softmax(A) \\in R^{d_h \\times n}$\n\n$u = \\sum P^{(A)} \\odot X \\in R^{d_h}$\n\n## Selective Gate\n\n给定一个包含m个句子的bag，通过PCNN、Self-Attention得到的句子表示为\n\n$S = [s_1,s_2,...,s_m] \\in R^{3d_c \\times m}$, $U = [u_1,u_2,...,u_m] \\in R^{d_h \\times m}$\n\n计算公式如下：\n\n1.首先逐句生成gate值，该值控制该句子的表示是否应该被保留\n\n$g_j = sigmoid(W^{(g1)} \\sigma(W^{(g2)}u_j + b^{(g2)}) + b^{(g1)}) \\in R^{3d_c}, \\forall j=1,...,m$\n\n$W^{(g1)} \\in R^{3d_c \\times d_h}, W^{(g2)} \\in R^{d_h \\times d_h} , \\sigma(\\cdot)是激活函数$\n\n2.对PCNN的句子表示加权求和\n\n$c = \\frac 1 m \\sum_{j=1}^m {g_j \\cdot s_j} \\in R^{3d_c}$\n\n## Output\n\n$p = softmax(MLP(c)) \\in R^{|C|}, 其中|C|是关系种类$ \n\n## LOSS\n\nL2正则化\n\n$L_{NLL} = - \\frac 1 {|D|} \\sum_{k=1}^{|D|} \\log p_{(y^k)}^k + \\beta  || {\\theta} || _2^2, 其中\\theta表示模型所有参数，\\beta是系数$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction.md","raw":"---\ntitle: AAAI 2020 -- Self-Attention Enhanced Selective Gate with Entity-Aware Embedding for Distantly Supervised Relation Extraction\ndate: 2020-09-16 20:15:08\ntags: \n\t- AAAI 2020\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- AAAI 2020\nabbrlink: '20200916'\n---\n\n# 摘要\n\n> 远程监督由于其强烈的假设，深受噪音数据标签的影响。\n>\n> 大多数现有工作都在bag级别采用选择性注意力机制来降噪。\n但是其无法胜任**单句子bag**的情况。\n\n>本文提出：\n> * 提出一种实体感知词嵌入方法(**entity-aware word embedding**),来**整合位置信息和头/尾实体embedding，以突出此任务的实体本质**； \n> * 以PCNN捕获局部依存关系，并提出一种自注意力机制（**self-attention**）来捕获全局依存关系，作为PCNN的补充； \n> * 设计一个基于池的门(**pooling-equipped gate**)，来代替选择性注意力机制，该门基于上下文表示，作为聚合器生成bag级别的表示。\n\n> 与**选择性注意力机制**相比，该门控机制的主要**优点**是，**即使bag中只有一个句子，也可以稳定执行，从而在所有训练数据中保持一致**。\n>\n> 在NYT 2010数据集上实验表明，该模型在AUC和top-n指标方面均达到SOTA性能。\n\n\n# 拟解决的问题\n\n* **单句子bag**在实际数据集上占比很高，并且单句子bag的标签很可能是错误的，即噪音bag；\n* **单句子bag**的情况，会迫使基于选择性注意力机制的模型，返回单值标量的权重，导致注意力模块不能充分训练，从而影响性能。\n\n# 创新点\n\n* 使用实体嵌入(entity embedding)和相对位置嵌入(position embedding)，并**提出一种实体感知嵌入方法(entity-aware embedding approach)将实体信息动态集成到每个单词嵌入中，产生更具表达力的表示**; \n* 为增强PCNN捕获长期依赖的能力（Yu等人，2018），**开发一种轻量级的自注意机制来捕获丰富的依赖信息**，为PCNN产生互补依赖表示;\n* **设计一个选择性门结构（selective gate），将句子级别表示聚合为bag级别的表示**。\n\n# Model\n\n(**注: 本人认为本篇论文中的公式描述和模型图片都有点错误**)\n![结构图](AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction/model.jpg)\n\n## Entity-Aware Embedding\n\n计算过程如下：\n\n1.首先针对bag中的每一个句子：\n\n$s= [\\omega_1,\\omega_2,...,\\omega_n]$, 词嵌入表示为 $X^{(\\omega)} = [v_1,v_2,...,v_n] \\in R^{d_\\omega \\times n}$\n\n2.加入相对位置嵌入(相对距离), 位置嵌入表示为 $ r_i^{e_h} 、r_i^{e_t} \\in R^{d_r}$：\n\n$ X^{(p)} = [x_1^{(p)}, x_2^{(p)},...,x_n^{(p)}] \\in R^{d_p \\times n} , \\forall x_i^{(p)} = [v_i; r_i^{e_h}; r_i^{e_t}], 其中d_p = d_\\omega + 2 \\times d_r$\n\n3.加入实体嵌入, 头尾实体嵌入表示为$v^{(h)}、v^{(t)}$：\n\n$X^{(e)} = [x_1^{(e)}, x_2^{(e)},...,x_n^{(e)}] \\in R^{3d_\\omega \\times n}, \\forall x_i^{(e)} = [v_i; v^{(h)};v^{(t)}] \\in R^{3d_\\omega}$\n\n4.gate机制计算：\n\n$ \\alpha=sigmoid(\\lambda \\cdot (W^{(g1)}X^{(e)} + b^{(g1)})) \\in R^{d_h \\times n}, W^{(g1)} \\in R^{d_h \\times 3d_\\omega},  \\lambda是超参数$\n\n$\\tilde{X}^{(p)} = \\tanh(W^{(g2)}X^{(p)} + b^{(g2)}) \\in R^{d_h \\times n}, W^{(g2)} \\in R^{d_h \\times d_p}$\n\n$X =\\alpha \\cdot (W^{(X)} X^{(e)}+ b^{(X)}) + (1-\\alpha) \\cdot \\tilde X ^{(p)} \\in R^{d_h \\times n}, 其中W^{(X)} \\in R^{d_h \\times 3d_\\omega}$\n\n得到的$X$,被认为是所有单词的entity-aware embedding。\n\n## self-Attention Enhanced Neural Network\n\n> 之前的一些工作（Vaswani等人，2017）发现，CNN由于缺乏衡量长期依赖的能力，即使堆叠多层，也无法在大多数NLP Benchmarks上达到SOTA性能。\n\n### PCNN\n\n针对每一个句子的计算公式\n\n一维卷积操作可以表示为：\n\n$ H^{(c)} = 1D\\_CNN(X;W^{(c)}; b^{(c)}) \\in R^{d_c \\times n}, d_c是输出通道个数(卷积核个数)$\n\n所得output根据头尾实体位置划分：\n\n$H^{(c)} = [H^{(1)},H^{(2)},H^{(3)}]$\n\n$s = \\tanh([Pool(H^{(1)}); Pool(H^{(2)}); Pool(H^{(3)})]) \\in R^{3d_c}$\n\n### Self-Attention Mechanism\n\n计算公式:\n\n$A = W^{(\\alpha2)} \\sigma(W^{(\\alpha1)}X + b^{(\\alpha1)}) + b^{(\\alpha2)}, 其中W^{(\\alpha1)}、W^{(\\alpha2)} \\in R^{d_h \\times d_h}, \\sigma 是激活函数$ \n\n$P^{(A)} = softmax(A) \\in R^{d_h \\times n}$\n\n$u = \\sum P^{(A)} \\odot X \\in R^{d_h}$\n\n## Selective Gate\n\n给定一个包含m个句子的bag，通过PCNN、Self-Attention得到的句子表示为\n\n$S = [s_1,s_2,...,s_m] \\in R^{3d_c \\times m}$, $U = [u_1,u_2,...,u_m] \\in R^{d_h \\times m}$\n\n计算公式如下：\n\n1.首先逐句生成gate值，该值控制该句子的表示是否应该被保留\n\n$g_j = sigmoid(W^{(g1)} \\sigma(W^{(g2)}u_j + b^{(g2)}) + b^{(g1)}) \\in R^{3d_c}, \\forall j=1,...,m$\n\n$W^{(g1)} \\in R^{3d_c \\times d_h}, W^{(g2)} \\in R^{d_h \\times d_h} , \\sigma(\\cdot)是激活函数$\n\n2.对PCNN的句子表示加权求和\n\n$c = \\frac 1 m \\sum_{j=1}^m {g_j \\cdot s_j} \\in R^{3d_c}$\n\n## Output\n\n$p = softmax(MLP(c)) \\in R^{|C|}, 其中|C|是关系种类$ \n\n## LOSS\n\nL2正则化\n\n$L_{NLL} = - \\frac 1 {|D|} \\sum_{k=1}^{|D|} \\log p_{(y^k)}^k + \\beta  || {\\theta} || _2^2, 其中\\theta表示模型所有参数，\\beta是系数$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction","published":1,"updated":"2020-09-21T02:29:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mg0002dgtq5c12hy1z","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><blockquote>\n<p>远程监督由于其强烈的假设，深受噪音数据标签的影响。</p>\n<p>大多数现有工作都在bag级别采用选择性注意力机制来降噪。<br>但是其无法胜任<strong>单句子bag</strong>的情况。</p>\n<p>本文提出：</p>\n<ul>\n<li>提出一种实体感知词嵌入方法(<strong>entity-aware word embedding</strong>),来<strong>整合位置信息和头/尾实体embedding，以突出此任务的实体本质</strong>； </li>\n<li>以PCNN捕获局部依存关系，并提出一种自注意力机制（<strong>self-attention</strong>）来捕获全局依存关系，作为PCNN的补充； </li>\n<li>设计一个基于池的门(<strong>pooling-equipped gate</strong>)，来代替选择性注意力机制，该门基于上下文表示，作为聚合器生成bag级别的表示。</li>\n</ul>\n<p>与<strong>选择性注意力机制</strong>相比，该门控机制的主要<strong>优点</strong>是，<strong>即使bag中只有一个句子，也可以稳定执行，从而在所有训练数据中保持一致</strong>。</p>\n<p>在NYT 2010数据集上实验表明，该模型在AUC和top-n指标方面均达到SOTA性能。</p>\n</blockquote>\n<h1 id=\"拟解决的问题\"><a href=\"#拟解决的问题\" class=\"headerlink\" title=\"拟解决的问题\"></a>拟解决的问题</h1><ul>\n<li><strong>单句子bag</strong>在实际数据集上占比很高，并且单句子bag的标签很可能是错误的，即噪音bag；</li>\n<li><strong>单句子bag</strong>的情况，会迫使基于选择性注意力机制的模型，返回单值标量的权重，导致注意力模块不能充分训练，从而影响性能。</li>\n</ul>\n<h1 id=\"创新点\"><a href=\"#创新点\" class=\"headerlink\" title=\"创新点\"></a>创新点</h1><ul>\n<li>使用实体嵌入(entity embedding)和相对位置嵌入(position embedding)，并<strong>提出一种实体感知嵌入方法(entity-aware embedding approach)将实体信息动态集成到每个单词嵌入中，产生更具表达力的表示</strong>; </li>\n<li>为增强PCNN捕获长期依赖的能力（Yu等人，2018），<strong>开发一种轻量级的自注意机制来捕获丰富的依赖信息</strong>，为PCNN产生互补依赖表示;</li>\n<li><strong>设计一个选择性门结构（selective gate），将句子级别表示聚合为bag级别的表示</strong>。</li>\n</ul>\n<h1 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h1><p>(<strong>注: 本人认为本篇论文中的公式描述和模型图片都有点错误</strong>)<br></p><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200916/model.jpg\" alt=\"结构图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结构图</div>\n            </figure><p></p>\n<h2 id=\"Entity-Aware-Embedding\"><a href=\"#Entity-Aware-Embedding\" class=\"headerlink\" title=\"Entity-Aware Embedding\"></a>Entity-Aware Embedding</h2><p>计算过程如下：</p>\n<p>1.首先针对bag中的每一个句子：</p>\n<p>$s= [\\omega_1,\\omega_2,…,\\omega_n]$, 词嵌入表示为 $X^{(\\omega)} = [v_1,v_2,…,v_n] \\in R^{d_\\omega \\times n}$</p>\n<p>2.加入相对位置嵌入(相对距离), 位置嵌入表示为 $ r_i^{e_h} 、r_i^{e_t} \\in R^{d_r}$：</p>\n<p>$ X^{(p)} = [x_1^{(p)}, x_2^{(p)},…,x_n^{(p)}] \\in R^{d_p \\times n} , \\forall x_i^{(p)} = [v_i; r_i^{e_h}; r_i^{e_t}], 其中d_p = d_\\omega + 2 \\times d_r$</p>\n<p>3.加入实体嵌入, 头尾实体嵌入表示为$v^{(h)}、v^{(t)}$：</p>\n<p>$X^{(e)} = [x_1^{(e)}, x_2^{(e)},…,x_n^{(e)}] \\in R^{3d_\\omega \\times n}, \\forall x_i^{(e)} = [v_i; v^{(h)};v^{(t)}] \\in R^{3d_\\omega}$</p>\n<p>4.gate机制计算：</p>\n<p>$ \\alpha=sigmoid(\\lambda \\cdot (W^{(g1)}X^{(e)} + b^{(g1)})) \\in R^{d_h \\times n}, W^{(g1)} \\in R^{d_h \\times 3d_\\omega},  \\lambda是超参数$</p>\n<p>$\\tilde{X}^{(p)} = \\tanh(W^{(g2)}X^{(p)} + b^{(g2)}) \\in R^{d_h \\times n}, W^{(g2)} \\in R^{d_h \\times d_p}$</p>\n<p>$X =\\alpha \\cdot (W^{(X)} X^{(e)}+ b^{(X)}) + (1-\\alpha) \\cdot \\tilde X ^{(p)} \\in R^{d_h \\times n}, 其中W^{(X)} \\in R^{d_h \\times 3d_\\omega}$</p>\n<p>得到的$X$,被认为是所有单词的entity-aware embedding。</p>\n<h2 id=\"self-Attention-Enhanced-Neural-Network\"><a href=\"#self-Attention-Enhanced-Neural-Network\" class=\"headerlink\" title=\"self-Attention Enhanced Neural Network\"></a>self-Attention Enhanced Neural Network</h2><blockquote>\n<p>之前的一些工作（Vaswani等人，2017）发现，CNN由于缺乏衡量长期依赖的能力，即使堆叠多层，也无法在大多数NLP Benchmarks上达到SOTA性能。</p>\n</blockquote>\n<h3 id=\"PCNN\"><a href=\"#PCNN\" class=\"headerlink\" title=\"PCNN\"></a>PCNN</h3><p>针对每一个句子的计算公式</p>\n<p>一维卷积操作可以表示为：</p>\n<p>$ H^{(c)} = 1D_CNN(X;W^{(c)}; b^{(c)}) \\in R^{d_c \\times n}, d_c是输出通道个数(卷积核个数)$</p>\n<p>所得output根据头尾实体位置划分：</p>\n<p>$H^{(c)} = [H^{(1)},H^{(2)},H^{(3)}]$</p>\n<p>$s = \\tanh([Pool(H^{(1)}); Pool(H^{(2)}); Pool(H^{(3)})]) \\in R^{3d_c}$</p>\n<h3 id=\"Self-Attention-Mechanism\"><a href=\"#Self-Attention-Mechanism\" class=\"headerlink\" title=\"Self-Attention Mechanism\"></a>Self-Attention Mechanism</h3><p>计算公式:</p>\n<p>$A = W^{(\\alpha2)} \\sigma(W^{(\\alpha1)}X + b^{(\\alpha1)}) + b^{(\\alpha2)}, 其中W^{(\\alpha1)}、W^{(\\alpha2)} \\in R^{d_h \\times d_h}, \\sigma 是激活函数$ </p>\n<p>$P^{(A)} = softmax(A) \\in R^{d_h \\times n}$</p>\n<p>$u = \\sum P^{(A)} \\odot X \\in R^{d_h}$</p>\n<h2 id=\"Selective-Gate\"><a href=\"#Selective-Gate\" class=\"headerlink\" title=\"Selective Gate\"></a>Selective Gate</h2><p>给定一个包含m个句子的bag，通过PCNN、Self-Attention得到的句子表示为</p>\n<p>$S = [s_1,s_2,…,s_m] \\in R^{3d_c \\times m}$, $U = [u_1,u_2,…,u_m] \\in R^{d_h \\times m}$</p>\n<p>计算公式如下：</p>\n<p>1.首先逐句生成gate值，该值控制该句子的表示是否应该被保留</p>\n<p>$g_j = sigmoid(W^{(g1)} \\sigma(W^{(g2)}u_j + b^{(g2)}) + b^{(g1)}) \\in R^{3d_c}, \\forall j=1,…,m$</p>\n<p>$W^{(g1)} \\in R^{3d_c \\times d_h}, W^{(g2)} \\in R^{d_h \\times d_h} , \\sigma(\\cdot)是激活函数$</p>\n<p>2.对PCNN的句子表示加权求和</p>\n<p>$c = \\frac 1 m \\sum_{j=1}^m {g_j \\cdot s_j} \\in R^{3d_c}$</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>$p = softmax(MLP(c)) \\in R^{|C|}, 其中|C|是关系种类$ </p>\n<h2 id=\"LOSS\"><a href=\"#LOSS\" class=\"headerlink\" title=\"LOSS\"></a>LOSS</h2><p>L2正则化</p>\n<p>$L_{NLL} = - \\frac 1 {|D|} \\sum_{k=1}^{|D|} \\log p_{(y^k)}^k + \\beta  || {\\theta} || _2^2, 其中\\theta表示模型所有参数，\\beta是系数$</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><blockquote>\n<p>远程监督由于其强烈的假设，深受噪音数据标签的影响。</p>\n<p>大多数现有工作都在bag级别采用选择性注意力机制来降噪。<br>但是其无法胜任<strong>单句子bag</strong>的情况。</p>\n<p>本文提出：</p>\n<ul>\n<li>提出一种实体感知词嵌入方法(<strong>entity-aware word embedding</strong>),来<strong>整合位置信息和头/尾实体embedding，以突出此任务的实体本质</strong>； </li>\n<li>以PCNN捕获局部依存关系，并提出一种自注意力机制（<strong>self-attention</strong>）来捕获全局依存关系，作为PCNN的补充； </li>\n<li>设计一个基于池的门(<strong>pooling-equipped gate</strong>)，来代替选择性注意力机制，该门基于上下文表示，作为聚合器生成bag级别的表示。</li>\n</ul>\n<p>与<strong>选择性注意力机制</strong>相比，该门控机制的主要<strong>优点</strong>是，<strong>即使bag中只有一个句子，也可以稳定执行，从而在所有训练数据中保持一致</strong>。</p>\n<p>在NYT 2010数据集上实验表明，该模型在AUC和top-n指标方面均达到SOTA性能。</p>\n</blockquote>\n<h1 id=\"拟解决的问题\"><a href=\"#拟解决的问题\" class=\"headerlink\" title=\"拟解决的问题\"></a>拟解决的问题</h1><ul>\n<li><strong>单句子bag</strong>在实际数据集上占比很高，并且单句子bag的标签很可能是错误的，即噪音bag；</li>\n<li><strong>单句子bag</strong>的情况，会迫使基于选择性注意力机制的模型，返回单值标量的权重，导致注意力模块不能充分训练，从而影响性能。</li>\n</ul>\n<h1 id=\"创新点\"><a href=\"#创新点\" class=\"headerlink\" title=\"创新点\"></a>创新点</h1><ul>\n<li>使用实体嵌入(entity embedding)和相对位置嵌入(position embedding)，并<strong>提出一种实体感知嵌入方法(entity-aware embedding approach)将实体信息动态集成到每个单词嵌入中，产生更具表达力的表示</strong>; </li>\n<li>为增强PCNN捕获长期依赖的能力（Yu等人，2018），<strong>开发一种轻量级的自注意机制来捕获丰富的依赖信息</strong>，为PCNN产生互补依赖表示;</li>\n<li><strong>设计一个选择性门结构（selective gate），将句子级别表示聚合为bag级别的表示</strong>。</li>\n</ul>\n<h1 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h1><p>(<strong>注: 本人认为本篇论文中的公式描述和模型图片都有点错误</strong>)<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200916/model.jpg\" alt=\"结构图\" title>\n                </div>\n                <div class=\"image-caption\">结构图</div>\n            </figure></p>\n<h2 id=\"Entity-Aware-Embedding\"><a href=\"#Entity-Aware-Embedding\" class=\"headerlink\" title=\"Entity-Aware Embedding\"></a>Entity-Aware Embedding</h2><p>计算过程如下：</p>\n<p>1.首先针对bag中的每一个句子：</p>\n<p>$s= [\\omega_1,\\omega_2,…,\\omega_n]$, 词嵌入表示为 $X^{(\\omega)} = [v_1,v_2,…,v_n] \\in R^{d_\\omega \\times n}$</p>\n<p>2.加入相对位置嵌入(相对距离), 位置嵌入表示为 $ r_i^{e_h} 、r_i^{e_t} \\in R^{d_r}$：</p>\n<p>$ X^{(p)} = [x_1^{(p)}, x_2^{(p)},…,x_n^{(p)}] \\in R^{d_p \\times n} , \\forall x_i^{(p)} = [v_i; r_i^{e_h}; r_i^{e_t}], 其中d_p = d_\\omega + 2 \\times d_r$</p>\n<p>3.加入实体嵌入, 头尾实体嵌入表示为$v^{(h)}、v^{(t)}$：</p>\n<p>$X^{(e)} = [x_1^{(e)}, x_2^{(e)},…,x_n^{(e)}] \\in R^{3d_\\omega \\times n}, \\forall x_i^{(e)} = [v_i; v^{(h)};v^{(t)}] \\in R^{3d_\\omega}$</p>\n<p>4.gate机制计算：</p>\n<p>$ \\alpha=sigmoid(\\lambda \\cdot (W^{(g1)}X^{(e)} + b^{(g1)})) \\in R^{d_h \\times n}, W^{(g1)} \\in R^{d_h \\times 3d_\\omega},  \\lambda是超参数$</p>\n<p>$\\tilde{X}^{(p)} = \\tanh(W^{(g2)}X^{(p)} + b^{(g2)}) \\in R^{d_h \\times n}, W^{(g2)} \\in R^{d_h \\times d_p}$</p>\n<p>$X =\\alpha \\cdot (W^{(X)} X^{(e)}+ b^{(X)}) + (1-\\alpha) \\cdot \\tilde X ^{(p)} \\in R^{d_h \\times n}, 其中W^{(X)} \\in R^{d_h \\times 3d_\\omega}$</p>\n<p>得到的$X$,被认为是所有单词的entity-aware embedding。</p>\n<h2 id=\"self-Attention-Enhanced-Neural-Network\"><a href=\"#self-Attention-Enhanced-Neural-Network\" class=\"headerlink\" title=\"self-Attention Enhanced Neural Network\"></a>self-Attention Enhanced Neural Network</h2><blockquote>\n<p>之前的一些工作（Vaswani等人，2017）发现，CNN由于缺乏衡量长期依赖的能力，即使堆叠多层，也无法在大多数NLP Benchmarks上达到SOTA性能。</p>\n</blockquote>\n<h3 id=\"PCNN\"><a href=\"#PCNN\" class=\"headerlink\" title=\"PCNN\"></a>PCNN</h3><p>针对每一个句子的计算公式</p>\n<p>一维卷积操作可以表示为：</p>\n<p>$ H^{(c)} = 1D_CNN(X;W^{(c)}; b^{(c)}) \\in R^{d_c \\times n}, d_c是输出通道个数(卷积核个数)$</p>\n<p>所得output根据头尾实体位置划分：</p>\n<p>$H^{(c)} = [H^{(1)},H^{(2)},H^{(3)}]$</p>\n<p>$s = \\tanh([Pool(H^{(1)}); Pool(H^{(2)}); Pool(H^{(3)})]) \\in R^{3d_c}$</p>\n<h3 id=\"Self-Attention-Mechanism\"><a href=\"#Self-Attention-Mechanism\" class=\"headerlink\" title=\"Self-Attention Mechanism\"></a>Self-Attention Mechanism</h3><p>计算公式:</p>\n<p>$A = W^{(\\alpha2)} \\sigma(W^{(\\alpha1)}X + b^{(\\alpha1)}) + b^{(\\alpha2)}, 其中W^{(\\alpha1)}、W^{(\\alpha2)} \\in R^{d_h \\times d_h}, \\sigma 是激活函数$ </p>\n<p>$P^{(A)} = softmax(A) \\in R^{d_h \\times n}$</p>\n<p>$u = \\sum P^{(A)} \\odot X \\in R^{d_h}$</p>\n<h2 id=\"Selective-Gate\"><a href=\"#Selective-Gate\" class=\"headerlink\" title=\"Selective Gate\"></a>Selective Gate</h2><p>给定一个包含m个句子的bag，通过PCNN、Self-Attention得到的句子表示为</p>\n<p>$S = [s_1,s_2,…,s_m] \\in R^{3d_c \\times m}$, $U = [u_1,u_2,…,u_m] \\in R^{d_h \\times m}$</p>\n<p>计算公式如下：</p>\n<p>1.首先逐句生成gate值，该值控制该句子的表示是否应该被保留</p>\n<p>$g_j = sigmoid(W^{(g1)} \\sigma(W^{(g2)}u_j + b^{(g2)}) + b^{(g1)}) \\in R^{3d_c}, \\forall j=1,…,m$</p>\n<p>$W^{(g1)} \\in R^{3d_c \\times d_h}, W^{(g2)} \\in R^{d_h \\times d_h} , \\sigma(\\cdot)是激活函数$</p>\n<p>2.对PCNN的句子表示加权求和</p>\n<p>$c = \\frac 1 m \\sum_{j=1}^m {g_j \\cdot s_j} \\in R^{3d_c}$</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>$p = softmax(MLP(c)) \\in R^{|C|}, 其中|C|是关系种类$ </p>\n<h2 id=\"LOSS\"><a href=\"#LOSS\" class=\"headerlink\" title=\"LOSS\"></a>LOSS</h2><p>L2正则化</p>\n<p>$L_{NLL} = - \\frac 1 {|D|} \\sum_{k=1}^{|D|} \\log p_{(y^k)}^k + \\beta  || {\\theta} || _2^2, 其中\\theta表示模型所有参数，\\beta是系数$</p>\n"},{"title":"ACL 2020 - A Novel Cascade Binary Tagging Framework for Relational Triple Extraction","date":"2020-10-06T03:13:58.000Z","abbrlink":"20201006","_content":"\n# 摘要\n\n现有工作很少能够较好地解决关系三元组的**重叠**问题（overlapping triple problem）。 \n\n本文用一个新的视角来重新审视关系提取任务，并提出了一种**级联二分标注框架(Cascade Binary Tagging Framework, 简称CasRel)**。\n\n该框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。 \n\n实验表明，该框架在多个场景下均可以获得性能提升，某些场景大幅度超越现有SOTA。\n\n# 拟解决问题\n\n**重叠三元组问题overlapping triple problem**有以下三种情形：\n\n![](ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/overlapType.jpg)\n\n# 本文方案\n\n## 本文关系抽取任务定义\n> 本文的框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。\n\n由学习关系分类器（relation为离散关系标签）\n\n$f(s,o) \\to r$\n\n转变为学习**主体s在关系r下对客体o**的函数映射\n\n$f_r(s) \\to o$\n\n>基于上述视角，关系抽取任务可以分为以下两个步骤：\n> \n> * 确定句子中所有可能的主体  (subject)；\n> * 针对每个主体subject，使用特定于关系的标注器（relation-specific tagger）同时识别**所有可能的关系**和**相应的客体object**\n\n## CasRel框架（三部分）：\n\n* **BERT-based encoder module (基于Bert的编码器模块)**\n\n* **subject tagging module(主体标注模块)**\n\n* **relation-specific object tagging module(区分关系的客体标注模块)**\n\n![模型结构](ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/casrel.jpg)\n\n## 训练目标\n\n针对训练集 $D$ 中的句子$x_j$，给定对应的潜在overlap triples集合 $ T_j = \\{(s,r,o)\\} $，最大化数据似然估计：\n\n$ \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{(s,r,o) \\in T_j} {p((s,r,o)|x_j)}\\right]} $\n\n$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{(r,o) \\in T_j|s} p((r,o)|s,x_j)\\right]}$\n\n$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{ r \\in T_j|s} p_r(o|s,x_j) \\prod\\limits_{r \\in R \\backslash T_j|s} p_r(o_{\\emptyset}|s,x_j)\\right]}$\n\n其中，$s \\in T_j$ 表示出现在 $T_j$ 中三元组的主体（subject），\n\n$T_j | s $ 表示 $T_j$ 中主体是 $s$ 的三元组集合，\n\n$R$ 是所有可能的**关系**的集合，\n\n$\\backslash$ 表示集合的差集,\n\n$o_\\emptyset$ 表示\"null\"客体。\n\n> 对于任一个给定的主体 s , 在\"s确实参与表达的关系r\"的作用下，必定可以映射为客体 o ,而对于其他关系，映射为\"空\"客体 $null$\n\n## BERT Encoder\n\n编码器使用Bert \n\n## Subject Tagger\n\n训练两个二元分类器，分别识别Subject的**开始位置**和**结束位置**,标识为1, 其他标识为0\n\n对于每一个起始位置，从该位置依次向后**寻找最近的结束位置**, 从而寻找出所有Subject\n\n$p_i^{start\\_s} = \\sigma (W_{start} X_i + b_{start})$,\n\n$p_i^{end\\_s} = \\sigma (W_{end} X_i + b_{end})$,\n\n$ X_i $ 表示序列第i个词的bert编码，\n\n$\\sigma $ 表示sigmoid激活函数。\n\n### loss\n\n最大化似然函数：\n$p_\\theta(s|X) = \\prod\\limits_{t \\in \\{start\\_s,end\\_s\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,\n\n$L$是句子长度，\n\n$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，\n\n$\\theta$ 是参数集合\n\n> 经过这一步骤，可是识别出句子中**所有Subject**\n\n## Relation-specific Object Taggers\n\n针对每一个关系 $r$,训练两个二元分类器，分别识别**针对关系r映射出的Object**的**开始位置**和**结束位置**，标识为1， 否则标识为0\n\n$p_i^{start\\_o} = \\sigma (W_{start}^r (X_i + V^k_{sub}) + b_{start}^r)$,\n\n$p_i^{end\\_o} = \\sigma (W_{end}^r (X_i + V^k_{sub}) + b_{end}^r)$,\n\n$V_{sub}^k$ 表示subject tagger识别出的**第k个Subject的编码**，若为多个词构成，取均值\n\n### loss\n\n最大化似然函数：\n\n$p_{\\emptyset_r}(o|s, X) = \\prod\\limits_{t \\in \\{start\\_o,end\\_o\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,\n\n$L$是句子长度，\n\n$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，\n\n$\\emptyset_r$ 是参数集合,\n\n另外，“空”客体Object，意味着 \n$$y_i^{start\\_o_{\\emptyset}} = y_i^{end\\_o_{\\emptyset}} = 0 $$\n\n> 针对**Subject Tagger**识别出的每一个Subject，计算该subject在**每个关系作用下的Object**。\n> 对于每一个关系 $r$\n> 若得到非空Object，既可以抽取出关系三元组，\n> 若得到空Object，则认为不存在该关系。\n\n## 整体Loss\n\n最大化似然函数：\n\n$J(\\Theta) = \\sum\\limits _{j=1} ^ {|D|} \\left[ {\\sum\\limits _{s \\in T_j} \\log p_\\theta(s|X_j)} + {\\sum\\limits _{r \\in T_j|s} \\log p_{\\emptyset_r}(o|s,X_j)} + {\\sum\\limits _{r \\in R \\backslash T_j|s} \\log p_{\\emptyset_r}(o_\\emptyset|s,X_j)}  \\right]$\n\n\n","source":"_posts/ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction.md","raw":"---\ntitle: ACL 2020 - A Novel Cascade Binary Tagging Framework for Relational Triple Extraction\ndate: 2020-10-06 11:13:58\ntags: \n\t- ACL 2020\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- ACL 2020\nabbrlink: '20201006'\n---\n\n# 摘要\n\n现有工作很少能够较好地解决关系三元组的**重叠**问题（overlapping triple problem）。 \n\n本文用一个新的视角来重新审视关系提取任务，并提出了一种**级联二分标注框架(Cascade Binary Tagging Framework, 简称CasRel)**。\n\n该框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。 \n\n实验表明，该框架在多个场景下均可以获得性能提升，某些场景大幅度超越现有SOTA。\n\n# 拟解决问题\n\n**重叠三元组问题overlapping triple problem**有以下三种情形：\n\n![](ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/overlapType.jpg)\n\n# 本文方案\n\n## 本文关系抽取任务定义\n> 本文的框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。\n\n由学习关系分类器（relation为离散关系标签）\n\n$f(s,o) \\to r$\n\n转变为学习**主体s在关系r下对客体o**的函数映射\n\n$f_r(s) \\to o$\n\n>基于上述视角，关系抽取任务可以分为以下两个步骤：\n> \n> * 确定句子中所有可能的主体  (subject)；\n> * 针对每个主体subject，使用特定于关系的标注器（relation-specific tagger）同时识别**所有可能的关系**和**相应的客体object**\n\n## CasRel框架（三部分）：\n\n* **BERT-based encoder module (基于Bert的编码器模块)**\n\n* **subject tagging module(主体标注模块)**\n\n* **relation-specific object tagging module(区分关系的客体标注模块)**\n\n![模型结构](ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/casrel.jpg)\n\n## 训练目标\n\n针对训练集 $D$ 中的句子$x_j$，给定对应的潜在overlap triples集合 $ T_j = \\{(s,r,o)\\} $，最大化数据似然估计：\n\n$ \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{(s,r,o) \\in T_j} {p((s,r,o)|x_j)}\\right]} $\n\n$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{(r,o) \\in T_j|s} p((r,o)|s,x_j)\\right]}$\n\n$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{ r \\in T_j|s} p_r(o|s,x_j) \\prod\\limits_{r \\in R \\backslash T_j|s} p_r(o_{\\emptyset}|s,x_j)\\right]}$\n\n其中，$s \\in T_j$ 表示出现在 $T_j$ 中三元组的主体（subject），\n\n$T_j | s $ 表示 $T_j$ 中主体是 $s$ 的三元组集合，\n\n$R$ 是所有可能的**关系**的集合，\n\n$\\backslash$ 表示集合的差集,\n\n$o_\\emptyset$ 表示\"null\"客体。\n\n> 对于任一个给定的主体 s , 在\"s确实参与表达的关系r\"的作用下，必定可以映射为客体 o ,而对于其他关系，映射为\"空\"客体 $null$\n\n## BERT Encoder\n\n编码器使用Bert \n\n## Subject Tagger\n\n训练两个二元分类器，分别识别Subject的**开始位置**和**结束位置**,标识为1, 其他标识为0\n\n对于每一个起始位置，从该位置依次向后**寻找最近的结束位置**, 从而寻找出所有Subject\n\n$p_i^{start\\_s} = \\sigma (W_{start} X_i + b_{start})$,\n\n$p_i^{end\\_s} = \\sigma (W_{end} X_i + b_{end})$,\n\n$ X_i $ 表示序列第i个词的bert编码，\n\n$\\sigma $ 表示sigmoid激活函数。\n\n### loss\n\n最大化似然函数：\n$p_\\theta(s|X) = \\prod\\limits_{t \\in \\{start\\_s,end\\_s\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,\n\n$L$是句子长度，\n\n$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，\n\n$\\theta$ 是参数集合\n\n> 经过这一步骤，可是识别出句子中**所有Subject**\n\n## Relation-specific Object Taggers\n\n针对每一个关系 $r$,训练两个二元分类器，分别识别**针对关系r映射出的Object**的**开始位置**和**结束位置**，标识为1， 否则标识为0\n\n$p_i^{start\\_o} = \\sigma (W_{start}^r (X_i + V^k_{sub}) + b_{start}^r)$,\n\n$p_i^{end\\_o} = \\sigma (W_{end}^r (X_i + V^k_{sub}) + b_{end}^r)$,\n\n$V_{sub}^k$ 表示subject tagger识别出的**第k个Subject的编码**，若为多个词构成，取均值\n\n### loss\n\n最大化似然函数：\n\n$p_{\\emptyset_r}(o|s, X) = \\prod\\limits_{t \\in \\{start\\_o,end\\_o\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,\n\n$L$是句子长度，\n\n$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，\n\n$\\emptyset_r$ 是参数集合,\n\n另外，“空”客体Object，意味着 \n$$y_i^{start\\_o_{\\emptyset}} = y_i^{end\\_o_{\\emptyset}} = 0 $$\n\n> 针对**Subject Tagger**识别出的每一个Subject，计算该subject在**每个关系作用下的Object**。\n> 对于每一个关系 $r$\n> 若得到非空Object，既可以抽取出关系三元组，\n> 若得到空Object，则认为不存在该关系。\n\n## 整体Loss\n\n最大化似然函数：\n\n$J(\\Theta) = \\sum\\limits _{j=1} ^ {|D|} \\left[ {\\sum\\limits _{s \\in T_j} \\log p_\\theta(s|X_j)} + {\\sum\\limits _{r \\in T_j|s} \\log p_{\\emptyset_r}(o|s,X_j)} + {\\sum\\limits _{r \\in R \\backslash T_j|s} \\log p_{\\emptyset_r}(o_\\emptyset|s,X_j)}  \\right]$\n\n\n","slug":"ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction","published":1,"updated":"2020-10-22T02:18:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82ml0006dgtqdj30a4ho","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>现有工作很少能够较好地解决关系三元组的<strong>重叠</strong>问题（overlapping triple problem）。 </p>\n<p>本文用一个新的视角来重新审视关系提取任务，并提出了一种<strong>级联二分标注框架(Cascade Binary Tagging Framework, 简称CasRel)</strong>。</p>\n<p>该框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。 </p>\n<p>实验表明，该框架在多个场景下均可以获得性能提升，某些场景大幅度超越现有SOTA。</p>\n<h1 id=\"拟解决问题\"><a href=\"#拟解决问题\" class=\"headerlink\" title=\"拟解决问题\"></a>拟解决问题</h1><p><strong>重叠三元组问题overlapping triple problem</strong>有以下三种情形：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201006/overlapType.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"本文方案\"><a href=\"#本文方案\" class=\"headerlink\" title=\"本文方案\"></a>本文方案</h1><h2 id=\"本文关系抽取任务定义\"><a href=\"#本文关系抽取任务定义\" class=\"headerlink\" title=\"本文关系抽取任务定义\"></a>本文关系抽取任务定义</h2><blockquote>\n<p>本文的框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。</p>\n</blockquote>\n<p>由学习关系分类器（relation为离散关系标签）</p>\n<p>$f(s,o) \\to r$</p>\n<p>转变为学习<strong>主体s在关系r下对客体o</strong>的函数映射</p>\n<p>$f_r(s) \\to o$</p>\n<blockquote>\n<p>基于上述视角，关系抽取任务可以分为以下两个步骤：</p>\n<ul>\n<li>确定句子中所有可能的主体  (subject)；</li>\n<li>针对每个主体subject，使用特定于关系的标注器（relation-specific tagger）同时识别<strong>所有可能的关系</strong>和<strong>相应的客体object</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"CasRel框架（三部分）：\"><a href=\"#CasRel框架（三部分）：\" class=\"headerlink\" title=\"CasRel框架（三部分）：\"></a>CasRel框架（三部分）：</h2><ul>\n<li><p><strong>BERT-based encoder module (基于Bert的编码器模块)</strong></p>\n</li>\n<li><p><strong>subject tagging module(主体标注模块)</strong></p>\n</li>\n<li><p><strong>relation-specific object tagging module(区分关系的客体标注模块)</strong></p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201006/casrel.jpg\" alt=\"模型结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">模型结构</div>\n            </figure>\n<h2 id=\"训练目标\"><a href=\"#训练目标\" class=\"headerlink\" title=\"训练目标\"></a>训练目标</h2><p>针对训练集 $D$ 中的句子$x_j$，给定对应的潜在overlap triples集合 $ T_j = \\{(s,r,o)\\} $，最大化数据似然估计：</p>\n<p>$ \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{(s,r,o) \\in T_j} {p((s,r,o)|x_j)}\\right]} $</p>\n<p>$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{(r,o) \\in T_j|s} p((r,o)|s,x_j)\\right]}$</p>\n<p>$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{ r \\in T_j|s} p_r(o|s,x_j) \\prod\\limits_{r \\in R \\backslash T_j|s} p_r(o_{\\emptyset}|s,x_j)\\right]}$</p>\n<p>其中，$s \\in T_j$ 表示出现在 $T_j$ 中三元组的主体（subject），</p>\n<p>$T_j | s $ 表示 $T_j$ 中主体是 $s$ 的三元组集合，</p>\n<p>$R$ 是所有可能的<strong>关系</strong>的集合，</p>\n<p>$\\backslash$ 表示集合的差集,</p>\n<p>$o_\\emptyset$ 表示”null”客体。</p>\n<blockquote>\n<p>对于任一个给定的主体 s , 在”s确实参与表达的关系r”的作用下，必定可以映射为客体 o ,而对于其他关系，映射为”空”客体 $null$</p>\n</blockquote>\n<h2 id=\"BERT-Encoder\"><a href=\"#BERT-Encoder\" class=\"headerlink\" title=\"BERT Encoder\"></a>BERT Encoder</h2><p>编码器使用Bert </p>\n<h2 id=\"Subject-Tagger\"><a href=\"#Subject-Tagger\" class=\"headerlink\" title=\"Subject Tagger\"></a>Subject Tagger</h2><p>训练两个二元分类器，分别识别Subject的<strong>开始位置</strong>和<strong>结束位置</strong>,标识为1, 其他标识为0</p>\n<p>对于每一个起始位置，从该位置依次向后<strong>寻找最近的结束位置</strong>, 从而寻找出所有Subject</p>\n<p>$p_i^{start_s} = \\sigma (W_{start} X_i + b_{start})$,</p>\n<p>$p_i^{end_s} = \\sigma (W_{end} X_i + b_{end})$,</p>\n<p>$ X_i $ 表示序列第i个词的bert编码，</p>\n<p>$\\sigma $ 表示sigmoid激活函数。</p>\n<h3 id=\"loss\"><a href=\"#loss\" class=\"headerlink\" title=\"loss\"></a>loss</h3><p>最大化似然函数：<br>$p_\\theta(s|X) = \\prod\\limits_{t \\in \\{start_s,end_s\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,</p>\n<p>$L$是句子长度，</p>\n<p>$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，</p>\n<p>$\\theta$ 是参数集合</p>\n<blockquote>\n<p>经过这一步骤，可是识别出句子中<strong>所有Subject</strong></p>\n</blockquote>\n<h2 id=\"Relation-specific-Object-Taggers\"><a href=\"#Relation-specific-Object-Taggers\" class=\"headerlink\" title=\"Relation-specific Object Taggers\"></a>Relation-specific Object Taggers</h2><p>针对每一个关系 $r$,训练两个二元分类器，分别识别<strong>针对关系r映射出的Object</strong>的<strong>开始位置</strong>和<strong>结束位置</strong>，标识为1， 否则标识为0</p>\n<p>$p_i^{start_o} = \\sigma (W_{start}^r (X_i + V^k_{sub}) + b_{start}^r)$,</p>\n<p>$p_i^{end_o} = \\sigma (W_{end}^r (X_i + V^k_{sub}) + b_{end}^r)$,</p>\n<p>$V_{sub}^k$ 表示subject tagger识别出的<strong>第k个Subject的编码</strong>，若为多个词构成，取均值</p>\n<h3 id=\"loss-1\"><a href=\"#loss-1\" class=\"headerlink\" title=\"loss\"></a>loss</h3><p>最大化似然函数：</p>\n<p>$p_{\\emptyset_r}(o|s, X) = \\prod\\limits_{t \\in \\{start_o,end_o\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,</p>\n<p>$L$是句子长度，</p>\n<p>$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，</p>\n<p>$\\emptyset_r$ 是参数集合,</p>\n<p>另外，“空”客体Object，意味着 </p>\n<script type=\"math/tex; mode=display\">y_i^{start\\_o_{\\emptyset}} = y_i^{end\\_o_{\\emptyset}} = 0</script><blockquote>\n<p>针对<strong>Subject Tagger</strong>识别出的每一个Subject，计算该subject在<strong>每个关系作用下的Object</strong>。<br>对于每一个关系 $r$<br>若得到非空Object，既可以抽取出关系三元组，<br>若得到空Object，则认为不存在该关系。</p>\n</blockquote>\n<h2 id=\"整体Loss\"><a href=\"#整体Loss\" class=\"headerlink\" title=\"整体Loss\"></a>整体Loss</h2><p>最大化似然函数：</p>\n<p>$J(\\Theta) = \\sum\\limits _{j=1} ^ {|D|} \\left[ {\\sum\\limits _{s \\in T_j} \\log p_\\theta(s|X_j)} + {\\sum\\limits _{r \\in T_j|s} \\log p_{\\emptyset_r}(o|s,X_j)} + {\\sum\\limits _{r \\in R \\backslash T_j|s} \\log p_{\\emptyset_r}(o_\\emptyset|s,X_j)}  \\right]$</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>现有工作很少能够较好地解决关系三元组的<strong>重叠</strong>问题（overlapping triple problem）。 </p>\n<p>本文用一个新的视角来重新审视关系提取任务，并提出了一种<strong>级联二分标注框架(Cascade Binary Tagging Framework, 简称CasRel)</strong>。</p>\n<p>该框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。 </p>\n<p>实验表明，该框架在多个场景下均可以获得性能提升，某些场景大幅度超越现有SOTA。</p>\n<h1 id=\"拟解决问题\"><a href=\"#拟解决问题\" class=\"headerlink\" title=\"拟解决问题\"></a>拟解决问题</h1><p><strong>重叠三元组问题overlapping triple problem</strong>有以下三种情形：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201006/overlapType.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"本文方案\"><a href=\"#本文方案\" class=\"headerlink\" title=\"本文方案\"></a>本文方案</h1><h2 id=\"本文关系抽取任务定义\"><a href=\"#本文关系抽取任务定义\" class=\"headerlink\" title=\"本文关系抽取任务定义\"></a>本文关系抽取任务定义</h2><blockquote>\n<p>本文的框架将关系（relation）建模为主体（subject）与客体（object）的函数映射，而不是像以前的工作那样将关系视为离散标签。</p>\n</blockquote>\n<p>由学习关系分类器（relation为离散关系标签）</p>\n<p>$f(s,o) \\to r$</p>\n<p>转变为学习<strong>主体s在关系r下对客体o</strong>的函数映射</p>\n<p>$f_r(s) \\to o$</p>\n<blockquote>\n<p>基于上述视角，关系抽取任务可以分为以下两个步骤：</p>\n<ul>\n<li>确定句子中所有可能的主体  (subject)；</li>\n<li>针对每个主体subject，使用特定于关系的标注器（relation-specific tagger）同时识别<strong>所有可能的关系</strong>和<strong>相应的客体object</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"CasRel框架（三部分）：\"><a href=\"#CasRel框架（三部分）：\" class=\"headerlink\" title=\"CasRel框架（三部分）：\"></a>CasRel框架（三部分）：</h2><ul>\n<li><p><strong>BERT-based encoder module (基于Bert的编码器模块)</strong></p>\n</li>\n<li><p><strong>subject tagging module(主体标注模块)</strong></p>\n</li>\n<li><p><strong>relation-specific object tagging module(区分关系的客体标注模块)</strong></p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201006/casrel.jpg\" alt=\"模型结构\" title>\n                </div>\n                <div class=\"image-caption\">模型结构</div>\n            </figure>\n<h2 id=\"训练目标\"><a href=\"#训练目标\" class=\"headerlink\" title=\"训练目标\"></a>训练目标</h2><p>针对训练集 $D$ 中的句子$x_j$，给定对应的潜在overlap triples集合 $ T_j = \\{(s,r,o)\\} $，最大化数据似然估计：</p>\n<p>$ \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{(s,r,o) \\in T_j} {p((s,r,o)|x_j)}\\right]} $</p>\n<p>$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{(r,o) \\in T_j|s} p((r,o)|s,x_j)\\right]}$</p>\n<p>$ = \\prod\\limits_{j=1}^{|D|} {\\left[ \\prod\\limits_{s \\in T_j} p(s|x_j) \\prod\\limits_{ r \\in T_j|s} p_r(o|s,x_j) \\prod\\limits_{r \\in R \\backslash T_j|s} p_r(o_{\\emptyset}|s,x_j)\\right]}$</p>\n<p>其中，$s \\in T_j$ 表示出现在 $T_j$ 中三元组的主体（subject），</p>\n<p>$T_j | s $ 表示 $T_j$ 中主体是 $s$ 的三元组集合，</p>\n<p>$R$ 是所有可能的<strong>关系</strong>的集合，</p>\n<p>$\\backslash$ 表示集合的差集,</p>\n<p>$o_\\emptyset$ 表示”null”客体。</p>\n<blockquote>\n<p>对于任一个给定的主体 s , 在”s确实参与表达的关系r”的作用下，必定可以映射为客体 o ,而对于其他关系，映射为”空”客体 $null$</p>\n</blockquote>\n<h2 id=\"BERT-Encoder\"><a href=\"#BERT-Encoder\" class=\"headerlink\" title=\"BERT Encoder\"></a>BERT Encoder</h2><p>编码器使用Bert </p>\n<h2 id=\"Subject-Tagger\"><a href=\"#Subject-Tagger\" class=\"headerlink\" title=\"Subject Tagger\"></a>Subject Tagger</h2><p>训练两个二元分类器，分别识别Subject的<strong>开始位置</strong>和<strong>结束位置</strong>,标识为1, 其他标识为0</p>\n<p>对于每一个起始位置，从该位置依次向后<strong>寻找最近的结束位置</strong>, 从而寻找出所有Subject</p>\n<p>$p_i^{start_s} = \\sigma (W_{start} X_i + b_{start})$,</p>\n<p>$p_i^{end_s} = \\sigma (W_{end} X_i + b_{end})$,</p>\n<p>$ X_i $ 表示序列第i个词的bert编码，</p>\n<p>$\\sigma $ 表示sigmoid激活函数。</p>\n<h3 id=\"loss\"><a href=\"#loss\" class=\"headerlink\" title=\"loss\"></a>loss</h3><p>最大化似然函数：<br>$p_\\theta(s|X) = \\prod\\limits_{t \\in \\{start_s,end_s\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,</p>\n<p>$L$是句子长度，</p>\n<p>$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，</p>\n<p>$\\theta$ 是参数集合</p>\n<blockquote>\n<p>经过这一步骤，可是识别出句子中<strong>所有Subject</strong></p>\n</blockquote>\n<h2 id=\"Relation-specific-Object-Taggers\"><a href=\"#Relation-specific-Object-Taggers\" class=\"headerlink\" title=\"Relation-specific Object Taggers\"></a>Relation-specific Object Taggers</h2><p>针对每一个关系 $r$,训练两个二元分类器，分别识别<strong>针对关系r映射出的Object</strong>的<strong>开始位置</strong>和<strong>结束位置</strong>，标识为1， 否则标识为0</p>\n<p>$p_i^{start_o} = \\sigma (W_{start}^r (X_i + V^k_{sub}) + b_{start}^r)$,</p>\n<p>$p_i^{end_o} = \\sigma (W_{end}^r (X_i + V^k_{sub}) + b_{end}^r)$,</p>\n<p>$V_{sub}^k$ 表示subject tagger识别出的<strong>第k个Subject的编码</strong>，若为多个词构成，取均值</p>\n<h3 id=\"loss-1\"><a href=\"#loss-1\" class=\"headerlink\" title=\"loss\"></a>loss</h3><p>最大化似然函数：</p>\n<p>$p_{\\emptyset_r}(o|s, X) = \\prod\\limits_{t \\in \\{start_o,end_o\\}} {\\prod\\limits_{i=1}^L (p_i^t)^{I\\{y_i^t = 1\\} }(1-p_i^t)^{I\\{y_i^t = 0\\}}}$,</p>\n<p>$L$是句子长度，</p>\n<p>$I\\{z\\} = 1$ ，如果 z 为 true， 否则 0，</p>\n<p>$\\emptyset_r$ 是参数集合,</p>\n<p>另外，“空”客体Object，意味着 </p>\n<script type=\"math/tex; mode=display\">y_i^{start\\_o_{\\emptyset}} = y_i^{end\\_o_{\\emptyset}} = 0</script><blockquote>\n<p>针对<strong>Subject Tagger</strong>识别出的每一个Subject，计算该subject在<strong>每个关系作用下的Object</strong>。<br>对于每一个关系 $r$<br>若得到非空Object，既可以抽取出关系三元组，<br>若得到空Object，则认为不存在该关系。</p>\n</blockquote>\n<h2 id=\"整体Loss\"><a href=\"#整体Loss\" class=\"headerlink\" title=\"整体Loss\"></a>整体Loss</h2><p>最大化似然函数：</p>\n<p>$J(\\Theta) = \\sum\\limits _{j=1} ^ {|D|} \\left[ {\\sum\\limits _{s \\in T_j} \\log p_\\theta(s|X_j)} + {\\sum\\limits _{r \\in T_j|s} \\log p_{\\emptyset_r}(o|s,X_j)} + {\\sum\\limits _{r \\in R \\backslash T_j|s} \\log p_{\\emptyset_r}(o_\\emptyset|s,X_j)}  \\right]$</p>\n"},{"title":"ACL 2020 -- Exploiting the Syntax-Model Consistency for Neural Relation Extraction","date":"2020-08-29T06:02:41.000Z","abbrlink":"20200829a","_content":"\n# 摘要\n\n本文研究了关系抽取(Re)的任务，目的是识别文本中提到的两个实体之间的语义关系。 在Re的深度学习模型中，**整合输入句子的依存树中的句法结构是有益的**。 \n在这种模型中，依赖树经常被用来**直接构造网络结构**或**获得单词对之间的依赖关系，以此通过多任务学习将句法信息注入模型中**。\n\n这些方法的主要问题是**训练数据中缺乏超越句法结构的泛化**，或者**未能捕捉词对于RE的句法重要性**。\n\n为了克服这些问题，我们提出了一种新的Re深度学习模型，该模型**使用依赖树提取单词的基于句法的重要性得分，作为树的向量表示，以将句法信息注入具有更大泛化性的模型中**。 \n\n特别是，我们利用**有序神经元长短期记忆网络**(ON-LSTM)来推断句子中**每个单词的基于模型的重要性得分**，然后对其进行调整，使其与基于句法的分数保持一致，从而实现句法信息注入。 \n\n我们进行了广泛的实验来证明所提出的方法的有效性，从而在三个基准数据集上取得了SOTA性能。\n\n# 引言\n\n最近对RE的研究集中在深度学习上，以开发从文本数据中自动生成句子向量表示的方法。在这些最近的研究中，值得注意的是，**输入句子的句法树（即依存树）可以为深度学习模型提供有效的信息，从而得到SOTA性能**\n\n特别是，以前的RE深度学习模型大多都利用句法树中呈现的单词连接来构造网络结构(例如，依存树上的图卷积神经网络(GCN))。不幸的是，这些模型由于**训练数据的树结构可能与测试数据中的树结构有很大的不同**而导致泛化性较差，即模型过拟合于训练数据的句法树结构。这一问题在跨领域RE时，尤为明显。\n\n为克服这一问题，总体策略是**获得更一般的句法树向量表示**，这些嵌入向量可用来将句法信息注入到深度学习模型中，以获得更好的泛化效果。\n\n2019年 Veyseh等人给出了RE的一般树表示，其中依存树被分解为句子中单词之间的依赖关系集（即边)，称为基于边的表示。然后，在多任务学习框架中使用这些依赖关系，来同时预测两个实体间的关系和输入句子中单词对之间的依赖关系。\n\n**基于边的表示**的**主要缺点**是它只捕获单词之间的成对（局部）连接，而完全忽略了单词在句子中对RE问题的整体（全局）重要性，特别是，在RE的关系预测过程中，给定句子中的某些单词可能比其他单词包含更有用的信息，并且这个句子的依存树可以帮助更好地识别那些重要的单词，并为它们分配更高的重要性得分（**即在两个实体之间沿最短依赖路径选择单词**）\n\n在本文中，我们提出从依存树中获得句子中每个单词的重要性得分（称为基于句法的重要性得分 syntax-based importance scores），这将作为依存树的一般向量表示，以将句法信息注入RE深度学习模型中。\n\n\n如何在RE深度学习模型中使用基于句法的重要性得分？\n\n* 首先，利用深度学习模型中的单词向量表示（词嵌入可能参与训练）为每个单词计算一个重要性得分（称为model-based importance scores）\n* 利用KL散度使上述两个重要性得分的分布一致，使这个重要性得分能够反映句法信息\n\n为了实现上述想法，本文首次采用了ON-LSTM(Ordered-Neuron Long Short-Term Momory Networks)计算单词的model-based importance scores。\n\nON-LSTM相较于LSTM新填了2个门（gate）结构：\n\n* master forget\n* master input\n\nON-LSTM局限：\n\n>  master gates 和 model-based importance scores 仅依赖于当前词本身及其左上下文（先前时刻隐状态）\n\n> 为了更有效利用整个句子的信息，本文提出**先生成整个句子的向量表示，并把其作为每个单词计算其重要性得分的输入**\n\n为了进一步改善深度学习模型的编码能力，以学习到更好的特征向量，本文引入一种新的**归纳偏置**：\n\n> 使 基于**两个实体间的最短依赖路径**的特征向量 和 基于**整个句子**的特征向量 的相似度尽可能高\n\n该归纳偏置基于以下直觉：句子中两个实体的语义关系可以从整个句子或者最短依赖路径中推断出来。\n\n# 模型\n\n本文模型主要分为三大组件：\n\n* CEON-LSTM （context-enriched ON-LSTM）\n\t* 用于计算model-based importance scores\n* syntax-model consistency component\n\t* 促使syntax-based与model-based重要性得分分布一致\n* Sentence-Dependency Path Similarity\n\t* *基于句子整体的特征向量*和*基于最短依存路径的特征向量*的相似度组件\n\n## 嵌入层\n\n三部分的拼接：\n\n* 预训练词嵌入（pre-trained word embedding）\n* 基于相对距离的位置嵌入（position embedding）\n\t* t-s、t-o\n* BIO实体标注嵌入（entity type embedding）\n\n## CEON-LSTM\n\n### LSTM\n\n公式如下：\n\n![](ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-formula.JPG)\n\n计算流程图如下：\n\n![](ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-img.png)\n\n\n### ON-LSTM\n\n> 为了将依存树中的句法结构融合进LSTM，引入两个门（gate）：master forget($\\tilde{f_t}$)、 master input($\\tilde{i_t}$)\n\n首先定义累加函数\n$$cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]$$\n\n定义数值软化函数 $cummax(X) = cumsum(softmax(X))$\n\n具体计算公式如下：\n\n$$ \\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}}) $$\n\n$$ \\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}}) $$\n\n$$\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)$$\n\n$$ c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t} $$\n\n整体计算流程如下：\n\n![](ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/on-lstm-img.jpg)\n\n$\\tilde{f_t}$和$\\tilde{i_t}$的输出分别从0递增到1、从1递减至0，且都可以分为两个段（近0段、近1段），其中近1段可以理解为当前时间步处于活跃状态的cell states中的神经元/维度。详见[2](http://hanrd.tech/posts/20200830a/)\n\n因此，本文利用近1段，即**处于活跃态的维度的个数**计算model-based scores。\n\nmaster forget的值：\n\n$$ \\tilde{f_t} = \\tilde{f_{t1}},\\tilde{f_{t2}},...,\\tilde{f_{tD}} $$\n\nmodel-based score：\n\n$$ mod_t = 1 - \\sum \\nolimits_{i = 1..D} \\tilde{f_{ti}} $$\n\n### CEON-LSTM\n\n> ON-LSTM引入句子上下文信息\n\n用下述$x'_t$代替mater gates计算中的$x_t$\n\n$$ x = x_1, x_2,..., x_N $$\n\n$$ x'_t = \\sum \\nolimits_i \\alpha_{ti} (W_x x_i + b_x) $$\n\n$$ \\alpha_{ti} = \\frac{ \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_i + b_x))} { \\sum \\limits _{j = 1} ^N \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_j + b_x)) } $$\n\n## Syntax-Model Consistency\n\n首先，计算syntax-based importance score ($syn_t$)：\n\n1. 计算依存树最短依赖路径 $DP$ (词序列)\n2. 计算依存树任意词对间最长路径长度 $T$\n3. $ syn_t = T - minLength(w_t, DP) $  ,\n其中$minLength(w_t, DP)$表示计算$w_t$与最短依存路径$DP$上某一单词在依存树上的路径长度的最短长度\n\n> 经过上述计算，位于最短依存路径DP上的单词的重要性得分均为T, 而其他单词，距离DP越远得分越低。\n\n> 该syntax-based score可以看作是原始依存树的泛化（relaxd）版，可以避免模型对训练数据语法结构的**过拟合**\n\nSyntax-Model Consistency的思路可以理解为：\n> 利用syntax-based score为model-based score提供监督信号，通过KL散度定义loss\n\n计算公式如下：\n\n$$ \\overline{mod}_1, \\overline{mod}_2, ..., \\overline{mod}_N = softmax(mod_1, mod_2,...,mod_N) $$\n\n$$ \\overline{syn}_1, \\overline{syn}_2, ..., \\overline{syn}_N = softmax(syn_1, syn_2,...,syn_N) $$\n\n$$L_{importance} = - \\sum \\nolimits_i \\overline{mod}_i \\log \\frac {\\overline{mod}_i} {\\overline{syn}_i}$$\n\n## Sentence-Dependency Path Similarity\n\n> 最大化**基于句子整体的特征向量**和**基于最短依存路径的特征向量**的相似度\n\n* 首先划定两个单词的序列：整个句子词序列、最短依存路径词序列\n* max-pooling模型CEON-LSTM的隐状态序列$h = h_1,h_2,...,h_N$的上述单词序列对应的隐状态序列\n\n首先计算句子$X$和最短依存路径$DP$的特征向量表示$R_X$、$R_{DP}$\n\n$$R_X = MaxPooling_{x_i \\in X}(h_i)$$\n\n$$R_{DP} = MaxPooling_{x_i \\in DP}(h_i)$$\n\n定义损失函数：\n\n$$L_{path} = 1 - \\cos (R_X, R_{DP}) ,其中\\cos表示余弦相似度$$\n\n## Output & Loss\n\n用于RE预测的全部特征向量为：\n$$ V = [x_s, x_o, h_s, h_o, R_X], s和o为主客两个实体的索引$$\n\n$$ output= P(.| X, x_s, x_o) = softmax(W_{output} V + b_{output})$$\n\n$$L_{label} = - \\log P(r|X, x_s, x_o), r是最适关系标签,即真实标签$$\n\n损失函数定义：\n$$ L = L_{label} + \\alpha L_{importance} + \\beta L_{path} $$\n\n# 参考链接\n\n[[1].Exploiting the Syntax-Model Consistency for Neural Relation Extraction](https://www.aclweb.org/anthology/2020.acl-main.715/)\n\n[[2].ORDERED NEURONS:INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS](http://hanrd.tech/posts/20200830a/)\n\n","source":"_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction.md","raw":"---\ntitle: ACL 2020 -- Exploiting the Syntax-Model Consistency for Neural Relation Extraction\ndate: 2020-08-29 14:02:41\ntags: \n\t- ACL 2020\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- ACL 2020\nabbrlink: '20200829a'\n---\n\n# 摘要\n\n本文研究了关系抽取(Re)的任务，目的是识别文本中提到的两个实体之间的语义关系。 在Re的深度学习模型中，**整合输入句子的依存树中的句法结构是有益的**。 \n在这种模型中，依赖树经常被用来**直接构造网络结构**或**获得单词对之间的依赖关系，以此通过多任务学习将句法信息注入模型中**。\n\n这些方法的主要问题是**训练数据中缺乏超越句法结构的泛化**，或者**未能捕捉词对于RE的句法重要性**。\n\n为了克服这些问题，我们提出了一种新的Re深度学习模型，该模型**使用依赖树提取单词的基于句法的重要性得分，作为树的向量表示，以将句法信息注入具有更大泛化性的模型中**。 \n\n特别是，我们利用**有序神经元长短期记忆网络**(ON-LSTM)来推断句子中**每个单词的基于模型的重要性得分**，然后对其进行调整，使其与基于句法的分数保持一致，从而实现句法信息注入。 \n\n我们进行了广泛的实验来证明所提出的方法的有效性，从而在三个基准数据集上取得了SOTA性能。\n\n# 引言\n\n最近对RE的研究集中在深度学习上，以开发从文本数据中自动生成句子向量表示的方法。在这些最近的研究中，值得注意的是，**输入句子的句法树（即依存树）可以为深度学习模型提供有效的信息，从而得到SOTA性能**\n\n特别是，以前的RE深度学习模型大多都利用句法树中呈现的单词连接来构造网络结构(例如，依存树上的图卷积神经网络(GCN))。不幸的是，这些模型由于**训练数据的树结构可能与测试数据中的树结构有很大的不同**而导致泛化性较差，即模型过拟合于训练数据的句法树结构。这一问题在跨领域RE时，尤为明显。\n\n为克服这一问题，总体策略是**获得更一般的句法树向量表示**，这些嵌入向量可用来将句法信息注入到深度学习模型中，以获得更好的泛化效果。\n\n2019年 Veyseh等人给出了RE的一般树表示，其中依存树被分解为句子中单词之间的依赖关系集（即边)，称为基于边的表示。然后，在多任务学习框架中使用这些依赖关系，来同时预测两个实体间的关系和输入句子中单词对之间的依赖关系。\n\n**基于边的表示**的**主要缺点**是它只捕获单词之间的成对（局部）连接，而完全忽略了单词在句子中对RE问题的整体（全局）重要性，特别是，在RE的关系预测过程中，给定句子中的某些单词可能比其他单词包含更有用的信息，并且这个句子的依存树可以帮助更好地识别那些重要的单词，并为它们分配更高的重要性得分（**即在两个实体之间沿最短依赖路径选择单词**）\n\n在本文中，我们提出从依存树中获得句子中每个单词的重要性得分（称为基于句法的重要性得分 syntax-based importance scores），这将作为依存树的一般向量表示，以将句法信息注入RE深度学习模型中。\n\n\n如何在RE深度学习模型中使用基于句法的重要性得分？\n\n* 首先，利用深度学习模型中的单词向量表示（词嵌入可能参与训练）为每个单词计算一个重要性得分（称为model-based importance scores）\n* 利用KL散度使上述两个重要性得分的分布一致，使这个重要性得分能够反映句法信息\n\n为了实现上述想法，本文首次采用了ON-LSTM(Ordered-Neuron Long Short-Term Momory Networks)计算单词的model-based importance scores。\n\nON-LSTM相较于LSTM新填了2个门（gate）结构：\n\n* master forget\n* master input\n\nON-LSTM局限：\n\n>  master gates 和 model-based importance scores 仅依赖于当前词本身及其左上下文（先前时刻隐状态）\n\n> 为了更有效利用整个句子的信息，本文提出**先生成整个句子的向量表示，并把其作为每个单词计算其重要性得分的输入**\n\n为了进一步改善深度学习模型的编码能力，以学习到更好的特征向量，本文引入一种新的**归纳偏置**：\n\n> 使 基于**两个实体间的最短依赖路径**的特征向量 和 基于**整个句子**的特征向量 的相似度尽可能高\n\n该归纳偏置基于以下直觉：句子中两个实体的语义关系可以从整个句子或者最短依赖路径中推断出来。\n\n# 模型\n\n本文模型主要分为三大组件：\n\n* CEON-LSTM （context-enriched ON-LSTM）\n\t* 用于计算model-based importance scores\n* syntax-model consistency component\n\t* 促使syntax-based与model-based重要性得分分布一致\n* Sentence-Dependency Path Similarity\n\t* *基于句子整体的特征向量*和*基于最短依存路径的特征向量*的相似度组件\n\n## 嵌入层\n\n三部分的拼接：\n\n* 预训练词嵌入（pre-trained word embedding）\n* 基于相对距离的位置嵌入（position embedding）\n\t* t-s、t-o\n* BIO实体标注嵌入（entity type embedding）\n\n## CEON-LSTM\n\n### LSTM\n\n公式如下：\n\n![](ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-formula.JPG)\n\n计算流程图如下：\n\n![](ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-img.png)\n\n\n### ON-LSTM\n\n> 为了将依存树中的句法结构融合进LSTM，引入两个门（gate）：master forget($\\tilde{f_t}$)、 master input($\\tilde{i_t}$)\n\n首先定义累加函数\n$$cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]$$\n\n定义数值软化函数 $cummax(X) = cumsum(softmax(X))$\n\n具体计算公式如下：\n\n$$ \\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}}) $$\n\n$$ \\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}}) $$\n\n$$\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)$$\n\n$$ c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t} $$\n\n整体计算流程如下：\n\n![](ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/on-lstm-img.jpg)\n\n$\\tilde{f_t}$和$\\tilde{i_t}$的输出分别从0递增到1、从1递减至0，且都可以分为两个段（近0段、近1段），其中近1段可以理解为当前时间步处于活跃状态的cell states中的神经元/维度。详见[2](http://hanrd.tech/posts/20200830a/)\n\n因此，本文利用近1段，即**处于活跃态的维度的个数**计算model-based scores。\n\nmaster forget的值：\n\n$$ \\tilde{f_t} = \\tilde{f_{t1}},\\tilde{f_{t2}},...,\\tilde{f_{tD}} $$\n\nmodel-based score：\n\n$$ mod_t = 1 - \\sum \\nolimits_{i = 1..D} \\tilde{f_{ti}} $$\n\n### CEON-LSTM\n\n> ON-LSTM引入句子上下文信息\n\n用下述$x'_t$代替mater gates计算中的$x_t$\n\n$$ x = x_1, x_2,..., x_N $$\n\n$$ x'_t = \\sum \\nolimits_i \\alpha_{ti} (W_x x_i + b_x) $$\n\n$$ \\alpha_{ti} = \\frac{ \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_i + b_x))} { \\sum \\limits _{j = 1} ^N \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_j + b_x)) } $$\n\n## Syntax-Model Consistency\n\n首先，计算syntax-based importance score ($syn_t$)：\n\n1. 计算依存树最短依赖路径 $DP$ (词序列)\n2. 计算依存树任意词对间最长路径长度 $T$\n3. $ syn_t = T - minLength(w_t, DP) $  ,\n其中$minLength(w_t, DP)$表示计算$w_t$与最短依存路径$DP$上某一单词在依存树上的路径长度的最短长度\n\n> 经过上述计算，位于最短依存路径DP上的单词的重要性得分均为T, 而其他单词，距离DP越远得分越低。\n\n> 该syntax-based score可以看作是原始依存树的泛化（relaxd）版，可以避免模型对训练数据语法结构的**过拟合**\n\nSyntax-Model Consistency的思路可以理解为：\n> 利用syntax-based score为model-based score提供监督信号，通过KL散度定义loss\n\n计算公式如下：\n\n$$ \\overline{mod}_1, \\overline{mod}_2, ..., \\overline{mod}_N = softmax(mod_1, mod_2,...,mod_N) $$\n\n$$ \\overline{syn}_1, \\overline{syn}_2, ..., \\overline{syn}_N = softmax(syn_1, syn_2,...,syn_N) $$\n\n$$L_{importance} = - \\sum \\nolimits_i \\overline{mod}_i \\log \\frac {\\overline{mod}_i} {\\overline{syn}_i}$$\n\n## Sentence-Dependency Path Similarity\n\n> 最大化**基于句子整体的特征向量**和**基于最短依存路径的特征向量**的相似度\n\n* 首先划定两个单词的序列：整个句子词序列、最短依存路径词序列\n* max-pooling模型CEON-LSTM的隐状态序列$h = h_1,h_2,...,h_N$的上述单词序列对应的隐状态序列\n\n首先计算句子$X$和最短依存路径$DP$的特征向量表示$R_X$、$R_{DP}$\n\n$$R_X = MaxPooling_{x_i \\in X}(h_i)$$\n\n$$R_{DP} = MaxPooling_{x_i \\in DP}(h_i)$$\n\n定义损失函数：\n\n$$L_{path} = 1 - \\cos (R_X, R_{DP}) ,其中\\cos表示余弦相似度$$\n\n## Output & Loss\n\n用于RE预测的全部特征向量为：\n$$ V = [x_s, x_o, h_s, h_o, R_X], s和o为主客两个实体的索引$$\n\n$$ output= P(.| X, x_s, x_o) = softmax(W_{output} V + b_{output})$$\n\n$$L_{label} = - \\log P(r|X, x_s, x_o), r是最适关系标签,即真实标签$$\n\n损失函数定义：\n$$ L = L_{label} + \\alpha L_{importance} + \\beta L_{path} $$\n\n# 参考链接\n\n[[1].Exploiting the Syntax-Model Consistency for Neural Relation Extraction](https://www.aclweb.org/anthology/2020.acl-main.715/)\n\n[[2].ORDERED NEURONS:INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS](http://hanrd.tech/posts/20200830a/)\n\n","slug":"ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction","published":1,"updated":"2020-09-16T12:16:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mn0008dgtqgl4p9sjk","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>本文研究了关系抽取(Re)的任务，目的是识别文本中提到的两个实体之间的语义关系。 在Re的深度学习模型中，<strong>整合输入句子的依存树中的句法结构是有益的</strong>。<br>在这种模型中，依赖树经常被用来<strong>直接构造网络结构</strong>或<strong>获得单词对之间的依赖关系，以此通过多任务学习将句法信息注入模型中</strong>。</p>\n<p>这些方法的主要问题是<strong>训练数据中缺乏超越句法结构的泛化</strong>，或者<strong>未能捕捉词对于RE的句法重要性</strong>。</p>\n<p>为了克服这些问题，我们提出了一种新的Re深度学习模型，该模型<strong>使用依赖树提取单词的基于句法的重要性得分，作为树的向量表示，以将句法信息注入具有更大泛化性的模型中</strong>。 </p>\n<p>特别是，我们利用<strong>有序神经元长短期记忆网络</strong>(ON-LSTM)来推断句子中<strong>每个单词的基于模型的重要性得分</strong>，然后对其进行调整，使其与基于句法的分数保持一致，从而实现句法信息注入。 </p>\n<p>我们进行了广泛的实验来证明所提出的方法的有效性，从而在三个基准数据集上取得了SOTA性能。</p>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>最近对RE的研究集中在深度学习上，以开发从文本数据中自动生成句子向量表示的方法。在这些最近的研究中，值得注意的是，<strong>输入句子的句法树（即依存树）可以为深度学习模型提供有效的信息，从而得到SOTA性能</strong></p>\n<p>特别是，以前的RE深度学习模型大多都利用句法树中呈现的单词连接来构造网络结构(例如，依存树上的图卷积神经网络(GCN))。不幸的是，这些模型由于<strong>训练数据的树结构可能与测试数据中的树结构有很大的不同</strong>而导致泛化性较差，即模型过拟合于训练数据的句法树结构。这一问题在跨领域RE时，尤为明显。</p>\n<p>为克服这一问题，总体策略是<strong>获得更一般的句法树向量表示</strong>，这些嵌入向量可用来将句法信息注入到深度学习模型中，以获得更好的泛化效果。</p>\n<p>2019年 Veyseh等人给出了RE的一般树表示，其中依存树被分解为句子中单词之间的依赖关系集（即边)，称为基于边的表示。然后，在多任务学习框架中使用这些依赖关系，来同时预测两个实体间的关系和输入句子中单词对之间的依赖关系。</p>\n<p><strong>基于边的表示</strong>的<strong>主要缺点</strong>是它只捕获单词之间的成对（局部）连接，而完全忽略了单词在句子中对RE问题的整体（全局）重要性，特别是，在RE的关系预测过程中，给定句子中的某些单词可能比其他单词包含更有用的信息，并且这个句子的依存树可以帮助更好地识别那些重要的单词，并为它们分配更高的重要性得分（<strong>即在两个实体之间沿最短依赖路径选择单词</strong>）</p>\n<p>在本文中，我们提出从依存树中获得句子中每个单词的重要性得分（称为基于句法的重要性得分 syntax-based importance scores），这将作为依存树的一般向量表示，以将句法信息注入RE深度学习模型中。</p>\n<p>如何在RE深度学习模型中使用基于句法的重要性得分？</p>\n<ul>\n<li>首先，利用深度学习模型中的单词向量表示（词嵌入可能参与训练）为每个单词计算一个重要性得分（称为model-based importance scores）</li>\n<li>利用KL散度使上述两个重要性得分的分布一致，使这个重要性得分能够反映句法信息</li>\n</ul>\n<p>为了实现上述想法，本文首次采用了ON-LSTM(Ordered-Neuron Long Short-Term Momory Networks)计算单词的model-based importance scores。</p>\n<p>ON-LSTM相较于LSTM新填了2个门（gate）结构：</p>\n<ul>\n<li>master forget</li>\n<li>master input</li>\n</ul>\n<p>ON-LSTM局限：</p>\n<blockquote>\n<p> master gates 和 model-based importance scores 仅依赖于当前词本身及其左上下文（先前时刻隐状态）</p>\n<p>为了更有效利用整个句子的信息，本文提出<strong>先生成整个句子的向量表示，并把其作为每个单词计算其重要性得分的输入</strong></p>\n</blockquote>\n<p>为了进一步改善深度学习模型的编码能力，以学习到更好的特征向量，本文引入一种新的<strong>归纳偏置</strong>：</p>\n<blockquote>\n<p>使 基于<strong>两个实体间的最短依赖路径</strong>的特征向量 和 基于<strong>整个句子</strong>的特征向量 的相似度尽可能高</p>\n</blockquote>\n<p>该归纳偏置基于以下直觉：句子中两个实体的语义关系可以从整个句子或者最短依赖路径中推断出来。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><p>本文模型主要分为三大组件：</p>\n<ul>\n<li>CEON-LSTM （context-enriched ON-LSTM）<ul>\n<li>用于计算model-based importance scores</li>\n</ul>\n</li>\n<li>syntax-model consistency component<ul>\n<li>促使syntax-based与model-based重要性得分分布一致</li>\n</ul>\n</li>\n<li>Sentence-Dependency Path Similarity<ul>\n<li><em>基于句子整体的特征向量</em>和<em>基于最短依存路径的特征向量</em>的相似度组件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"嵌入层\"><a href=\"#嵌入层\" class=\"headerlink\" title=\"嵌入层\"></a>嵌入层</h2><p>三部分的拼接：</p>\n<ul>\n<li>预训练词嵌入（pre-trained word embedding）</li>\n<li>基于相对距离的位置嵌入（position embedding）<ul>\n<li>t-s、t-o</li>\n</ul>\n</li>\n<li>BIO实体标注嵌入（entity type embedding）</li>\n</ul>\n<h2 id=\"CEON-LSTM\"><a href=\"#CEON-LSTM\" class=\"headerlink\" title=\"CEON-LSTM\"></a>CEON-LSTM</h2><h3 id=\"LSTM\"><a href=\"#LSTM\" class=\"headerlink\" title=\"LSTM\"></a>LSTM</h3><p>公式如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200829a/lstm-formula.JPG\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>计算流程图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200829a/lstm-img.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"ON-LSTM\"><a href=\"#ON-LSTM\" class=\"headerlink\" title=\"ON-LSTM\"></a>ON-LSTM</h3><blockquote>\n<p>为了将依存树中的句法结构融合进LSTM，引入两个门（gate）：master forget($\\tilde{f_t}$)、 master input($\\tilde{i_t}$)</p>\n</blockquote>\n<p>首先定义累加函数</p>\n<script type=\"math/tex; mode=display\">cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]</script><p>定义数值软化函数 $cummax(X) = cumsum(softmax(X))$</p>\n<p>具体计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}})</script><script type=\"math/tex; mode=display\">\\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}})</script><script type=\"math/tex; mode=display\">\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)</script><script type=\"math/tex; mode=display\">c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t}</script><p>整体计算流程如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200829a/on-lstm-img.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>$\\tilde{f_t}$和$\\tilde{i_t}$的输出分别从0递增到1、从1递减至0，且都可以分为两个段（近0段、近1段），其中近1段可以理解为当前时间步处于活跃状态的cell states中的神经元/维度。详见<a href=\"http://hanrd.tech/posts/20200830a/\">2</a></p>\n<p>因此，本文利用近1段，即<strong>处于活跃态的维度的个数</strong>计算model-based scores。</p>\n<p>master forget的值：</p>\n<script type=\"math/tex; mode=display\">\\tilde{f_t} = \\tilde{f_{t1}},\\tilde{f_{t2}},...,\\tilde{f_{tD}}</script><p>model-based score：</p>\n<script type=\"math/tex; mode=display\">mod_t = 1 - \\sum \\nolimits_{i = 1..D} \\tilde{f_{ti}}</script><h3 id=\"CEON-LSTM-1\"><a href=\"#CEON-LSTM-1\" class=\"headerlink\" title=\"CEON-LSTM\"></a>CEON-LSTM</h3><blockquote>\n<p>ON-LSTM引入句子上下文信息</p>\n</blockquote>\n<p>用下述$x’_t$代替mater gates计算中的$x_t$</p>\n<script type=\"math/tex; mode=display\">x = x_1, x_2,..., x_N</script><script type=\"math/tex; mode=display\">x'_t = \\sum \\nolimits_i \\alpha_{ti} (W_x x_i + b_x)</script><script type=\"math/tex; mode=display\">\\alpha_{ti} = \\frac{ \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_i + b_x))} { \\sum \\limits _{j = 1} ^N \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_j + b_x)) }</script><h2 id=\"Syntax-Model-Consistency\"><a href=\"#Syntax-Model-Consistency\" class=\"headerlink\" title=\"Syntax-Model Consistency\"></a>Syntax-Model Consistency</h2><p>首先，计算syntax-based importance score ($syn_t$)：</p>\n<ol>\n<li>计算依存树最短依赖路径 $DP$ (词序列)</li>\n<li>计算依存树任意词对间最长路径长度 $T$</li>\n<li>$ syn_t = T - minLength(w_t, DP) $  ,<br>其中$minLength(w_t, DP)$表示计算$w_t$与最短依存路径$DP$上某一单词在依存树上的路径长度的最短长度</li>\n</ol>\n<blockquote>\n<p>经过上述计算，位于最短依存路径DP上的单词的重要性得分均为T, 而其他单词，距离DP越远得分越低。</p>\n<p>该syntax-based score可以看作是原始依存树的泛化（relaxd）版，可以避免模型对训练数据语法结构的<strong>过拟合</strong></p>\n</blockquote>\n<p>Syntax-Model Consistency的思路可以理解为：</p>\n<blockquote>\n<p>利用syntax-based score为model-based score提供监督信号，通过KL散度定义loss</p>\n</blockquote>\n<p>计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\\overline{mod}_1, \\overline{mod}_2, ..., \\overline{mod}_N = softmax(mod_1, mod_2,...,mod_N)</script><script type=\"math/tex; mode=display\">\\overline{syn}_1, \\overline{syn}_2, ..., \\overline{syn}_N = softmax(syn_1, syn_2,...,syn_N)</script><script type=\"math/tex; mode=display\">L_{importance} = - \\sum \\nolimits_i \\overline{mod}_i \\log \\frac {\\overline{mod}_i} {\\overline{syn}_i}</script><h2 id=\"Sentence-Dependency-Path-Similarity\"><a href=\"#Sentence-Dependency-Path-Similarity\" class=\"headerlink\" title=\"Sentence-Dependency Path Similarity\"></a>Sentence-Dependency Path Similarity</h2><blockquote>\n<p>最大化<strong>基于句子整体的特征向量</strong>和<strong>基于最短依存路径的特征向量</strong>的相似度</p>\n</blockquote>\n<ul>\n<li>首先划定两个单词的序列：整个句子词序列、最短依存路径词序列</li>\n<li>max-pooling模型CEON-LSTM的隐状态序列$h = h_1,h_2,…,h_N$的上述单词序列对应的隐状态序列</li>\n</ul>\n<p>首先计算句子$X$和最短依存路径$DP$的特征向量表示$R_X$、$R_{DP}$</p>\n<script type=\"math/tex; mode=display\">R_X = MaxPooling_{x_i \\in X}(h_i)</script><script type=\"math/tex; mode=display\">R_{DP} = MaxPooling_{x_i \\in DP}(h_i)</script><p>定义损失函数：</p>\n<script type=\"math/tex; mode=display\">L_{path} = 1 - \\cos (R_X, R_{DP}) ,其中\\cos表示余弦相似度</script><h2 id=\"Output-amp-Loss\"><a href=\"#Output-amp-Loss\" class=\"headerlink\" title=\"Output &amp; Loss\"></a>Output &amp; Loss</h2><p>用于RE预测的全部特征向量为：</p>\n<script type=\"math/tex; mode=display\">V = [x_s, x_o, h_s, h_o, R_X], s和o为主客两个实体的索引</script><script type=\"math/tex; mode=display\">output= P(.| X, x_s, x_o) = softmax(W_{output} V + b_{output})</script><script type=\"math/tex; mode=display\">L_{label} = - \\log P(r|X, x_s, x_o), r是最适关系标签,即真实标签</script><p>损失函数定义：</p>\n<script type=\"math/tex; mode=display\">L = L_{label} + \\alpha L_{importance} + \\beta L_{path}</script><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.aclweb.org/anthology/2020.acl-main.715/\" target=\"_blank\" rel=\"noopener\">[1].Exploiting the Syntax-Model Consistency for Neural Relation Extraction</a></p>\n<p><a href=\"http://hanrd.tech/posts/20200830a/\">[2].ORDERED NEURONS:INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>本文研究了关系抽取(Re)的任务，目的是识别文本中提到的两个实体之间的语义关系。 在Re的深度学习模型中，<strong>整合输入句子的依存树中的句法结构是有益的</strong>。<br>在这种模型中，依赖树经常被用来<strong>直接构造网络结构</strong>或<strong>获得单词对之间的依赖关系，以此通过多任务学习将句法信息注入模型中</strong>。</p>\n<p>这些方法的主要问题是<strong>训练数据中缺乏超越句法结构的泛化</strong>，或者<strong>未能捕捉词对于RE的句法重要性</strong>。</p>\n<p>为了克服这些问题，我们提出了一种新的Re深度学习模型，该模型<strong>使用依赖树提取单词的基于句法的重要性得分，作为树的向量表示，以将句法信息注入具有更大泛化性的模型中</strong>。 </p>\n<p>特别是，我们利用<strong>有序神经元长短期记忆网络</strong>(ON-LSTM)来推断句子中<strong>每个单词的基于模型的重要性得分</strong>，然后对其进行调整，使其与基于句法的分数保持一致，从而实现句法信息注入。 </p>\n<p>我们进行了广泛的实验来证明所提出的方法的有效性，从而在三个基准数据集上取得了SOTA性能。</p>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>最近对RE的研究集中在深度学习上，以开发从文本数据中自动生成句子向量表示的方法。在这些最近的研究中，值得注意的是，<strong>输入句子的句法树（即依存树）可以为深度学习模型提供有效的信息，从而得到SOTA性能</strong></p>\n<p>特别是，以前的RE深度学习模型大多都利用句法树中呈现的单词连接来构造网络结构(例如，依存树上的图卷积神经网络(GCN))。不幸的是，这些模型由于<strong>训练数据的树结构可能与测试数据中的树结构有很大的不同</strong>而导致泛化性较差，即模型过拟合于训练数据的句法树结构。这一问题在跨领域RE时，尤为明显。</p>\n<p>为克服这一问题，总体策略是<strong>获得更一般的句法树向量表示</strong>，这些嵌入向量可用来将句法信息注入到深度学习模型中，以获得更好的泛化效果。</p>\n<p>2019年 Veyseh等人给出了RE的一般树表示，其中依存树被分解为句子中单词之间的依赖关系集（即边)，称为基于边的表示。然后，在多任务学习框架中使用这些依赖关系，来同时预测两个实体间的关系和输入句子中单词对之间的依赖关系。</p>\n<p><strong>基于边的表示</strong>的<strong>主要缺点</strong>是它只捕获单词之间的成对（局部）连接，而完全忽略了单词在句子中对RE问题的整体（全局）重要性，特别是，在RE的关系预测过程中，给定句子中的某些单词可能比其他单词包含更有用的信息，并且这个句子的依存树可以帮助更好地识别那些重要的单词，并为它们分配更高的重要性得分（<strong>即在两个实体之间沿最短依赖路径选择单词</strong>）</p>\n<p>在本文中，我们提出从依存树中获得句子中每个单词的重要性得分（称为基于句法的重要性得分 syntax-based importance scores），这将作为依存树的一般向量表示，以将句法信息注入RE深度学习模型中。</p>\n<p>如何在RE深度学习模型中使用基于句法的重要性得分？</p>\n<ul>\n<li>首先，利用深度学习模型中的单词向量表示（词嵌入可能参与训练）为每个单词计算一个重要性得分（称为model-based importance scores）</li>\n<li>利用KL散度使上述两个重要性得分的分布一致，使这个重要性得分能够反映句法信息</li>\n</ul>\n<p>为了实现上述想法，本文首次采用了ON-LSTM(Ordered-Neuron Long Short-Term Momory Networks)计算单词的model-based importance scores。</p>\n<p>ON-LSTM相较于LSTM新填了2个门（gate）结构：</p>\n<ul>\n<li>master forget</li>\n<li>master input</li>\n</ul>\n<p>ON-LSTM局限：</p>\n<blockquote>\n<p> master gates 和 model-based importance scores 仅依赖于当前词本身及其左上下文（先前时刻隐状态）</p>\n<p>为了更有效利用整个句子的信息，本文提出<strong>先生成整个句子的向量表示，并把其作为每个单词计算其重要性得分的输入</strong></p>\n</blockquote>\n<p>为了进一步改善深度学习模型的编码能力，以学习到更好的特征向量，本文引入一种新的<strong>归纳偏置</strong>：</p>\n<blockquote>\n<p>使 基于<strong>两个实体间的最短依赖路径</strong>的特征向量 和 基于<strong>整个句子</strong>的特征向量 的相似度尽可能高</p>\n</blockquote>\n<p>该归纳偏置基于以下直觉：句子中两个实体的语义关系可以从整个句子或者最短依赖路径中推断出来。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><p>本文模型主要分为三大组件：</p>\n<ul>\n<li>CEON-LSTM （context-enriched ON-LSTM）<ul>\n<li>用于计算model-based importance scores</li>\n</ul>\n</li>\n<li>syntax-model consistency component<ul>\n<li>促使syntax-based与model-based重要性得分分布一致</li>\n</ul>\n</li>\n<li>Sentence-Dependency Path Similarity<ul>\n<li><em>基于句子整体的特征向量</em>和<em>基于最短依存路径的特征向量</em>的相似度组件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"嵌入层\"><a href=\"#嵌入层\" class=\"headerlink\" title=\"嵌入层\"></a>嵌入层</h2><p>三部分的拼接：</p>\n<ul>\n<li>预训练词嵌入（pre-trained word embedding）</li>\n<li>基于相对距离的位置嵌入（position embedding）<ul>\n<li>t-s、t-o</li>\n</ul>\n</li>\n<li>BIO实体标注嵌入（entity type embedding）</li>\n</ul>\n<h2 id=\"CEON-LSTM\"><a href=\"#CEON-LSTM\" class=\"headerlink\" title=\"CEON-LSTM\"></a>CEON-LSTM</h2><h3 id=\"LSTM\"><a href=\"#LSTM\" class=\"headerlink\" title=\"LSTM\"></a>LSTM</h3><p>公式如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200829a/lstm-formula.JPG\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>计算流程图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200829a/lstm-img.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"ON-LSTM\"><a href=\"#ON-LSTM\" class=\"headerlink\" title=\"ON-LSTM\"></a>ON-LSTM</h3><blockquote>\n<p>为了将依存树中的句法结构融合进LSTM，引入两个门（gate）：master forget($\\tilde{f_t}$)、 master input($\\tilde{i_t}$)</p>\n</blockquote>\n<p>首先定义累加函数</p>\n<script type=\"math/tex; mode=display\">cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]</script><p>定义数值软化函数 $cummax(X) = cumsum(softmax(X))$</p>\n<p>具体计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}})</script><script type=\"math/tex; mode=display\">\\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}})</script><script type=\"math/tex; mode=display\">\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)</script><script type=\"math/tex; mode=display\">c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t}</script><p>整体计算流程如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200829a/on-lstm-img.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>$\\tilde{f_t}$和$\\tilde{i_t}$的输出分别从0递增到1、从1递减至0，且都可以分为两个段（近0段、近1段），其中近1段可以理解为当前时间步处于活跃状态的cell states中的神经元/维度。详见<a href=\"http://hanrd.tech/posts/20200830a/\">2</a></p>\n<p>因此，本文利用近1段，即<strong>处于活跃态的维度的个数</strong>计算model-based scores。</p>\n<p>master forget的值：</p>\n<script type=\"math/tex; mode=display\">\\tilde{f_t} = \\tilde{f_{t1}},\\tilde{f_{t2}},...,\\tilde{f_{tD}}</script><p>model-based score：</p>\n<script type=\"math/tex; mode=display\">mod_t = 1 - \\sum \\nolimits_{i = 1..D} \\tilde{f_{ti}}</script><h3 id=\"CEON-LSTM-1\"><a href=\"#CEON-LSTM-1\" class=\"headerlink\" title=\"CEON-LSTM\"></a>CEON-LSTM</h3><blockquote>\n<p>ON-LSTM引入句子上下文信息</p>\n</blockquote>\n<p>用下述$x’_t$代替mater gates计算中的$x_t$</p>\n<script type=\"math/tex; mode=display\">x = x_1, x_2,..., x_N</script><script type=\"math/tex; mode=display\">x'_t = \\sum \\nolimits_i \\alpha_{ti} (W_x x_i + b_x)</script><script type=\"math/tex; mode=display\">\\alpha_{ti} = \\frac{ \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_i + b_x))} { \\sum \\limits _{j = 1} ^N \\exp ((W_h h_{t-1} + b_h) \\bullet (W_x x_j + b_x)) }</script><h2 id=\"Syntax-Model-Consistency\"><a href=\"#Syntax-Model-Consistency\" class=\"headerlink\" title=\"Syntax-Model Consistency\"></a>Syntax-Model Consistency</h2><p>首先，计算syntax-based importance score ($syn_t$)：</p>\n<ol>\n<li>计算依存树最短依赖路径 $DP$ (词序列)</li>\n<li>计算依存树任意词对间最长路径长度 $T$</li>\n<li>$ syn_t = T - minLength(w_t, DP) $  ,<br>其中$minLength(w_t, DP)$表示计算$w_t$与最短依存路径$DP$上某一单词在依存树上的路径长度的最短长度</li>\n</ol>\n<blockquote>\n<p>经过上述计算，位于最短依存路径DP上的单词的重要性得分均为T, 而其他单词，距离DP越远得分越低。</p>\n<p>该syntax-based score可以看作是原始依存树的泛化（relaxd）版，可以避免模型对训练数据语法结构的<strong>过拟合</strong></p>\n</blockquote>\n<p>Syntax-Model Consistency的思路可以理解为：</p>\n<blockquote>\n<p>利用syntax-based score为model-based score提供监督信号，通过KL散度定义loss</p>\n</blockquote>\n<p>计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\\overline{mod}_1, \\overline{mod}_2, ..., \\overline{mod}_N = softmax(mod_1, mod_2,...,mod_N)</script><script type=\"math/tex; mode=display\">\\overline{syn}_1, \\overline{syn}_2, ..., \\overline{syn}_N = softmax(syn_1, syn_2,...,syn_N)</script><script type=\"math/tex; mode=display\">L_{importance} = - \\sum \\nolimits_i \\overline{mod}_i \\log \\frac {\\overline{mod}_i} {\\overline{syn}_i}</script><h2 id=\"Sentence-Dependency-Path-Similarity\"><a href=\"#Sentence-Dependency-Path-Similarity\" class=\"headerlink\" title=\"Sentence-Dependency Path Similarity\"></a>Sentence-Dependency Path Similarity</h2><blockquote>\n<p>最大化<strong>基于句子整体的特征向量</strong>和<strong>基于最短依存路径的特征向量</strong>的相似度</p>\n</blockquote>\n<ul>\n<li>首先划定两个单词的序列：整个句子词序列、最短依存路径词序列</li>\n<li>max-pooling模型CEON-LSTM的隐状态序列$h = h_1,h_2,…,h_N$的上述单词序列对应的隐状态序列</li>\n</ul>\n<p>首先计算句子$X$和最短依存路径$DP$的特征向量表示$R_X$、$R_{DP}$</p>\n<script type=\"math/tex; mode=display\">R_X = MaxPooling_{x_i \\in X}(h_i)</script><script type=\"math/tex; mode=display\">R_{DP} = MaxPooling_{x_i \\in DP}(h_i)</script><p>定义损失函数：</p>\n<script type=\"math/tex; mode=display\">L_{path} = 1 - \\cos (R_X, R_{DP}) ,其中\\cos表示余弦相似度</script><h2 id=\"Output-amp-Loss\"><a href=\"#Output-amp-Loss\" class=\"headerlink\" title=\"Output &amp; Loss\"></a>Output &amp; Loss</h2><p>用于RE预测的全部特征向量为：</p>\n<script type=\"math/tex; mode=display\">V = [x_s, x_o, h_s, h_o, R_X], s和o为主客两个实体的索引</script><script type=\"math/tex; mode=display\">output= P(.| X, x_s, x_o) = softmax(W_{output} V + b_{output})</script><script type=\"math/tex; mode=display\">L_{label} = - \\log P(r|X, x_s, x_o), r是最适关系标签,即真实标签</script><p>损失函数定义：</p>\n<script type=\"math/tex; mode=display\">L = L_{label} + \\alpha L_{importance} + \\beta L_{path}</script><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.aclweb.org/anthology/2020.acl-main.715/\" target=\"_blank\" rel=\"noopener\">[1].Exploiting the Syntax-Model Consistency for Neural Relation Extraction</a></p>\n<p><a href=\"http://hanrd.tech/posts/20200830a/\">[2].ORDERED NEURONS:INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS</a></p>\n"},{"title":"ACL 2020 -- Relation Extraction with Explanation","date":"2020-09-05T03:04:15.000Z","abbrlink":"20200905","_content":"\n# 摘要\n\n> 最近远程监督关系抽取的NRE模型都是针对每个分包bag，通过学习句子的重要性权重来减轻不相关句子的影响。 \n> 目前为止，努力的重点是**提高抽取的准确性**，但对模型的**解释性知之甚少**。\n\n> 本文标注了一个带有**基本事实句子级解释**的测试集，以评估关系提取模型提供的可解释性。 \n> 实验证明，用细粒度实体类型（entity type）替换句子中的实体不仅提高了提取的准确性，而且改善了可解释性。 \n> 本文还提出**自动生成“干扰”句子，对bag数据增强，并训练模型忽略这些“干扰”句子。 \n> 在FB-NYT数据集上，本文取得了SOTA性能，同时提高了模型可解释性。\n\n# 引言\n\n远程监督关系抽取降噪研究：\n\n* 基于attention的模型\n* 利用附加资源（additional resources）的模型\n* 利用监督数据的模型\n\n> 现有方法，关注于提高模型的准确率（accuracy），而对于模型是因为**正确的推理**还是**某些不相关的偏置/偏见**而正确分类知之甚少。\n\n# Baseline Models\n\n## DirectSup\n\n给定一个分包bag，DirectSup使用具有不同过滤器大小的CNN对每个句子进行编码。\n连接具有不同滤波器大小的CNN的输出，以产生句子的编码。\n\n\n## CNNs+ATT\n","source":"_posts/ACL-2020-Relation-Extraction-with-Explanation.md","raw":"---\ntitle: ACL 2020 -- Relation Extraction with Explanation\ndate: 2020-09-05 11:04:15\ntags: \n\t- ACL 2020\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- ACL 2020\nabbrlink: '20200905'\n---\n\n# 摘要\n\n> 最近远程监督关系抽取的NRE模型都是针对每个分包bag，通过学习句子的重要性权重来减轻不相关句子的影响。 \n> 目前为止，努力的重点是**提高抽取的准确性**，但对模型的**解释性知之甚少**。\n\n> 本文标注了一个带有**基本事实句子级解释**的测试集，以评估关系提取模型提供的可解释性。 \n> 实验证明，用细粒度实体类型（entity type）替换句子中的实体不仅提高了提取的准确性，而且改善了可解释性。 \n> 本文还提出**自动生成“干扰”句子，对bag数据增强，并训练模型忽略这些“干扰”句子。 \n> 在FB-NYT数据集上，本文取得了SOTA性能，同时提高了模型可解释性。\n\n# 引言\n\n远程监督关系抽取降噪研究：\n\n* 基于attention的模型\n* 利用附加资源（additional resources）的模型\n* 利用监督数据的模型\n\n> 现有方法，关注于提高模型的准确率（accuracy），而对于模型是因为**正确的推理**还是**某些不相关的偏置/偏见**而正确分类知之甚少。\n\n# Baseline Models\n\n## DirectSup\n\n给定一个分包bag，DirectSup使用具有不同过滤器大小的CNN对每个句子进行编码。\n连接具有不同滤波器大小的CNN的输出，以产生句子的编码。\n\n\n## CNNs+ATT\n","slug":"ACL-2020-Relation-Extraction-with-Explanation","published":1,"updated":"2020-09-06T09:23:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mo0009dgtqg3r63nt4","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><blockquote>\n<p>最近远程监督关系抽取的NRE模型都是针对每个分包bag，通过学习句子的重要性权重来减轻不相关句子的影响。<br>目前为止，努力的重点是<strong>提高抽取的准确性</strong>，但对模型的<strong>解释性知之甚少</strong>。</p>\n<p>本文标注了一个带有<strong>基本事实句子级解释</strong>的测试集，以评估关系提取模型提供的可解释性。<br>实验证明，用细粒度实体类型（entity type）替换句子中的实体不仅提高了提取的准确性，而且改善了可解释性。<br>本文还提出**自动生成“干扰”句子，对bag数据增强，并训练模型忽略这些“干扰”句子。<br>在FB-NYT数据集上，本文取得了SOTA性能，同时提高了模型可解释性。</p>\n</blockquote>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>远程监督关系抽取降噪研究：</p>\n<ul>\n<li>基于attention的模型</li>\n<li>利用附加资源（additional resources）的模型</li>\n<li>利用监督数据的模型</li>\n</ul>\n<blockquote>\n<p>现有方法，关注于提高模型的准确率（accuracy），而对于模型是因为<strong>正确的推理</strong>还是<strong>某些不相关的偏置/偏见</strong>而正确分类知之甚少。</p>\n</blockquote>\n<h1 id=\"Baseline-Models\"><a href=\"#Baseline-Models\" class=\"headerlink\" title=\"Baseline Models\"></a>Baseline Models</h1><h2 id=\"DirectSup\"><a href=\"#DirectSup\" class=\"headerlink\" title=\"DirectSup\"></a>DirectSup</h2><p>给定一个分包bag，DirectSup使用具有不同过滤器大小的CNN对每个句子进行编码。<br>连接具有不同滤波器大小的CNN的输出，以产生句子的编码。</p>\n<h2 id=\"CNNs-ATT\"><a href=\"#CNNs-ATT\" class=\"headerlink\" title=\"CNNs+ATT\"></a>CNNs+ATT</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><blockquote>\n<p>最近远程监督关系抽取的NRE模型都是针对每个分包bag，通过学习句子的重要性权重来减轻不相关句子的影响。<br>目前为止，努力的重点是<strong>提高抽取的准确性</strong>，但对模型的<strong>解释性知之甚少</strong>。</p>\n<p>本文标注了一个带有<strong>基本事实句子级解释</strong>的测试集，以评估关系提取模型提供的可解释性。<br>实验证明，用细粒度实体类型（entity type）替换句子中的实体不仅提高了提取的准确性，而且改善了可解释性。<br>本文还提出**自动生成“干扰”句子，对bag数据增强，并训练模型忽略这些“干扰”句子。<br>在FB-NYT数据集上，本文取得了SOTA性能，同时提高了模型可解释性。</p>\n</blockquote>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>远程监督关系抽取降噪研究：</p>\n<ul>\n<li>基于attention的模型</li>\n<li>利用附加资源（additional resources）的模型</li>\n<li>利用监督数据的模型</li>\n</ul>\n<blockquote>\n<p>现有方法，关注于提高模型的准确率（accuracy），而对于模型是因为<strong>正确的推理</strong>还是<strong>某些不相关的偏置/偏见</strong>而正确分类知之甚少。</p>\n</blockquote>\n<h1 id=\"Baseline-Models\"><a href=\"#Baseline-Models\" class=\"headerlink\" title=\"Baseline Models\"></a>Baseline Models</h1><h2 id=\"DirectSup\"><a href=\"#DirectSup\" class=\"headerlink\" title=\"DirectSup\"></a>DirectSup</h2><p>给定一个分包bag，DirectSup使用具有不同过滤器大小的CNN对每个句子进行编码。<br>连接具有不同滤波器大小的CNN的输出，以产生句子的编码。</p>\n<h2 id=\"CNNs-ATT\"><a href=\"#CNNs-ATT\" class=\"headerlink\" title=\"CNNs+ATT\"></a>CNNs+ATT</h2>"},{"title":"COLING 2020 -- Improving Long-Tail Relation Extraction with Collaborating Relation-Augmented Attention","date":"2020-11-01T08:41:07.000Z","abbrlink":"20201101","_content":"\n# 摘要\n\n在关系抽取中，远程监督引起两个主要挑战：\n\n* 错误标签\n* 长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）\n\n最近的工作通过“**多实例学习的选择性注意力**”减轻错误标签影响，\n\n但即使引入**关系的层次结构**来共享知识，也不能很好地处理长尾关系。\n\n为解决上述问题，本文提出一种新的神经网络，即协作关系增强的注意力（Collaborating Relation-augmented Attention，CoRA）。\n\n> 具体如下：\n>\n> * 首先提出**关系增强注意力网络**(relation-augmented attention network)，作为 base model。\n>   * bag级别的sentence-to-relation注意力机制，最大程度减少错误标记的影响。\n> * 基于 base model，引入**在关系的层次结构中，各关系间共享的协同特征**（collaborating relation features）\n>   * 促进关系增强过程\n>   * 平衡长尾关系的训练数据\n\n主要训练目标: \n* 预测句子bag的关系\n\n辅助目标：\n* 指导关系增强过程，以获得更准确的bag级特征表示\n\nCoRA在数据集NYT上进行的实验在 $Precision@N$，$AUC$ 和  $Hits@K$ 指标上均达到SOTA。\n\n对比实验的进一步分析也证明了CoRA在处理长尾关系方面的卓越能力。\n\n# 引言\n\n在关系抽取中，远程监督引起两个主要挑战：\n\n* 错误标签\n* 长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）\n\n1. 对于错误标签问题：\n\n> 最近的工作大多是通过“**多实例学习的选择性注意力**”减轻错误标签影响 \n\n2. 对于long-tail问题：\n\n\n\n","source":"_posts/COLING-2020-Improving-Long-Tail-Relation-Extraction-with-Collaborating-Relation-Augmented-Attention.md","raw":"---\ntitle: COLING 2020 -- Improving Long-Tail Relation Extraction with Collaborating Relation-Augmented Attention\ndate: 2020-11-01 16:41:07\ntags: \n\t- COLING 2020\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- COLING 2020\nabbrlink: '20201101'\n---\n\n# 摘要\n\n在关系抽取中，远程监督引起两个主要挑战：\n\n* 错误标签\n* 长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）\n\n最近的工作通过“**多实例学习的选择性注意力**”减轻错误标签影响，\n\n但即使引入**关系的层次结构**来共享知识，也不能很好地处理长尾关系。\n\n为解决上述问题，本文提出一种新的神经网络，即协作关系增强的注意力（Collaborating Relation-augmented Attention，CoRA）。\n\n> 具体如下：\n>\n> * 首先提出**关系增强注意力网络**(relation-augmented attention network)，作为 base model。\n>   * bag级别的sentence-to-relation注意力机制，最大程度减少错误标记的影响。\n> * 基于 base model，引入**在关系的层次结构中，各关系间共享的协同特征**（collaborating relation features）\n>   * 促进关系增强过程\n>   * 平衡长尾关系的训练数据\n\n主要训练目标: \n* 预测句子bag的关系\n\n辅助目标：\n* 指导关系增强过程，以获得更准确的bag级特征表示\n\nCoRA在数据集NYT上进行的实验在 $Precision@N$，$AUC$ 和  $Hits@K$ 指标上均达到SOTA。\n\n对比实验的进一步分析也证明了CoRA在处理长尾关系方面的卓越能力。\n\n# 引言\n\n在关系抽取中，远程监督引起两个主要挑战：\n\n* 错误标签\n* 长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）\n\n1. 对于错误标签问题：\n\n> 最近的工作大多是通过“**多实例学习的选择性注意力**”减轻错误标签影响 \n\n2. 对于long-tail问题：\n\n\n\n","slug":"COLING-2020-Improving-Long-Tail-Relation-Extraction-with-Collaborating-Relation-Augmented-Attention","published":1,"updated":"2020-11-01T12:44:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mq000ddgtq3w3z9519","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>在关系抽取中，远程监督引起两个主要挑战：</p>\n<ul>\n<li>错误标签</li>\n<li>长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）</li>\n</ul>\n<p>最近的工作通过“<strong>多实例学习的选择性注意力</strong>”减轻错误标签影响，</p>\n<p>但即使引入<strong>关系的层次结构</strong>来共享知识，也不能很好地处理长尾关系。</p>\n<p>为解决上述问题，本文提出一种新的神经网络，即协作关系增强的注意力（Collaborating Relation-augmented Attention，CoRA）。</p>\n<blockquote>\n<p>具体如下：</p>\n<ul>\n<li>首先提出<strong>关系增强注意力网络</strong>(relation-augmented attention network)，作为 base model。<ul>\n<li>bag级别的sentence-to-relation注意力机制，最大程度减少错误标记的影响。</li>\n</ul>\n</li>\n<li>基于 base model，引入<strong>在关系的层次结构中，各关系间共享的协同特征</strong>（collaborating relation features）<ul>\n<li>促进关系增强过程</li>\n<li>平衡长尾关系的训练数据</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>主要训练目标: </p>\n<ul>\n<li>预测句子bag的关系</li>\n</ul>\n<p>辅助目标：</p>\n<ul>\n<li>指导关系增强过程，以获得更准确的bag级特征表示</li>\n</ul>\n<p>CoRA在数据集NYT上进行的实验在 $Precision@N$，$AUC$ 和  $Hits@K$ 指标上均达到SOTA。</p>\n<p>对比实验的进一步分析也证明了CoRA在处理长尾关系方面的卓越能力。</p>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在关系抽取中，远程监督引起两个主要挑战：</p>\n<ul>\n<li>错误标签</li>\n<li>长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）</li>\n</ul>\n<ol>\n<li>对于错误标签问题：</li>\n</ol>\n<blockquote>\n<p>最近的工作大多是通过“<strong>多实例学习的选择性注意力</strong>”减轻错误标签影响 </p>\n</blockquote>\n<ol>\n<li>对于long-tail问题：</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>在关系抽取中，远程监督引起两个主要挑战：</p>\n<ul>\n<li>错误标签</li>\n<li>长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）</li>\n</ul>\n<p>最近的工作通过“<strong>多实例学习的选择性注意力</strong>”减轻错误标签影响，</p>\n<p>但即使引入<strong>关系的层次结构</strong>来共享知识，也不能很好地处理长尾关系。</p>\n<p>为解决上述问题，本文提出一种新的神经网络，即协作关系增强的注意力（Collaborating Relation-augmented Attention，CoRA）。</p>\n<blockquote>\n<p>具体如下：</p>\n<ul>\n<li>首先提出<strong>关系增强注意力网络</strong>(relation-augmented attention network)，作为 base model。<ul>\n<li>bag级别的sentence-to-relation注意力机制，最大程度减少错误标记的影响。</li>\n</ul>\n</li>\n<li>基于 base model，引入<strong>在关系的层次结构中，各关系间共享的协同特征</strong>（collaborating relation features）<ul>\n<li>促进关系增强过程</li>\n<li>平衡长尾关系的训练数据</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>主要训练目标: </p>\n<ul>\n<li>预测句子bag的关系</li>\n</ul>\n<p>辅助目标：</p>\n<ul>\n<li>指导关系增强过程，以获得更准确的bag级特征表示</li>\n</ul>\n<p>CoRA在数据集NYT上进行的实验在 $Precision@N$，$AUC$ 和  $Hits@K$ 指标上均达到SOTA。</p>\n<p>对比实验的进一步分析也证明了CoRA在处理长尾关系方面的卓越能力。</p>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在关系抽取中，远程监督引起两个主要挑战：</p>\n<ul>\n<li>错误标签</li>\n<li>长尾关系（NYT数据集中，41个关系类别（共53个）只有不到1000个训练样例）</li>\n</ul>\n<ol>\n<li>对于错误标签问题：</li>\n</ol>\n<blockquote>\n<p>最近的工作大多是通过“<strong>多实例学习的选择性注意力</strong>”减轻错误标签影响 </p>\n</blockquote>\n<ol>\n<li>对于long-tail问题：</li>\n</ol>\n"},{"title":"ICASSP 2016 -- Training deep neural-networks based on unreliable labels","date":"2020-10-22T02:38:58.000Z","abbrlink":"20201022","_content":"\n# 摘要\n\n本文拟解决基于 \"带有不可靠标签的数据\" 训练神经网络的问题。\n\n> 基于假设**观察到的标签是真实标签的带噪观测结果**，从而引入一个额外的噪音层，模拟噪音分布对真实标签的影响。\n\n* 提出一种同时学习**神经网络参数**和**噪声分布**的方法\n* 在几个标准分类任务上的对比实验说明了该方法对性能的提升。\n* 在某些情况下，即使“人工手动标注并假定没有错误的数据”，该方法也有所帮助。\n\n# 模型\n\n> 假设在训练过程中不能直接观察到正确标签y，只能观察到带噪标签z\n\n噪音分布可以看作关系标签间的转移概率 \n\n$\\theta (i,j) = p(z=j|y=i) $\n\n观测的带噪标签 z 的概率：\n\n$ p(z=j|x;\\omega, \\theta) = \\sum\\limits_{i=1}^k p(z=j|y=i; \\theta) p(y=i|x;\\omega), $\n\n$\\omega是参数集合, x是输入特征（可以是句子、手工创建的特征等）, k是关系的个数$\n\n模型结构图如下：\n\n![model](ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/model_train.jpg)\n\n对于输入特征 $x$ , 编码后的特征向量表示为 $h = h(x)$,\n\n$p(y=i|x;\\omega) = \\frac {\\exp(u_i^\\top h)}{\\sum\\limits_{j=1}^k \\exp(u_j^\\top h)}, i=1,2,...,k$ \n\n$u$ 是参数\n\n## 训练阶段\n\n> 给定 n 个输入特征 $x_1,...,x_n$, 相对应的观测带噪标签 $z_1,..., z_n$ , 真实标签 $y_1,...,y_n$\n\n对数极大似然估计：\n\n$L(\\omega, \\theta) = \\sum\\limits_{t=1}^n \\log (\\sum\\limits_{i=1}^k p(z_t|y_t=i;\\theta) p(y_t=i|x_t;\\omega))$\n\n目标是：最大化该似然函数，找出参数 $\\omega$ 、噪音分布 $\\theta$\n\n由于\n\n## \nImproving Long-Tail Relation Extraction with Collaborating Relation-Augmented Attention\n\n\n\n","source":"_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels.md","raw":"---\ntitle: ICASSP 2016 -- Training deep neural-networks based on unreliable labels\ndate: 2020-10-22 10:38:58\ntags: \n\t- ICASSP 2016\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- ICASSP 2016\nabbrlink: '20201022'\n---\n\n# 摘要\n\n本文拟解决基于 \"带有不可靠标签的数据\" 训练神经网络的问题。\n\n> 基于假设**观察到的标签是真实标签的带噪观测结果**，从而引入一个额外的噪音层，模拟噪音分布对真实标签的影响。\n\n* 提出一种同时学习**神经网络参数**和**噪声分布**的方法\n* 在几个标准分类任务上的对比实验说明了该方法对性能的提升。\n* 在某些情况下，即使“人工手动标注并假定没有错误的数据”，该方法也有所帮助。\n\n# 模型\n\n> 假设在训练过程中不能直接观察到正确标签y，只能观察到带噪标签z\n\n噪音分布可以看作关系标签间的转移概率 \n\n$\\theta (i,j) = p(z=j|y=i) $\n\n观测的带噪标签 z 的概率：\n\n$ p(z=j|x;\\omega, \\theta) = \\sum\\limits_{i=1}^k p(z=j|y=i; \\theta) p(y=i|x;\\omega), $\n\n$\\omega是参数集合, x是输入特征（可以是句子、手工创建的特征等）, k是关系的个数$\n\n模型结构图如下：\n\n![model](ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/model_train.jpg)\n\n对于输入特征 $x$ , 编码后的特征向量表示为 $h = h(x)$,\n\n$p(y=i|x;\\omega) = \\frac {\\exp(u_i^\\top h)}{\\sum\\limits_{j=1}^k \\exp(u_j^\\top h)}, i=1,2,...,k$ \n\n$u$ 是参数\n\n## 训练阶段\n\n> 给定 n 个输入特征 $x_1,...,x_n$, 相对应的观测带噪标签 $z_1,..., z_n$ , 真实标签 $y_1,...,y_n$\n\n对数极大似然估计：\n\n$L(\\omega, \\theta) = \\sum\\limits_{t=1}^n \\log (\\sum\\limits_{i=1}^k p(z_t|y_t=i;\\theta) p(y_t=i|x_t;\\omega))$\n\n目标是：最大化该似然函数，找出参数 $\\omega$ 、噪音分布 $\\theta$\n\n由于\n\n## \nImproving Long-Tail Relation Extraction with Collaborating Relation-Augmented Attention\n\n\n\n","slug":"ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels","published":1,"updated":"2020-11-01T08:40:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mr000edgtq3rqp6d2f","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>本文拟解决基于 “带有不可靠标签的数据” 训练神经网络的问题。</p>\n<blockquote>\n<p>基于假设<strong>观察到的标签是真实标签的带噪观测结果</strong>，从而引入一个额外的噪音层，模拟噪音分布对真实标签的影响。</p>\n</blockquote>\n<ul>\n<li>提出一种同时学习<strong>神经网络参数</strong>和<strong>噪声分布</strong>的方法</li>\n<li>在几个标准分类任务上的对比实验说明了该方法对性能的提升。</li>\n<li>在某些情况下，即使“人工手动标注并假定没有错误的数据”，该方法也有所帮助。</li>\n</ul>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><blockquote>\n<p>假设在训练过程中不能直接观察到正确标签y，只能观察到带噪标签z</p>\n</blockquote>\n<p>噪音分布可以看作关系标签间的转移概率 </p>\n<p>$\\theta (i,j) = p(z=j|y=i) $</p>\n<p>观测的带噪标签 z 的概率：</p>\n<p>$ p(z=j|x;\\omega, \\theta) = \\sum\\limits_{i=1}^k p(z=j|y=i; \\theta) p(y=i|x;\\omega), $</p>\n<p>$\\omega是参数集合, x是输入特征（可以是句子、手工创建的特征等）, k是关系的个数$</p>\n<p>模型结构图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201022/model_train.jpg\" alt=\"model\" title=\"\">\n                </div>\n                <div class=\"image-caption\">model</div>\n            </figure>\n<p>对于输入特征 $x$ , 编码后的特征向量表示为 $h = h(x)$,</p>\n<p>$p(y=i|x;\\omega) = \\frac {\\exp(u_i^\\top h)}{\\sum\\limits_{j=1}^k \\exp(u_j^\\top h)}, i=1,2,…,k$ </p>\n<p>$u$ 是参数</p>\n<h2 id=\"训练阶段\"><a href=\"#训练阶段\" class=\"headerlink\" title=\"训练阶段\"></a>训练阶段</h2><blockquote>\n<p>给定 n 个输入特征 $x_1,…,x_n$, 相对应的观测带噪标签 $z_1,…, z_n$ , 真实标签 $y_1,…,y_n$</p>\n</blockquote>\n<p>对数极大似然估计：</p>\n<p>$L(\\omega, \\theta) = \\sum\\limits_{t=1}^n \\log (\\sum\\limits_{i=1}^k p(z_t|y_t=i;\\theta) p(y_t=i|x_t;\\omega))$</p>\n<p>目标是：最大化该似然函数，找出参数 $\\omega$ 、噪音分布 $\\theta$</p>\n<p>由于</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><p>Improving Long-Tail Relation Extraction with Collaborating Relation-Augmented Attention</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>本文拟解决基于 “带有不可靠标签的数据” 训练神经网络的问题。</p>\n<blockquote>\n<p>基于假设<strong>观察到的标签是真实标签的带噪观测结果</strong>，从而引入一个额外的噪音层，模拟噪音分布对真实标签的影响。</p>\n</blockquote>\n<ul>\n<li>提出一种同时学习<strong>神经网络参数</strong>和<strong>噪声分布</strong>的方法</li>\n<li>在几个标准分类任务上的对比实验说明了该方法对性能的提升。</li>\n<li>在某些情况下，即使“人工手动标注并假定没有错误的数据”，该方法也有所帮助。</li>\n</ul>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><blockquote>\n<p>假设在训练过程中不能直接观察到正确标签y，只能观察到带噪标签z</p>\n</blockquote>\n<p>噪音分布可以看作关系标签间的转移概率 </p>\n<p>$\\theta (i,j) = p(z=j|y=i) $</p>\n<p>观测的带噪标签 z 的概率：</p>\n<p>$ p(z=j|x;\\omega, \\theta) = \\sum\\limits_{i=1}^k p(z=j|y=i; \\theta) p(y=i|x;\\omega), $</p>\n<p>$\\omega是参数集合, x是输入特征（可以是句子、手工创建的特征等）, k是关系的个数$</p>\n<p>模型结构图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201022/model_train.jpg\" alt=\"model\" title>\n                </div>\n                <div class=\"image-caption\">model</div>\n            </figure>\n<p>对于输入特征 $x$ , 编码后的特征向量表示为 $h = h(x)$,</p>\n<p>$p(y=i|x;\\omega) = \\frac {\\exp(u_i^\\top h)}{\\sum\\limits_{j=1}^k \\exp(u_j^\\top h)}, i=1,2,…,k$ </p>\n<p>$u$ 是参数</p>\n<h2 id=\"训练阶段\"><a href=\"#训练阶段\" class=\"headerlink\" title=\"训练阶段\"></a>训练阶段</h2><blockquote>\n<p>给定 n 个输入特征 $x_1,…,x_n$, 相对应的观测带噪标签 $z_1,…, z_n$ , 真实标签 $y_1,…,y_n$</p>\n</blockquote>\n<p>对数极大似然估计：</p>\n<p>$L(\\omega, \\theta) = \\sum\\limits_{t=1}^n \\log (\\sum\\limits_{i=1}^k p(z_t|y_t=i;\\theta) p(y_t=i|x_t;\\omega))$</p>\n<p>目标是：最大化该似然函数，找出参数 $\\omega$ 、噪音分布 $\\theta$</p>\n<p>由于</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><p>Improving Long-Tail Relation Extraction with Collaborating Relation-Augmented Attention</p>\n"},{"title":"Kubernetes配置指南","date":"2020-07-17T12:27:04.000Z","abbrlink":"k8sConfig","_content":"\n# Kubernetes集群安全设置\n\n\n","source":"_posts/Kubernetes配置指南.md","raw":"---\ntitle: Kubernetes配置指南\ndate: 2020-07-17 20:27:04\nabbrlink: k8sConfig\ncategories: \n\t- Kubernetes\n\t- K8s\ntags: \n\t- Kubernetes配置\n\t- K8s配置\n---\n\n# Kubernetes集群安全设置\n\n\n","slug":"Kubernetes配置指南","published":1,"updated":"2020-07-17T12:31:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mu000idgtq2cedhd63","content":"<h1 id=\"Kubernetes集群安全设置\"><a href=\"#Kubernetes集群安全设置\" class=\"headerlink\" title=\"Kubernetes集群安全设置\"></a>Kubernetes集群安全设置</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Kubernetes集群安全设置\"><a href=\"#Kubernetes集群安全设置\" class=\"headerlink\" title=\"Kubernetes集群安全设置\"></a>Kubernetes集群安全设置</h1>"},{"title":"ICLR 2019 -- ORDERED NEURONS:INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS","date":"2020-08-30T08:28:30.000Z","abbrlink":"20200830a","mathjax":true,"_content":"\n# 拟解决问题\n\n语言虽然看起来是一个序列，实际上内部是有复杂的层次结构的，这也是NLP的难点所在。复杂的层次结构，意味着序列即使看起来相同，也可能因为内部层次结构的不同而有语义的差别。\n\n在斯坦福CS224n上提到了这样的一个例子：\n\n> The police killed the man with a knife.\n\n这个句子，可以有两种理解：\n\n* 警察把那个带刀的人干掉了\n* 警察用刀干掉了那个人\n\n上面两种解释对应的句法树分别是这样的：\n\n![句法树](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/police-tree.jpg)\n\n\n> 序列看起来一样，但是由于内部的层级结构不一样会导致不同的语义理解\n\n当用LSTM为语言序列编码Encode的时候，由于LSTM单纯认为语言是一个序列，忽略了语言内部的语法树的层级结构，因此其无法解决上面**相同序列，不同语义**的问题。\n\n\n# 出发点\n本文提出ON-LSTM(Ordered Neurons - LSTM)，通过重新设计LSTM递归的cell的**cell states的更新方式及策略**，实现将语法树的层级结构融合进LSTM编码器中，解决上述问题。\n\n# 回顾LSTM\n\nLSTM主要由三个特殊的门（gate）结构组成：遗忘门、输入门、输出门\n\n具体的公式如下：\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-formula.jpg)\n\n示意图如下：\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-img.png)\n\n# ON-LSTM\n\n## 从LSTM开始\n\n论文中一直是从神经元排序的角度解释的，对我个人来说，很难理解，故下文按照cell state的角度理解。\n\nLSTM的**核心**就是**cell state**：信息在cell state这个传送带上流动，伴随着一些简单的线性变换，乘和加，分别由“遗忘门”和“输入门”来控制cell state的信息更新。\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-state-flow.jpg)\n\n这样存在一个问题：\n**每次更新，cell state这个向量的每一维都会更新**\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-update.JPG)\n\n信息流就是存在于这个cell state中，如果希望模型可以刻画出语言的结构信息，也就意味着这个cell state中要隐含着层次结构的信息。\n\n所以作者希望，能够让这个cell state的不同维度，对应到语言的不同层级上，让不同的层级使用不一样的方式进行更新，具体来说就是层次越高的更新越少。这样的话，cell state就包含了层次信息了。\n\n**作者的例子：**\n\n假设我们有一个很简单的句子，三个词组成[x1,x2,x3]，有三个层次，用下图的最左边的图表示，分别是句子（S）、短语（NP，VP）、词（N，V）。**我们希望cell state中也可以有对应的三个层次，层次就体现在不同的更新频率上。**\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/eg1.JPG)\n\n层次越高的，自然其信息应该保留的时间更久，所以其更新频率应该越低。上图的最右边是三个词分别对应的cell states。颜色越深代表更新频率越高。\n\n* 当读到第一个词x1的时候，这个时候是new S，new NP，new word，所以三个层次都应该更新；\n* 当读到第二个词x2的时候，这个时候是new VP，new word，所以下面两个层次应该更新；\n* 当读到第三个词x3的时候，这个时候只是new word，所以只是最下面的层次应该更新；\n这样，语言的层次就和cell states的不同区间对应上的。\n\n> 这样，就相当于给**cell states**加了一个顺序，从某种意义上讲也相当于是给LSTM的神经元加了顺序，因此作者称这种结构是**Ordered-Neurons**，对应的LSTM称为**ON-LSTM**。所以并不是真的给神经元排序。\n\n接下来的问题：\n\n上面给cell states这样分区间，是因为我们提前知道了句子的结构，但我们真正使用LSTM进行建模、训练的时候，是不知道语言的真实层次的，除非你先把每个句子都解析成语法树，再显式加入到LSTM中的，但是这种方法不仅开销大，而且不一定可靠，所以我们**需要设计一种结构，让模型可以学习到如何给cell state去分区**。\n\n## ON-LSTM具体设计\n\n为了实现区间的划分，模型用到了两个整数 $l_{his}$ 和 $l_{now}$，它们分别用来表示**历史信息的最低等级** 和 **当前信息的最高等级**\n\n* $l_{his}$表示cell state中高于该等级的维度需要保留历史信息$c_{t-1}$，对应于**低更新频率**\n* $l_{now}$表示cell state中低于该等级的维度需要补充更新输入信息$\\hat{c_t}$，对应于**高更新频率**\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/level-his-now.jpg)\n\n总体上，就包含以下两种情况：\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/two-case.jpg)\n\n* $l_{his} < l_{now}$ ,有重叠交汇部分：\n\t* **交汇部分**，采用原来LSTM更新方式，融合历史信息和当前输入信息\n\t* **低于$l_{his}$的**，完全更新为新输入的信息\n\t* **高于$l_{now}$的**，完全保留历史信息\n\n* $l_{his} > l_{now}$ ,无重叠交汇部分：\n\t* **无交汇部分**，全部设置为0\n\t* **低于$l_{now}$的**，完全更新为新输入的信息\n\t* **高于$l_{his}$的**，完全保留历史信息\n\n> 其实该模型认为高层次的语法信息主要是来自于历史信息，而低层次的主要来自当前输入信息，而这也比较符合人们的直观印象，对于一个新的输入，它对于语法信息的影响往往局限于一个较低的层次，高层次的信息（如句子或者短语信息）仍然来自于历史信息，只有当一个句子或者短语完结的时候，历史信息的影响变小，这时新的输入才有可能影响较高语法层次的信息。而这样也就使得高语法层次的信息的更新频率较低，大多时候是保持不变，而低语法层次的信息则随着当前的输入一直变化。\n\n## ON-LSTM实现过程\n\n把$l_{his}、 l_{now}$转化为向量\n$$L_k = [0,0,...,1,0,...,0] ,其中只有第k位为1$$\n\n定义累加函数\n$$cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]$$\n\n因此，\n* $cumsum(L_{l_{his}})=[0,...,0,1,1,...,1]$就表示出了需要保留历史信息的维度（1段）\n* $1-cumsum(L_{l_{now}})=[1,...,1,0,0,...,0]$就表示出了需要更新保存新输入信息的维度（1段）\n\n由于，上面这种分为0段和1段的形式，都是整数，这样函数不可导，无法训练，所以需要做一下软化，即用softmax函数处理一下。\n\n定义 $cummax(X) = cumsum(softmax(X))$\n\n综上，引入两个门（gate）结构：master forget（$\\tilde{f_t}$）、master input（$\\tilde{i_t}$）。\n\n具体计算公式如下：\n\n$$ \\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}}) $$\n\n$$ \\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}}) $$\n\n$$\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)$$\n\n$$ c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t} $$\n\n整体计算流程如下：\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/on-lstm-img.jpg)\n\n> 通常隐层神经元的数目都比较大，而实际中语法的层数远远达不到这个数字，因此对于$\\tilde{f_t}$和$\\tilde{i_t}$而言，其实不需要那么多的维数，这样会导致需要学习的参数量过多，但是 $\\circ$ 要求它们的维数必须这么大，因此我们可以构造一个维数为$D_m = D / c$ 的向量，其中D为隐层神经元的维数，然后在将其扩充为D维向量，例如D=6，c=3，先构造一个向量[0.2, 0.8] ，然后将其扩充为 [0.2, 0.2, 0.2, 0.8, 0.8, 0.8] 。\n\n# 总结\n\n该ON-LSTM模型从语法结构的角度出发，根据语法层次对cell states进行有序排列，再按照语法层次的不同实行不同的更新规则，从而实现对于较高语法层次信息的保留，这样对于语言模型等任务无疑是很有利的。另外，利用该模型还能够较好地从句子中无监督地提取出语法结构，而这也是该模型的一大亮点。\n\n# 参考资料\n\n[1] [ORDERED NEURONS: INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS](https://arxiv.org/abs/1810.09536)\n\n[2] [苏剑林. (2019, May 28). ON-LSTM：用有序神经元表达层次结构 [Blog post].](https://kexue.fm/archives/6621) \n\n[3] [有序的神经元——ON-LSTM模型浅析](https://zhuanlan.zhihu.com/p/77086523)\n\n[4] [ON-LSTM：能表示语言层次的LSTM](https://zhuanlan.zhihu.com/p/69314959)\n","source":"_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS.md","raw":"---\ntitle: ICLR 2019 -- ORDERED NEURONS:INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS\ndate: 2020-08-30 16:28:30\ntags: \n\t- ICLR 2019\ncategories: \n\t- ICLR 2019\nabbrlink: '20200830a'\nmathjax: true\n---\n\n# 拟解决问题\n\n语言虽然看起来是一个序列，实际上内部是有复杂的层次结构的，这也是NLP的难点所在。复杂的层次结构，意味着序列即使看起来相同，也可能因为内部层次结构的不同而有语义的差别。\n\n在斯坦福CS224n上提到了这样的一个例子：\n\n> The police killed the man with a knife.\n\n这个句子，可以有两种理解：\n\n* 警察把那个带刀的人干掉了\n* 警察用刀干掉了那个人\n\n上面两种解释对应的句法树分别是这样的：\n\n![句法树](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/police-tree.jpg)\n\n\n> 序列看起来一样，但是由于内部的层级结构不一样会导致不同的语义理解\n\n当用LSTM为语言序列编码Encode的时候，由于LSTM单纯认为语言是一个序列，忽略了语言内部的语法树的层级结构，因此其无法解决上面**相同序列，不同语义**的问题。\n\n\n# 出发点\n本文提出ON-LSTM(Ordered Neurons - LSTM)，通过重新设计LSTM递归的cell的**cell states的更新方式及策略**，实现将语法树的层级结构融合进LSTM编码器中，解决上述问题。\n\n# 回顾LSTM\n\nLSTM主要由三个特殊的门（gate）结构组成：遗忘门、输入门、输出门\n\n具体的公式如下：\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-formula.jpg)\n\n示意图如下：\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-img.png)\n\n# ON-LSTM\n\n## 从LSTM开始\n\n论文中一直是从神经元排序的角度解释的，对我个人来说，很难理解，故下文按照cell state的角度理解。\n\nLSTM的**核心**就是**cell state**：信息在cell state这个传送带上流动，伴随着一些简单的线性变换，乘和加，分别由“遗忘门”和“输入门”来控制cell state的信息更新。\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-state-flow.jpg)\n\n这样存在一个问题：\n**每次更新，cell state这个向量的每一维都会更新**\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-update.JPG)\n\n信息流就是存在于这个cell state中，如果希望模型可以刻画出语言的结构信息，也就意味着这个cell state中要隐含着层次结构的信息。\n\n所以作者希望，能够让这个cell state的不同维度，对应到语言的不同层级上，让不同的层级使用不一样的方式进行更新，具体来说就是层次越高的更新越少。这样的话，cell state就包含了层次信息了。\n\n**作者的例子：**\n\n假设我们有一个很简单的句子，三个词组成[x1,x2,x3]，有三个层次，用下图的最左边的图表示，分别是句子（S）、短语（NP，VP）、词（N，V）。**我们希望cell state中也可以有对应的三个层次，层次就体现在不同的更新频率上。**\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/eg1.JPG)\n\n层次越高的，自然其信息应该保留的时间更久，所以其更新频率应该越低。上图的最右边是三个词分别对应的cell states。颜色越深代表更新频率越高。\n\n* 当读到第一个词x1的时候，这个时候是new S，new NP，new word，所以三个层次都应该更新；\n* 当读到第二个词x2的时候，这个时候是new VP，new word，所以下面两个层次应该更新；\n* 当读到第三个词x3的时候，这个时候只是new word，所以只是最下面的层次应该更新；\n这样，语言的层次就和cell states的不同区间对应上的。\n\n> 这样，就相当于给**cell states**加了一个顺序，从某种意义上讲也相当于是给LSTM的神经元加了顺序，因此作者称这种结构是**Ordered-Neurons**，对应的LSTM称为**ON-LSTM**。所以并不是真的给神经元排序。\n\n接下来的问题：\n\n上面给cell states这样分区间，是因为我们提前知道了句子的结构，但我们真正使用LSTM进行建模、训练的时候，是不知道语言的真实层次的，除非你先把每个句子都解析成语法树，再显式加入到LSTM中的，但是这种方法不仅开销大，而且不一定可靠，所以我们**需要设计一种结构，让模型可以学习到如何给cell state去分区**。\n\n## ON-LSTM具体设计\n\n为了实现区间的划分，模型用到了两个整数 $l_{his}$ 和 $l_{now}$，它们分别用来表示**历史信息的最低等级** 和 **当前信息的最高等级**\n\n* $l_{his}$表示cell state中高于该等级的维度需要保留历史信息$c_{t-1}$，对应于**低更新频率**\n* $l_{now}$表示cell state中低于该等级的维度需要补充更新输入信息$\\hat{c_t}$，对应于**高更新频率**\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/level-his-now.jpg)\n\n总体上，就包含以下两种情况：\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/two-case.jpg)\n\n* $l_{his} < l_{now}$ ,有重叠交汇部分：\n\t* **交汇部分**，采用原来LSTM更新方式，融合历史信息和当前输入信息\n\t* **低于$l_{his}$的**，完全更新为新输入的信息\n\t* **高于$l_{now}$的**，完全保留历史信息\n\n* $l_{his} > l_{now}$ ,无重叠交汇部分：\n\t* **无交汇部分**，全部设置为0\n\t* **低于$l_{now}$的**，完全更新为新输入的信息\n\t* **高于$l_{his}$的**，完全保留历史信息\n\n> 其实该模型认为高层次的语法信息主要是来自于历史信息，而低层次的主要来自当前输入信息，而这也比较符合人们的直观印象，对于一个新的输入，它对于语法信息的影响往往局限于一个较低的层次，高层次的信息（如句子或者短语信息）仍然来自于历史信息，只有当一个句子或者短语完结的时候，历史信息的影响变小，这时新的输入才有可能影响较高语法层次的信息。而这样也就使得高语法层次的信息的更新频率较低，大多时候是保持不变，而低语法层次的信息则随着当前的输入一直变化。\n\n## ON-LSTM实现过程\n\n把$l_{his}、 l_{now}$转化为向量\n$$L_k = [0,0,...,1,0,...,0] ,其中只有第k位为1$$\n\n定义累加函数\n$$cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]$$\n\n因此，\n* $cumsum(L_{l_{his}})=[0,...,0,1,1,...,1]$就表示出了需要保留历史信息的维度（1段）\n* $1-cumsum(L_{l_{now}})=[1,...,1,0,0,...,0]$就表示出了需要更新保存新输入信息的维度（1段）\n\n由于，上面这种分为0段和1段的形式，都是整数，这样函数不可导，无法训练，所以需要做一下软化，即用softmax函数处理一下。\n\n定义 $cummax(X) = cumsum(softmax(X))$\n\n综上，引入两个门（gate）结构：master forget（$\\tilde{f_t}$）、master input（$\\tilde{i_t}$）。\n\n具体计算公式如下：\n\n$$ \\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}}) $$\n\n$$ \\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}}) $$\n\n$$\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)$$\n\n$$ c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t} $$\n\n整体计算流程如下：\n\n![](ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/on-lstm-img.jpg)\n\n> 通常隐层神经元的数目都比较大，而实际中语法的层数远远达不到这个数字，因此对于$\\tilde{f_t}$和$\\tilde{i_t}$而言，其实不需要那么多的维数，这样会导致需要学习的参数量过多，但是 $\\circ$ 要求它们的维数必须这么大，因此我们可以构造一个维数为$D_m = D / c$ 的向量，其中D为隐层神经元的维数，然后在将其扩充为D维向量，例如D=6，c=3，先构造一个向量[0.2, 0.8] ，然后将其扩充为 [0.2, 0.2, 0.2, 0.8, 0.8, 0.8] 。\n\n# 总结\n\n该ON-LSTM模型从语法结构的角度出发，根据语法层次对cell states进行有序排列，再按照语法层次的不同实行不同的更新规则，从而实现对于较高语法层次信息的保留，这样对于语言模型等任务无疑是很有利的。另外，利用该模型还能够较好地从句子中无监督地提取出语法结构，而这也是该模型的一大亮点。\n\n# 参考资料\n\n[1] [ORDERED NEURONS: INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS](https://arxiv.org/abs/1810.09536)\n\n[2] [苏剑林. (2019, May 28). ON-LSTM：用有序神经元表达层次结构 [Blog post].](https://kexue.fm/archives/6621) \n\n[3] [有序的神经元——ON-LSTM模型浅析](https://zhuanlan.zhihu.com/p/77086523)\n\n[4] [ON-LSTM：能表示语言层次的LSTM](https://zhuanlan.zhihu.com/p/69314959)\n","slug":"ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS","published":1,"updated":"2020-09-03T07:50:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mv000jdgtqgwwhexab","content":"<h1 id=\"拟解决问题\"><a href=\"#拟解决问题\" class=\"headerlink\" title=\"拟解决问题\"></a>拟解决问题</h1><p>语言虽然看起来是一个序列，实际上内部是有复杂的层次结构的，这也是NLP的难点所在。复杂的层次结构，意味着序列即使看起来相同，也可能因为内部层次结构的不同而有语义的差别。</p>\n<p>在斯坦福CS224n上提到了这样的一个例子：</p>\n<blockquote>\n<p>The police killed the man with a knife.</p>\n</blockquote>\n<p>这个句子，可以有两种理解：</p>\n<ul>\n<li>警察把那个带刀的人干掉了</li>\n<li>警察用刀干掉了那个人</li>\n</ul>\n<p>上面两种解释对应的句法树分别是这样的：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/police-tree.jpg\" alt=\"句法树\" title=\"\">\n                </div>\n                <div class=\"image-caption\">句法树</div>\n            </figure>\n<blockquote>\n<p>序列看起来一样，但是由于内部的层级结构不一样会导致不同的语义理解</p>\n</blockquote>\n<p>当用LSTM为语言序列编码Encode的时候，由于LSTM单纯认为语言是一个序列，忽略了语言内部的语法树的层级结构，因此其无法解决上面<strong>相同序列，不同语义</strong>的问题。</p>\n<h1 id=\"出发点\"><a href=\"#出发点\" class=\"headerlink\" title=\"出发点\"></a>出发点</h1><p>本文提出ON-LSTM(Ordered Neurons - LSTM)，通过重新设计LSTM递归的cell的<strong>cell states的更新方式及策略</strong>，实现将语法树的层级结构融合进LSTM编码器中，解决上述问题。</p>\n<h1 id=\"回顾LSTM\"><a href=\"#回顾LSTM\" class=\"headerlink\" title=\"回顾LSTM\"></a>回顾LSTM</h1><p>LSTM主要由三个特殊的门（gate）结构组成：遗忘门、输入门、输出门</p>\n<p>具体的公式如下：<br></p><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/lstm-formula.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><p></p>\n<p>示意图如下：<br></p><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/lstm-img.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><p></p>\n<h1 id=\"ON-LSTM\"><a href=\"#ON-LSTM\" class=\"headerlink\" title=\"ON-LSTM\"></a>ON-LSTM</h1><h2 id=\"从LSTM开始\"><a href=\"#从LSTM开始\" class=\"headerlink\" title=\"从LSTM开始\"></a>从LSTM开始</h2><p>论文中一直是从神经元排序的角度解释的，对我个人来说，很难理解，故下文按照cell state的角度理解。</p>\n<p>LSTM的<strong>核心</strong>就是<strong>cell state</strong>：信息在cell state这个传送带上流动，伴随着一些简单的线性变换，乘和加，分别由“遗忘门”和“输入门”来控制cell state的信息更新。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/cell-state-flow.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这样存在一个问题：<br><strong>每次更新，cell state这个向量的每一维都会更新</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/cell-update.JPG\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>信息流就是存在于这个cell state中，如果希望模型可以刻画出语言的结构信息，也就意味着这个cell state中要隐含着层次结构的信息。</p>\n<p>所以作者希望，能够让这个cell state的不同维度，对应到语言的不同层级上，让不同的层级使用不一样的方式进行更新，具体来说就是层次越高的更新越少。这样的话，cell state就包含了层次信息了。</p>\n<p><strong>作者的例子：</strong></p>\n<p>假设我们有一个很简单的句子，三个词组成[x1,x2,x3]，有三个层次，用下图的最左边的图表示，分别是句子（S）、短语（NP，VP）、词（N，V）。<strong>我们希望cell state中也可以有对应的三个层次，层次就体现在不同的更新频率上。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/eg1.JPG\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>层次越高的，自然其信息应该保留的时间更久，所以其更新频率应该越低。上图的最右边是三个词分别对应的cell states。颜色越深代表更新频率越高。</p>\n<ul>\n<li>当读到第一个词x1的时候，这个时候是new S，new NP，new word，所以三个层次都应该更新；</li>\n<li>当读到第二个词x2的时候，这个时候是new VP，new word，所以下面两个层次应该更新；</li>\n<li>当读到第三个词x3的时候，这个时候只是new word，所以只是最下面的层次应该更新；<br>这样，语言的层次就和cell states的不同区间对应上的。</li>\n</ul>\n<blockquote>\n<p>这样，就相当于给<strong>cell states</strong>加了一个顺序，从某种意义上讲也相当于是给LSTM的神经元加了顺序，因此作者称这种结构是<strong>Ordered-Neurons</strong>，对应的LSTM称为<strong>ON-LSTM</strong>。所以并不是真的给神经元排序。</p>\n</blockquote>\n<p>接下来的问题：</p>\n<p>上面给cell states这样分区间，是因为我们提前知道了句子的结构，但我们真正使用LSTM进行建模、训练的时候，是不知道语言的真实层次的，除非你先把每个句子都解析成语法树，再显式加入到LSTM中的，但是这种方法不仅开销大，而且不一定可靠，所以我们<strong>需要设计一种结构，让模型可以学习到如何给cell state去分区</strong>。</p>\n<h2 id=\"ON-LSTM具体设计\"><a href=\"#ON-LSTM具体设计\" class=\"headerlink\" title=\"ON-LSTM具体设计\"></a>ON-LSTM具体设计</h2><p>为了实现区间的划分，模型用到了两个整数 $l_{his}$ 和 $l_{now}$，它们分别用来表示<strong>历史信息的最低等级</strong> 和 <strong>当前信息的最高等级</strong></p>\n<ul>\n<li>$l_{his}$表示cell state中高于该等级的维度需要保留历史信息$c_{t-1}$，对应于<strong>低更新频率</strong></li>\n<li>$l_{now}$表示cell state中低于该等级的维度需要补充更新输入信息$\\hat{c_t}$，对应于<strong>高更新频率</strong></li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/level-his-now.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>总体上，就包含以下两种情况：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/two-case.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li><p>$l_{his} &lt; l_{now}$ ,有重叠交汇部分：</p>\n<ul>\n<li><strong>交汇部分</strong>，采用原来LSTM更新方式，融合历史信息和当前输入信息</li>\n<li><strong>低于$l_{his}$的</strong>，完全更新为新输入的信息</li>\n<li><strong>高于$l_{now}$的</strong>，完全保留历史信息</li>\n</ul>\n</li>\n<li><p>$l_{his} &gt; l_{now}$ ,无重叠交汇部分：</p>\n<ul>\n<li><strong>无交汇部分</strong>，全部设置为0</li>\n<li><strong>低于$l_{now}$的</strong>，完全更新为新输入的信息</li>\n<li><strong>高于$l_{his}$的</strong>，完全保留历史信息</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>其实该模型认为高层次的语法信息主要是来自于历史信息，而低层次的主要来自当前输入信息，而这也比较符合人们的直观印象，对于一个新的输入，它对于语法信息的影响往往局限于一个较低的层次，高层次的信息（如句子或者短语信息）仍然来自于历史信息，只有当一个句子或者短语完结的时候，历史信息的影响变小，这时新的输入才有可能影响较高语法层次的信息。而这样也就使得高语法层次的信息的更新频率较低，大多时候是保持不变，而低语法层次的信息则随着当前的输入一直变化。</p>\n</blockquote>\n<h2 id=\"ON-LSTM实现过程\"><a href=\"#ON-LSTM实现过程\" class=\"headerlink\" title=\"ON-LSTM实现过程\"></a>ON-LSTM实现过程</h2><p>把$l_{his}、 l_{now}$转化为向量</p>\n<script type=\"math/tex; mode=display\">L_k = [0,0,...,1,0,...,0] ,其中只有第k位为1</script><p>定义累加函数</p>\n<script type=\"math/tex; mode=display\">cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]</script><p>因此，</p>\n<ul>\n<li>$cumsum(L_{l_{his}})=[0,…,0,1,1,…,1]$就表示出了需要保留历史信息的维度（1段）</li>\n<li>$1-cumsum(L_{l_{now}})=[1,…,1,0,0,…,0]$就表示出了需要更新保存新输入信息的维度（1段）</li>\n</ul>\n<p>由于，上面这种分为0段和1段的形式，都是整数，这样函数不可导，无法训练，所以需要做一下软化，即用softmax函数处理一下。</p>\n<p>定义 $cummax(X) = cumsum(softmax(X))$</p>\n<p>综上，引入两个门（gate）结构：master forget（$\\tilde{f_t}$）、master input（$\\tilde{i_t}$）。</p>\n<p>具体计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}})</script><script type=\"math/tex; mode=display\">\\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}})</script><script type=\"math/tex; mode=display\">\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)</script><script type=\"math/tex; mode=display\">c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t}</script><p>整体计算流程如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/on-lstm-img.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<blockquote>\n<p>通常隐层神经元的数目都比较大，而实际中语法的层数远远达不到这个数字，因此对于$\\tilde{f_t}$和$\\tilde{i_t}$而言，其实不需要那么多的维数，这样会导致需要学习的参数量过多，但是 $\\circ$ 要求它们的维数必须这么大，因此我们可以构造一个维数为$D_m = D / c$ 的向量，其中D为隐层神经元的维数，然后在将其扩充为D维向量，例如D=6，c=3，先构造一个向量[0.2, 0.8] ，然后将其扩充为 [0.2, 0.2, 0.2, 0.8, 0.8, 0.8] 。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>该ON-LSTM模型从语法结构的角度出发，根据语法层次对cell states进行有序排列，再按照语法层次的不同实行不同的更新规则，从而实现对于较高语法层次信息的保留，这样对于语言模型等任务无疑是很有利的。另外，利用该模型还能够较好地从句子中无监督地提取出语法结构，而这也是该模型的一大亮点。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"https://arxiv.org/abs/1810.09536\" target=\"_blank\" rel=\"noopener\">ORDERED NEURONS: INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS</a></p>\n<p>[2] <a href=\"https://kexue.fm/archives/6621\" target=\"_blank\" rel=\"noopener\">苏剑林. (2019, May 28). ON-LSTM：用有序神经元表达层次结构 [Blog post].</a> </p>\n<p>[3] <a href=\"https://zhuanlan.zhihu.com/p/77086523\" target=\"_blank\" rel=\"noopener\">有序的神经元——ON-LSTM模型浅析</a></p>\n<p>[4] <a href=\"https://zhuanlan.zhihu.com/p/69314959\" target=\"_blank\" rel=\"noopener\">ON-LSTM：能表示语言层次的LSTM</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"拟解决问题\"><a href=\"#拟解决问题\" class=\"headerlink\" title=\"拟解决问题\"></a>拟解决问题</h1><p>语言虽然看起来是一个序列，实际上内部是有复杂的层次结构的，这也是NLP的难点所在。复杂的层次结构，意味着序列即使看起来相同，也可能因为内部层次结构的不同而有语义的差别。</p>\n<p>在斯坦福CS224n上提到了这样的一个例子：</p>\n<blockquote>\n<p>The police killed the man with a knife.</p>\n</blockquote>\n<p>这个句子，可以有两种理解：</p>\n<ul>\n<li>警察把那个带刀的人干掉了</li>\n<li>警察用刀干掉了那个人</li>\n</ul>\n<p>上面两种解释对应的句法树分别是这样的：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/police-tree.jpg\" alt=\"句法树\" title>\n                </div>\n                <div class=\"image-caption\">句法树</div>\n            </figure>\n<blockquote>\n<p>序列看起来一样，但是由于内部的层级结构不一样会导致不同的语义理解</p>\n</blockquote>\n<p>当用LSTM为语言序列编码Encode的时候，由于LSTM单纯认为语言是一个序列，忽略了语言内部的语法树的层级结构，因此其无法解决上面<strong>相同序列，不同语义</strong>的问题。</p>\n<h1 id=\"出发点\"><a href=\"#出发点\" class=\"headerlink\" title=\"出发点\"></a>出发点</h1><p>本文提出ON-LSTM(Ordered Neurons - LSTM)，通过重新设计LSTM递归的cell的<strong>cell states的更新方式及策略</strong>，实现将语法树的层级结构融合进LSTM编码器中，解决上述问题。</p>\n<h1 id=\"回顾LSTM\"><a href=\"#回顾LSTM\" class=\"headerlink\" title=\"回顾LSTM\"></a>回顾LSTM</h1><p>LSTM主要由三个特殊的门（gate）结构组成：遗忘门、输入门、输出门</p>\n<p>具体的公式如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/lstm-formula.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>示意图如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/lstm-img.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"ON-LSTM\"><a href=\"#ON-LSTM\" class=\"headerlink\" title=\"ON-LSTM\"></a>ON-LSTM</h1><h2 id=\"从LSTM开始\"><a href=\"#从LSTM开始\" class=\"headerlink\" title=\"从LSTM开始\"></a>从LSTM开始</h2><p>论文中一直是从神经元排序的角度解释的，对我个人来说，很难理解，故下文按照cell state的角度理解。</p>\n<p>LSTM的<strong>核心</strong>就是<strong>cell state</strong>：信息在cell state这个传送带上流动，伴随着一些简单的线性变换，乘和加，分别由“遗忘门”和“输入门”来控制cell state的信息更新。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/cell-state-flow.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这样存在一个问题：<br><strong>每次更新，cell state这个向量的每一维都会更新</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/cell-update.JPG\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>信息流就是存在于这个cell state中，如果希望模型可以刻画出语言的结构信息，也就意味着这个cell state中要隐含着层次结构的信息。</p>\n<p>所以作者希望，能够让这个cell state的不同维度，对应到语言的不同层级上，让不同的层级使用不一样的方式进行更新，具体来说就是层次越高的更新越少。这样的话，cell state就包含了层次信息了。</p>\n<p><strong>作者的例子：</strong></p>\n<p>假设我们有一个很简单的句子，三个词组成[x1,x2,x3]，有三个层次，用下图的最左边的图表示，分别是句子（S）、短语（NP，VP）、词（N，V）。<strong>我们希望cell state中也可以有对应的三个层次，层次就体现在不同的更新频率上。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/eg1.JPG\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>层次越高的，自然其信息应该保留的时间更久，所以其更新频率应该越低。上图的最右边是三个词分别对应的cell states。颜色越深代表更新频率越高。</p>\n<ul>\n<li>当读到第一个词x1的时候，这个时候是new S，new NP，new word，所以三个层次都应该更新；</li>\n<li>当读到第二个词x2的时候，这个时候是new VP，new word，所以下面两个层次应该更新；</li>\n<li>当读到第三个词x3的时候，这个时候只是new word，所以只是最下面的层次应该更新；<br>这样，语言的层次就和cell states的不同区间对应上的。</li>\n</ul>\n<blockquote>\n<p>这样，就相当于给<strong>cell states</strong>加了一个顺序，从某种意义上讲也相当于是给LSTM的神经元加了顺序，因此作者称这种结构是<strong>Ordered-Neurons</strong>，对应的LSTM称为<strong>ON-LSTM</strong>。所以并不是真的给神经元排序。</p>\n</blockquote>\n<p>接下来的问题：</p>\n<p>上面给cell states这样分区间，是因为我们提前知道了句子的结构，但我们真正使用LSTM进行建模、训练的时候，是不知道语言的真实层次的，除非你先把每个句子都解析成语法树，再显式加入到LSTM中的，但是这种方法不仅开销大，而且不一定可靠，所以我们<strong>需要设计一种结构，让模型可以学习到如何给cell state去分区</strong>。</p>\n<h2 id=\"ON-LSTM具体设计\"><a href=\"#ON-LSTM具体设计\" class=\"headerlink\" title=\"ON-LSTM具体设计\"></a>ON-LSTM具体设计</h2><p>为了实现区间的划分，模型用到了两个整数 $l_{his}$ 和 $l_{now}$，它们分别用来表示<strong>历史信息的最低等级</strong> 和 <strong>当前信息的最高等级</strong></p>\n<ul>\n<li>$l_{his}$表示cell state中高于该等级的维度需要保留历史信息$c_{t-1}$，对应于<strong>低更新频率</strong></li>\n<li>$l_{now}$表示cell state中低于该等级的维度需要补充更新输入信息$\\hat{c_t}$，对应于<strong>高更新频率</strong></li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/level-his-now.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>总体上，就包含以下两种情况：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/two-case.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li><p>$l_{his} &lt; l_{now}$ ,有重叠交汇部分：</p>\n<ul>\n<li><strong>交汇部分</strong>，采用原来LSTM更新方式，融合历史信息和当前输入信息</li>\n<li><strong>低于$l_{his}$的</strong>，完全更新为新输入的信息</li>\n<li><strong>高于$l_{now}$的</strong>，完全保留历史信息</li>\n</ul>\n</li>\n<li><p>$l_{his} &gt; l_{now}$ ,无重叠交汇部分：</p>\n<ul>\n<li><strong>无交汇部分</strong>，全部设置为0</li>\n<li><strong>低于$l_{now}$的</strong>，完全更新为新输入的信息</li>\n<li><strong>高于$l_{his}$的</strong>，完全保留历史信息</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>其实该模型认为高层次的语法信息主要是来自于历史信息，而低层次的主要来自当前输入信息，而这也比较符合人们的直观印象，对于一个新的输入，它对于语法信息的影响往往局限于一个较低的层次，高层次的信息（如句子或者短语信息）仍然来自于历史信息，只有当一个句子或者短语完结的时候，历史信息的影响变小，这时新的输入才有可能影响较高语法层次的信息。而这样也就使得高语法层次的信息的更新频率较低，大多时候是保持不变，而低语法层次的信息则随着当前的输入一直变化。</p>\n</blockquote>\n<h2 id=\"ON-LSTM实现过程\"><a href=\"#ON-LSTM实现过程\" class=\"headerlink\" title=\"ON-LSTM实现过程\"></a>ON-LSTM实现过程</h2><p>把$l_{his}、 l_{now}$转化为向量</p>\n<script type=\"math/tex; mode=display\">L_k = [0,0,...,1,0,...,0] ,其中只有第k位为1</script><p>定义累加函数</p>\n<script type=\"math/tex; mode=display\">cumsum([x_1,x_2,...,x_n]) = [x_1, x_1+x_2, x_1+x_2+x_3,..., x_1+x_2+...+x_n]</script><p>因此，</p>\n<ul>\n<li>$cumsum(L_{l_{his}})=[0,…,0,1,1,…,1]$就表示出了需要保留历史信息的维度（1段）</li>\n<li>$1-cumsum(L_{l_{now}})=[1,…,1,0,0,…,0]$就表示出了需要更新保存新输入信息的维度（1段）</li>\n</ul>\n<p>由于，上面这种分为0段和1段的形式，都是整数，这样函数不可导，无法训练，所以需要做一下软化，即用softmax函数处理一下。</p>\n<p>定义 $cummax(X) = cumsum(softmax(X))$</p>\n<p>综上，引入两个门（gate）结构：master forget（$\\tilde{f_t}$）、master input（$\\tilde{i_t}$）。</p>\n<p>具体计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\\tilde{f_t} = cummax(W_{\\tilde{f_t}}x_t+U_{\\tilde{f_t}}h_{t-1}+b_{\\tilde{f_t}})</script><script type=\"math/tex; mode=display\">\\tilde{i_t} = 1-cummax(W_{\\tilde{i_t}}x_t+U_{\\tilde{i_t}}h_{t-1}+b_{\\tilde{i_t}})</script><script type=\"math/tex; mode=display\">\\omega_t=\\tilde{f_t} \\circ \\tilde{i_t} (按位相乘，表示重叠交汇部分)</script><script type=\"math/tex; mode=display\">c_t = \\omega_t \\circ (f_t \\circ c_{t-1}+ i_t \\circ \\hat{c_t}) + (\\tilde{f_t}-\\omega_t) \\circ c_{t-1} + (\\tilde{i_t}-\\omega_t) \\circ \\hat{c_t}</script><p>整体计算流程如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20200830a/on-lstm-img.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<blockquote>\n<p>通常隐层神经元的数目都比较大，而实际中语法的层数远远达不到这个数字，因此对于$\\tilde{f_t}$和$\\tilde{i_t}$而言，其实不需要那么多的维数，这样会导致需要学习的参数量过多，但是 $\\circ$ 要求它们的维数必须这么大，因此我们可以构造一个维数为$D_m = D / c$ 的向量，其中D为隐层神经元的维数，然后在将其扩充为D维向量，例如D=6，c=3，先构造一个向量[0.2, 0.8] ，然后将其扩充为 [0.2, 0.2, 0.2, 0.8, 0.8, 0.8] 。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>该ON-LSTM模型从语法结构的角度出发，根据语法层次对cell states进行有序排列，再按照语法层次的不同实行不同的更新规则，从而实现对于较高语法层次信息的保留，这样对于语言模型等任务无疑是很有利的。另外，利用该模型还能够较好地从句子中无监督地提取出语法结构，而这也是该模型的一大亮点。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"https://arxiv.org/abs/1810.09536\" target=\"_blank\" rel=\"noopener\">ORDERED NEURONS: INTEGRATING TREE STRUCTURES INTO RECURRENT NEURAL NETWORKS</a></p>\n<p>[2] <a href=\"https://kexue.fm/archives/6621\" target=\"_blank\" rel=\"noopener\">苏剑林. (2019, May 28). ON-LSTM：用有序神经元表达层次结构 [Blog post].</a> </p>\n<p>[3] <a href=\"https://zhuanlan.zhihu.com/p/77086523\" target=\"_blank\" rel=\"noopener\">有序的神经元——ON-LSTM模型浅析</a></p>\n<p>[4] <a href=\"https://zhuanlan.zhihu.com/p/69314959\" target=\"_blank\" rel=\"noopener\">ON-LSTM：能表示语言层次的LSTM</a></p>\n"},{"title":"Linux是什么","abbrlink":"e3a70ff1","date":"2020-07-06T12:31:51.000Z","_content":"\n# Linux是什么\n\n> Linux是一套操作系统，包括内核与系统调用接口（内核工具），提供了一个最底层的硬件控制与资源管理的完整架构。\n\n> 1991年，芬兰人托瓦兹（Linus Torvalds）开发出了针对386硬件的内核原型。\n\n> Linux是GPL授权的‘**Unix Like**’自由软件。\n\n* Linux的内核版本\n\t* 版本编号：\n\t\t* 主版本.次版本.发行release版本-修改版本\n\t\t\t* 2.6.18-92.e15\n\t\t* 主次版本为奇数：开发版\n\t\t\t* 2.5.xx\n\t\t* 主次版本为偶数：稳定版\n\t\t\t* 2.6.xx\n\n* Linux distributions（Linux 发行版）\n\t* 常说的Linux其实仅包括**Linux内核**与**内核工具（文档）**\n\t* 在此基础上加上**应用软件**，并制成可完全安装的程序，就是Linux distribution\n\t\t* Linux Kernel + Softwares + Tools(Documentations) + 可完全安装= Linux distribution","source":"_posts/Linux是什么.md","raw":"---\ntitle: Linux是什么\ntags: linux\ncategories: Linux-鸟哥私房菜\nabbrlink: e3a70ff1\ndate: 2020-07-06 20:31:51\n---\n\n# Linux是什么\n\n> Linux是一套操作系统，包括内核与系统调用接口（内核工具），提供了一个最底层的硬件控制与资源管理的完整架构。\n\n> 1991年，芬兰人托瓦兹（Linus Torvalds）开发出了针对386硬件的内核原型。\n\n> Linux是GPL授权的‘**Unix Like**’自由软件。\n\n* Linux的内核版本\n\t* 版本编号：\n\t\t* 主版本.次版本.发行release版本-修改版本\n\t\t\t* 2.6.18-92.e15\n\t\t* 主次版本为奇数：开发版\n\t\t\t* 2.5.xx\n\t\t* 主次版本为偶数：稳定版\n\t\t\t* 2.6.xx\n\n* Linux distributions（Linux 发行版）\n\t* 常说的Linux其实仅包括**Linux内核**与**内核工具（文档）**\n\t* 在此基础上加上**应用软件**，并制成可完全安装的程序，就是Linux distribution\n\t\t* Linux Kernel + Softwares + Tools(Documentations) + 可完全安装= Linux distribution","slug":"Linux是什么","published":1,"updated":"2020-07-07T03:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82mx000mdgtqbeq6arx2","content":"<h1 id=\"Linux是什么\"><a href=\"#Linux是什么\" class=\"headerlink\" title=\"Linux是什么\"></a>Linux是什么</h1><blockquote>\n<p>Linux是一套操作系统，包括内核与系统调用接口（内核工具），提供了一个最底层的硬件控制与资源管理的完整架构。</p>\n<p>1991年，芬兰人托瓦兹（Linus Torvalds）开发出了针对386硬件的内核原型。</p>\n<p>Linux是GPL授权的‘<strong>Unix Like</strong>’自由软件。</p>\n</blockquote>\n<ul>\n<li><p>Linux的内核版本</p>\n<ul>\n<li>版本编号：<ul>\n<li>主版本.次版本.发行release版本-修改版本<ul>\n<li>2.6.18-92.e15</li>\n</ul>\n</li>\n<li>主次版本为奇数：开发版<ul>\n<li>2.5.xx</li>\n</ul>\n</li>\n<li>主次版本为偶数：稳定版<ul>\n<li>2.6.xx</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Linux distributions（Linux 发行版）</p>\n<ul>\n<li>常说的Linux其实仅包括<strong>Linux内核</strong>与<strong>内核工具（文档）</strong></li>\n<li>在此基础上加上<strong>应用软件</strong>，并制成可完全安装的程序，就是Linux distribution<ul>\n<li>Linux Kernel + Softwares + Tools(Documentations) + 可完全安装= Linux distribution</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux是什么\"><a href=\"#Linux是什么\" class=\"headerlink\" title=\"Linux是什么\"></a>Linux是什么</h1><blockquote>\n<p>Linux是一套操作系统，包括内核与系统调用接口（内核工具），提供了一个最底层的硬件控制与资源管理的完整架构。</p>\n<p>1991年，芬兰人托瓦兹（Linus Torvalds）开发出了针对386硬件的内核原型。</p>\n<p>Linux是GPL授权的‘<strong>Unix Like</strong>’自由软件。</p>\n</blockquote>\n<ul>\n<li><p>Linux的内核版本</p>\n<ul>\n<li>版本编号：<ul>\n<li>主版本.次版本.发行release版本-修改版本<ul>\n<li>2.6.18-92.e15</li>\n</ul>\n</li>\n<li>主次版本为奇数：开发版<ul>\n<li>2.5.xx</li>\n</ul>\n</li>\n<li>主次版本为偶数：稳定版<ul>\n<li>2.6.xx</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Linux distributions（Linux 发行版）</p>\n<ul>\n<li>常说的Linux其实仅包括<strong>Linux内核</strong>与<strong>内核工具（文档）</strong></li>\n<li>在此基础上加上<strong>应用软件</strong>，并制成可完全安装的程序，就是Linux distribution<ul>\n<li>Linux Kernel + Softwares + Tools(Documentations) + 可完全安装= Linux distribution</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Linux的文件权限","date":"2020-07-15T07:35:41.000Z","abbrlink":"200715a","_content":"\n# Linux 的文件权限\n\n## 用户与用户组\n\n> linux最优秀的地方，就在于**多用户、多任务**环境\n\n* 文件所有者\n\t* 在多人同时使用主机的情况下，考虑每个人的隐私权及个人喜好的工作环境\n\n* 用户组\n\t* 在团队开发的时候尤其重要\n\t* 每个账号（用户）都可以有多个用户组的支持\n\n* 其他人\n\t* 不属于“文件所有者及所属用户组中用户”的其他用户\n\n> **root**用户极其特殊，拥有最高权限\n\n### Linux用户身份与用户组记录的文件\n\n* **/etc/passwd**\n\t* 系统上的所有账号、一般身份用户及root的相关信息\n\n* **/etc/shadow**\n\t* 个人密码\n\n* **/etc/group**\n\t* 所有的组名\n\n## Linux文件权限\n\n> 对数据安全性及系统保护有重要意义\n\n### Linux文件属性\n\n> **ls -al**\n> \n> 显示当前目录下所有文件及目录的详细信息\n> \n> -a 显示所有，包括隐藏文件（文件名以**.**开始的）\n> \n> -l 显示详细信息\n\n* ls -al 输出7列信息\n\t* -rw-r--r-- 1 root root 42304 Sep 4 18:26 install.log\n\n* 第一列表示这个**文件的类型与权限**（permission），共计10个字符\n\t* 第一个字符表示文件类型\n\t\t* -表示文件\n\t\t* d表示目录\n\t\t* l表示连接文件\n\n\t* 剩下九个每3个一组，分别为**“文件所有者”**、**“同用户组”**、**“其他非本用户组”**的权限，均含有“rwx”三个参数组合\n\t\t* r表示可读\n\t\t* w表示可写\n\t\t* x表示可执行\n\t\t* 注意：这三个权限的位置不会改变，如果没有相应权限，用**-**占位\n\n* 第二列表示有多少个文件名连接到此节点（i-node）\n\t* 每个文件都会将它的权限与属性记录到文件系统的i-node\n\n\n* 第三列表示这个文件或目录的“所有者账号”\n* 第四列表示这个文件的所属用户组\n* 第五列表示这个文件的大小，默认单位**B**\n* 第六列表示这个文件的创建日期或者最近修改日期\n\t* ls -l --full-time显示完整时间\n\n* 第七列表示该文件名\n\n### 更改文件属性与权限\n\n* chgrp\n\t* 改变所属用户组\n\t* chgrp users filename.log 把filename.log加到users用户组\n\t* -R 递归更改，适合于嵌套目录\n* chown\n\t* 改变所有者\n\t* chown bin install.log\n\t* -R 递归更改，适合于嵌套目录\n\t* 可以用于同时修改所有者和用户组，用**:**隔开\n\t\t* 如 chown hanrd:root install.log\n\t\t* hanrd所有者，root用户组\n\t\t* 只改用户组 **chown .root install.log**\n\n* chmod\n\t* 改变权限\n\t* 数字类型\n\t\t* r-4、w-2、x-1，各个值相加\n\t\t* rwx = 7\n\t\t* chmod 740 filename\n\n\t* 符号类型\n\t\t* u-所有者\n\t\t* g-本用户组\n\t\t* o-其他非本用户组\n\t\t* a-所有上述三种身份\n\t\t* +添加权限、-除去权限、=设置权限\n\t\t* 如\n\t\t\t* chmod u=rwx,go=rw .bashrc\n\t\t\t* chmod a+w .bashrc\n\n### 目录与文件的权限意义\n\n* 文件\n\t* r-可以读取文件实际内容\n\t* w-可以编辑修改文件内容，不能删除文件\n\t* x-具有被执行权限，执行成功与否与文件内容有关\n\n* 目录\n\t* r-获取目录结构列表，详细信息获取不到\n\t* w-更改该目录结构列表的权限，与文件名变动有关\n\t\t* 新建文件或目录\n\t\t* 删除文件或目录\n\t\t* 重命名\n\t\t* 移动文件、目录位置\n\n\t* x-能否进入该目录作为工作目录\n\n### linux文件种类与扩展名\n\n* 普通文件\n\t* 用**-**表示\n\t* 纯文本文件 - ASCII\n\t* 二进制文件\n\t* 数据格式文件，具有特殊格式，存储数据\n\n* 目录\n\t* 用**d**表示\n\n* 连接文件\n\t* 用**l**表示\n\n#### 扩展名\n\n> 一个文件能不能被linux执行，与它的第一列的10个属性有关，与文件名后缀一点关系没有\n\n#### 文件名长度限制\n\n* 单一文件或者目录最大容许的文件名为255个字符\n* 完整路径名、文件名最大4096个字符\n* 文件名尽量避免特殊字符","source":"_posts/Linux的文件权限.md","raw":"---\ntitle: Linux的文件权限\ndate: 2020-07-15 15:35:41\ntags: linux\ncategories: Linux-鸟哥私房菜\nabbrlink: '200715a'\n---\n\n# Linux 的文件权限\n\n## 用户与用户组\n\n> linux最优秀的地方，就在于**多用户、多任务**环境\n\n* 文件所有者\n\t* 在多人同时使用主机的情况下，考虑每个人的隐私权及个人喜好的工作环境\n\n* 用户组\n\t* 在团队开发的时候尤其重要\n\t* 每个账号（用户）都可以有多个用户组的支持\n\n* 其他人\n\t* 不属于“文件所有者及所属用户组中用户”的其他用户\n\n> **root**用户极其特殊，拥有最高权限\n\n### Linux用户身份与用户组记录的文件\n\n* **/etc/passwd**\n\t* 系统上的所有账号、一般身份用户及root的相关信息\n\n* **/etc/shadow**\n\t* 个人密码\n\n* **/etc/group**\n\t* 所有的组名\n\n## Linux文件权限\n\n> 对数据安全性及系统保护有重要意义\n\n### Linux文件属性\n\n> **ls -al**\n> \n> 显示当前目录下所有文件及目录的详细信息\n> \n> -a 显示所有，包括隐藏文件（文件名以**.**开始的）\n> \n> -l 显示详细信息\n\n* ls -al 输出7列信息\n\t* -rw-r--r-- 1 root root 42304 Sep 4 18:26 install.log\n\n* 第一列表示这个**文件的类型与权限**（permission），共计10个字符\n\t* 第一个字符表示文件类型\n\t\t* -表示文件\n\t\t* d表示目录\n\t\t* l表示连接文件\n\n\t* 剩下九个每3个一组，分别为**“文件所有者”**、**“同用户组”**、**“其他非本用户组”**的权限，均含有“rwx”三个参数组合\n\t\t* r表示可读\n\t\t* w表示可写\n\t\t* x表示可执行\n\t\t* 注意：这三个权限的位置不会改变，如果没有相应权限，用**-**占位\n\n* 第二列表示有多少个文件名连接到此节点（i-node）\n\t* 每个文件都会将它的权限与属性记录到文件系统的i-node\n\n\n* 第三列表示这个文件或目录的“所有者账号”\n* 第四列表示这个文件的所属用户组\n* 第五列表示这个文件的大小，默认单位**B**\n* 第六列表示这个文件的创建日期或者最近修改日期\n\t* ls -l --full-time显示完整时间\n\n* 第七列表示该文件名\n\n### 更改文件属性与权限\n\n* chgrp\n\t* 改变所属用户组\n\t* chgrp users filename.log 把filename.log加到users用户组\n\t* -R 递归更改，适合于嵌套目录\n* chown\n\t* 改变所有者\n\t* chown bin install.log\n\t* -R 递归更改，适合于嵌套目录\n\t* 可以用于同时修改所有者和用户组，用**:**隔开\n\t\t* 如 chown hanrd:root install.log\n\t\t* hanrd所有者，root用户组\n\t\t* 只改用户组 **chown .root install.log**\n\n* chmod\n\t* 改变权限\n\t* 数字类型\n\t\t* r-4、w-2、x-1，各个值相加\n\t\t* rwx = 7\n\t\t* chmod 740 filename\n\n\t* 符号类型\n\t\t* u-所有者\n\t\t* g-本用户组\n\t\t* o-其他非本用户组\n\t\t* a-所有上述三种身份\n\t\t* +添加权限、-除去权限、=设置权限\n\t\t* 如\n\t\t\t* chmod u=rwx,go=rw .bashrc\n\t\t\t* chmod a+w .bashrc\n\n### 目录与文件的权限意义\n\n* 文件\n\t* r-可以读取文件实际内容\n\t* w-可以编辑修改文件内容，不能删除文件\n\t* x-具有被执行权限，执行成功与否与文件内容有关\n\n* 目录\n\t* r-获取目录结构列表，详细信息获取不到\n\t* w-更改该目录结构列表的权限，与文件名变动有关\n\t\t* 新建文件或目录\n\t\t* 删除文件或目录\n\t\t* 重命名\n\t\t* 移动文件、目录位置\n\n\t* x-能否进入该目录作为工作目录\n\n### linux文件种类与扩展名\n\n* 普通文件\n\t* 用**-**表示\n\t* 纯文本文件 - ASCII\n\t* 二进制文件\n\t* 数据格式文件，具有特殊格式，存储数据\n\n* 目录\n\t* 用**d**表示\n\n* 连接文件\n\t* 用**l**表示\n\n#### 扩展名\n\n> 一个文件能不能被linux执行，与它的第一列的10个属性有关，与文件名后缀一点关系没有\n\n#### 文件名长度限制\n\n* 单一文件或者目录最大容许的文件名为255个字符\n* 完整路径名、文件名最大4096个字符\n* 文件名尽量避免特殊字符","slug":"Linux的文件权限","published":1,"updated":"2020-07-15T08:34:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82my000odgtq79ty9fq3","content":"<h1 id=\"Linux-的文件权限\"><a href=\"#Linux-的文件权限\" class=\"headerlink\" title=\"Linux 的文件权限\"></a>Linux 的文件权限</h1><h2 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h2><blockquote>\n<p>linux最优秀的地方，就在于<strong>多用户、多任务</strong>环境</p>\n</blockquote>\n<ul>\n<li><p>文件所有者</p>\n<ul>\n<li>在多人同时使用主机的情况下，考虑每个人的隐私权及个人喜好的工作环境</li>\n</ul>\n</li>\n<li><p>用户组</p>\n<ul>\n<li>在团队开发的时候尤其重要</li>\n<li>每个账号（用户）都可以有多个用户组的支持</li>\n</ul>\n</li>\n<li><p>其他人</p>\n<ul>\n<li>不属于“文件所有者及所属用户组中用户”的其他用户</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>root</strong>用户极其特殊，拥有最高权限</p>\n</blockquote>\n<h3 id=\"Linux用户身份与用户组记录的文件\"><a href=\"#Linux用户身份与用户组记录的文件\" class=\"headerlink\" title=\"Linux用户身份与用户组记录的文件\"></a>Linux用户身份与用户组记录的文件</h3><ul>\n<li><p><strong>/etc/passwd</strong></p>\n<ul>\n<li>系统上的所有账号、一般身份用户及root的相关信息</li>\n</ul>\n</li>\n<li><p><strong>/etc/shadow</strong></p>\n<ul>\n<li>个人密码</li>\n</ul>\n</li>\n<li><p><strong>/etc/group</strong></p>\n<ul>\n<li>所有的组名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux文件权限\"><a href=\"#Linux文件权限\" class=\"headerlink\" title=\"Linux文件权限\"></a>Linux文件权限</h2><blockquote>\n<p>对数据安全性及系统保护有重要意义</p>\n</blockquote>\n<h3 id=\"Linux文件属性\"><a href=\"#Linux文件属性\" class=\"headerlink\" title=\"Linux文件属性\"></a>Linux文件属性</h3><blockquote>\n<p><strong>ls -al</strong></p>\n<p>显示当前目录下所有文件及目录的详细信息</p>\n<p>-a 显示所有，包括隐藏文件（文件名以<strong>.</strong>开始的）</p>\n<p>-l 显示详细信息</p>\n</blockquote>\n<ul>\n<li><p>ls -al 输出7列信息</p>\n<ul>\n<li>-rw-r—r— 1 root root 42304 Sep 4 18:26 install.log</li>\n</ul>\n</li>\n<li><p>第一列表示这个<strong>文件的类型与权限</strong>（permission），共计10个字符</p>\n<ul>\n<li><p>第一个字符表示文件类型</p>\n<ul>\n<li>-表示文件</li>\n<li>d表示目录</li>\n<li>l表示连接文件</li>\n</ul>\n</li>\n<li><p>剩下九个每3个一组，分别为<strong>“文件所有者”</strong>、<strong>“同用户组”</strong>、<strong>“其他非本用户组”</strong>的权限，均含有“rwx”三个参数组合</p>\n<ul>\n<li>r表示可读</li>\n<li>w表示可写</li>\n<li>x表示可执行</li>\n<li>注意：这三个权限的位置不会改变，如果没有相应权限，用<strong>-</strong>占位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>第二列表示有多少个文件名连接到此节点（i-node）</p>\n<ul>\n<li>每个文件都会将它的权限与属性记录到文件系统的i-node</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>第三列表示这个文件或目录的“所有者账号”</li>\n<li>第四列表示这个文件的所属用户组</li>\n<li>第五列表示这个文件的大小，默认单位<strong>B</strong></li>\n<li><p>第六列表示这个文件的创建日期或者最近修改日期</p>\n<ul>\n<li>ls -l —full-time显示完整时间</li>\n</ul>\n</li>\n<li><p>第七列表示该文件名</p>\n</li>\n</ul>\n<h3 id=\"更改文件属性与权限\"><a href=\"#更改文件属性与权限\" class=\"headerlink\" title=\"更改文件属性与权限\"></a>更改文件属性与权限</h3><ul>\n<li>chgrp<ul>\n<li>改变所属用户组</li>\n<li>chgrp users filename.log 把filename.log加到users用户组</li>\n<li>-R 递归更改，适合于嵌套目录</li>\n</ul>\n</li>\n<li><p>chown</p>\n<ul>\n<li>改变所有者</li>\n<li>chown bin install.log</li>\n<li>-R 递归更改，适合于嵌套目录</li>\n<li>可以用于同时修改所有者和用户组，用<strong>:</strong>隔开<ul>\n<li>如 chown hanrd:root install.log</li>\n<li>hanrd所有者，root用户组</li>\n<li>只改用户组 <strong>chown .root install.log</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>chmod</p>\n<ul>\n<li>改变权限</li>\n<li><p>数字类型</p>\n<ul>\n<li>r-4、w-2、x-1，各个值相加</li>\n<li>rwx = 7</li>\n<li>chmod 740 filename</li>\n</ul>\n</li>\n<li><p>符号类型</p>\n<ul>\n<li>u-所有者</li>\n<li>g-本用户组</li>\n<li>o-其他非本用户组</li>\n<li>a-所有上述三种身份</li>\n<li>+添加权限、-除去权限、=设置权限</li>\n<li>如<ul>\n<li>chmod u=rwx,go=rw .bashrc</li>\n<li>chmod a+w .bashrc</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"目录与文件的权限意义\"><a href=\"#目录与文件的权限意义\" class=\"headerlink\" title=\"目录与文件的权限意义\"></a>目录与文件的权限意义</h3><ul>\n<li><p>文件</p>\n<ul>\n<li>r-可以读取文件实际内容</li>\n<li>w-可以编辑修改文件内容，不能删除文件</li>\n<li>x-具有被执行权限，执行成功与否与文件内容有关</li>\n</ul>\n</li>\n<li><p>目录</p>\n<ul>\n<li>r-获取目录结构列表，详细信息获取不到</li>\n<li><p>w-更改该目录结构列表的权限，与文件名变动有关</p>\n<ul>\n<li>新建文件或目录</li>\n<li>删除文件或目录</li>\n<li>重命名</li>\n<li>移动文件、目录位置</li>\n</ul>\n</li>\n<li><p>x-能否进入该目录作为工作目录</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"linux文件种类与扩展名\"><a href=\"#linux文件种类与扩展名\" class=\"headerlink\" title=\"linux文件种类与扩展名\"></a>linux文件种类与扩展名</h3><ul>\n<li><p>普通文件</p>\n<ul>\n<li>用<strong>-</strong>表示</li>\n<li>纯文本文件 - ASCII</li>\n<li>二进制文件</li>\n<li>数据格式文件，具有特殊格式，存储数据</li>\n</ul>\n</li>\n<li><p>目录</p>\n<ul>\n<li>用<strong>d</strong>表示</li>\n</ul>\n</li>\n<li><p>连接文件</p>\n<ul>\n<li>用<strong>l</strong>表示</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"扩展名\"><a href=\"#扩展名\" class=\"headerlink\" title=\"扩展名\"></a>扩展名</h4><blockquote>\n<p>一个文件能不能被linux执行，与它的第一列的10个属性有关，与文件名后缀一点关系没有</p>\n</blockquote>\n<h4 id=\"文件名长度限制\"><a href=\"#文件名长度限制\" class=\"headerlink\" title=\"文件名长度限制\"></a>文件名长度限制</h4><ul>\n<li>单一文件或者目录最大容许的文件名为255个字符</li>\n<li>完整路径名、文件名最大4096个字符</li>\n<li>文件名尽量避免特殊字符</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-的文件权限\"><a href=\"#Linux-的文件权限\" class=\"headerlink\" title=\"Linux 的文件权限\"></a>Linux 的文件权限</h1><h2 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h2><blockquote>\n<p>linux最优秀的地方，就在于<strong>多用户、多任务</strong>环境</p>\n</blockquote>\n<ul>\n<li><p>文件所有者</p>\n<ul>\n<li>在多人同时使用主机的情况下，考虑每个人的隐私权及个人喜好的工作环境</li>\n</ul>\n</li>\n<li><p>用户组</p>\n<ul>\n<li>在团队开发的时候尤其重要</li>\n<li>每个账号（用户）都可以有多个用户组的支持</li>\n</ul>\n</li>\n<li><p>其他人</p>\n<ul>\n<li>不属于“文件所有者及所属用户组中用户”的其他用户</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>root</strong>用户极其特殊，拥有最高权限</p>\n</blockquote>\n<h3 id=\"Linux用户身份与用户组记录的文件\"><a href=\"#Linux用户身份与用户组记录的文件\" class=\"headerlink\" title=\"Linux用户身份与用户组记录的文件\"></a>Linux用户身份与用户组记录的文件</h3><ul>\n<li><p><strong>/etc/passwd</strong></p>\n<ul>\n<li>系统上的所有账号、一般身份用户及root的相关信息</li>\n</ul>\n</li>\n<li><p><strong>/etc/shadow</strong></p>\n<ul>\n<li>个人密码</li>\n</ul>\n</li>\n<li><p><strong>/etc/group</strong></p>\n<ul>\n<li>所有的组名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux文件权限\"><a href=\"#Linux文件权限\" class=\"headerlink\" title=\"Linux文件权限\"></a>Linux文件权限</h2><blockquote>\n<p>对数据安全性及系统保护有重要意义</p>\n</blockquote>\n<h3 id=\"Linux文件属性\"><a href=\"#Linux文件属性\" class=\"headerlink\" title=\"Linux文件属性\"></a>Linux文件属性</h3><blockquote>\n<p><strong>ls -al</strong></p>\n<p>显示当前目录下所有文件及目录的详细信息</p>\n<p>-a 显示所有，包括隐藏文件（文件名以<strong>.</strong>开始的）</p>\n<p>-l 显示详细信息</p>\n</blockquote>\n<ul>\n<li><p>ls -al 输出7列信息</p>\n<ul>\n<li>-rw-r—r— 1 root root 42304 Sep 4 18:26 install.log</li>\n</ul>\n</li>\n<li><p>第一列表示这个<strong>文件的类型与权限</strong>（permission），共计10个字符</p>\n<ul>\n<li><p>第一个字符表示文件类型</p>\n<ul>\n<li>-表示文件</li>\n<li>d表示目录</li>\n<li>l表示连接文件</li>\n</ul>\n</li>\n<li><p>剩下九个每3个一组，分别为<strong>“文件所有者”</strong>、<strong>“同用户组”</strong>、<strong>“其他非本用户组”</strong>的权限，均含有“rwx”三个参数组合</p>\n<ul>\n<li>r表示可读</li>\n<li>w表示可写</li>\n<li>x表示可执行</li>\n<li>注意：这三个权限的位置不会改变，如果没有相应权限，用<strong>-</strong>占位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>第二列表示有多少个文件名连接到此节点（i-node）</p>\n<ul>\n<li>每个文件都会将它的权限与属性记录到文件系统的i-node</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>第三列表示这个文件或目录的“所有者账号”</li>\n<li>第四列表示这个文件的所属用户组</li>\n<li>第五列表示这个文件的大小，默认单位<strong>B</strong></li>\n<li><p>第六列表示这个文件的创建日期或者最近修改日期</p>\n<ul>\n<li>ls -l —full-time显示完整时间</li>\n</ul>\n</li>\n<li><p>第七列表示该文件名</p>\n</li>\n</ul>\n<h3 id=\"更改文件属性与权限\"><a href=\"#更改文件属性与权限\" class=\"headerlink\" title=\"更改文件属性与权限\"></a>更改文件属性与权限</h3><ul>\n<li>chgrp<ul>\n<li>改变所属用户组</li>\n<li>chgrp users filename.log 把filename.log加到users用户组</li>\n<li>-R 递归更改，适合于嵌套目录</li>\n</ul>\n</li>\n<li><p>chown</p>\n<ul>\n<li>改变所有者</li>\n<li>chown bin install.log</li>\n<li>-R 递归更改，适合于嵌套目录</li>\n<li>可以用于同时修改所有者和用户组，用<strong>:</strong>隔开<ul>\n<li>如 chown hanrd:root install.log</li>\n<li>hanrd所有者，root用户组</li>\n<li>只改用户组 <strong>chown .root install.log</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>chmod</p>\n<ul>\n<li>改变权限</li>\n<li><p>数字类型</p>\n<ul>\n<li>r-4、w-2、x-1，各个值相加</li>\n<li>rwx = 7</li>\n<li>chmod 740 filename</li>\n</ul>\n</li>\n<li><p>符号类型</p>\n<ul>\n<li>u-所有者</li>\n<li>g-本用户组</li>\n<li>o-其他非本用户组</li>\n<li>a-所有上述三种身份</li>\n<li>+添加权限、-除去权限、=设置权限</li>\n<li>如<ul>\n<li>chmod u=rwx,go=rw .bashrc</li>\n<li>chmod a+w .bashrc</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"目录与文件的权限意义\"><a href=\"#目录与文件的权限意义\" class=\"headerlink\" title=\"目录与文件的权限意义\"></a>目录与文件的权限意义</h3><ul>\n<li><p>文件</p>\n<ul>\n<li>r-可以读取文件实际内容</li>\n<li>w-可以编辑修改文件内容，不能删除文件</li>\n<li>x-具有被执行权限，执行成功与否与文件内容有关</li>\n</ul>\n</li>\n<li><p>目录</p>\n<ul>\n<li>r-获取目录结构列表，详细信息获取不到</li>\n<li><p>w-更改该目录结构列表的权限，与文件名变动有关</p>\n<ul>\n<li>新建文件或目录</li>\n<li>删除文件或目录</li>\n<li>重命名</li>\n<li>移动文件、目录位置</li>\n</ul>\n</li>\n<li><p>x-能否进入该目录作为工作目录</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"linux文件种类与扩展名\"><a href=\"#linux文件种类与扩展名\" class=\"headerlink\" title=\"linux文件种类与扩展名\"></a>linux文件种类与扩展名</h3><ul>\n<li><p>普通文件</p>\n<ul>\n<li>用<strong>-</strong>表示</li>\n<li>纯文本文件 - ASCII</li>\n<li>二进制文件</li>\n<li>数据格式文件，具有特殊格式，存储数据</li>\n</ul>\n</li>\n<li><p>目录</p>\n<ul>\n<li>用<strong>d</strong>表示</li>\n</ul>\n</li>\n<li><p>连接文件</p>\n<ul>\n<li>用<strong>l</strong>表示</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"扩展名\"><a href=\"#扩展名\" class=\"headerlink\" title=\"扩展名\"></a>扩展名</h4><blockquote>\n<p>一个文件能不能被linux执行，与它的第一列的10个属性有关，与文件名后缀一点关系没有</p>\n</blockquote>\n<h4 id=\"文件名长度限制\"><a href=\"#文件名长度限制\" class=\"headerlink\" title=\"文件名长度限制\"></a>文件名长度限制</h4><ul>\n<li>单一文件或者目录最大容许的文件名为255个字符</li>\n<li>完整路径名、文件名最大4096个字符</li>\n<li>文件名尽量避免特殊字符</li>\n</ul>\n"},{"title":"Scrapy使用笔记","abbrlink":"20200827a","date":"2020-08-27T06:13:55.000Z","_content":"# 1.创建项目\n \n> scrapy startproject tutorial 创建名为tutorial的项目\n\n# 2.定义Item\n> Items.py:\n\n\timport scrapy\n    \n    class DmozItem(scrapy.Item):\n\t    title = scrapy.Field()\n\t    link = scrapy.Field()\n\t    desc = scrapy.Field()\n\n\n# 3.编写爬虫Spider\n \n> tutorial/spiders/下创建 dmoz_spider.py:\n> \n> 必须继承scrapy.Spider类；定义 name、start_urls、parse()\n\n\timport scrapy\n\t\n\tclass DmozSpider(scrapy.spiders.Spider):\n\t    name = \"dmoz\"\n\t    allowed_domains = [\"dmoz.org\"]\n\t    start_urls = [\n\t        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n\t        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n\t    ]\n\t\n\t    def parse(self, response):\n\t        filename = response.url.split(\"/\")[-2]\n\t        with open(filename, 'wb') as f:\n\t            f.write(response.body)\n\n# 4.爬取数据\n> 首先，进入项目根目录\n>  \n> scrapy crawl dmoz\n\n# 5.提取Item: Xpath 和 css 选择器selector\n\tfor sel in response.xpath('//ul/li'):\n\t    title = sel.xpath('a/text()').extract()\n\t    link = sel.xpath('a/@href').extract()\n\t    desc = sel.xpath('text()').extract()\n\t    print title, link, desc\n\n# 6.使用Item\n\tfrom tutorial.items import DmozItem\n\tdef parse(self, response):\n\t        for sel in response.xpath('//ul/li'):\n\t            item = TutorialItem()\n\t            item['title'] = sel.xpath('a/text()').extract()\n\t            item['link'] = sel.xpath('a/@href').extract()\n\t            item['desc'] = sel.xpath('text()').extract()\n\t            yield item\n\n# 7.保存爬取的数据\n\n> scrapy crawl dmoz -o items.json\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Scrapy笔记.md","raw":"---\ntitle: Scrapy使用笔记\ntags:\n  - 爬虫框架\n  - python\ncategories: python爬虫\nabbrlink: '20200827a'\ndate: 2020-08-27 14:13:55\n---\n# 1.创建项目\n \n> scrapy startproject tutorial 创建名为tutorial的项目\n\n# 2.定义Item\n> Items.py:\n\n\timport scrapy\n    \n    class DmozItem(scrapy.Item):\n\t    title = scrapy.Field()\n\t    link = scrapy.Field()\n\t    desc = scrapy.Field()\n\n\n# 3.编写爬虫Spider\n \n> tutorial/spiders/下创建 dmoz_spider.py:\n> \n> 必须继承scrapy.Spider类；定义 name、start_urls、parse()\n\n\timport scrapy\n\t\n\tclass DmozSpider(scrapy.spiders.Spider):\n\t    name = \"dmoz\"\n\t    allowed_domains = [\"dmoz.org\"]\n\t    start_urls = [\n\t        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n\t        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n\t    ]\n\t\n\t    def parse(self, response):\n\t        filename = response.url.split(\"/\")[-2]\n\t        with open(filename, 'wb') as f:\n\t            f.write(response.body)\n\n# 4.爬取数据\n> 首先，进入项目根目录\n>  \n> scrapy crawl dmoz\n\n# 5.提取Item: Xpath 和 css 选择器selector\n\tfor sel in response.xpath('//ul/li'):\n\t    title = sel.xpath('a/text()').extract()\n\t    link = sel.xpath('a/@href').extract()\n\t    desc = sel.xpath('text()').extract()\n\t    print title, link, desc\n\n# 6.使用Item\n\tfrom tutorial.items import DmozItem\n\tdef parse(self, response):\n\t        for sel in response.xpath('//ul/li'):\n\t            item = TutorialItem()\n\t            item['title'] = sel.xpath('a/text()').extract()\n\t            item['link'] = sel.xpath('a/@href').extract()\n\t            item['desc'] = sel.xpath('text()').extract()\n\t            yield item\n\n# 7.保存爬取的数据\n\n> scrapy crawl dmoz -o items.json\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Scrapy笔记","published":1,"updated":"2020-08-27T06:19:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n0000sdgtq33qng1qk","content":"<h1 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1.创建项目\"></a>1.创建项目</h1><blockquote>\n<p>scrapy startproject tutorial 创建名为tutorial的项目</p>\n</blockquote>\n<h1 id=\"2-定义Item\"><a href=\"#2-定义Item\" class=\"headerlink\" title=\"2.定义Item\"></a>2.定义Item</h1><blockquote>\n<p>Items.py:</p>\n</blockquote>\n<pre><code>import scrapy\n\nclass DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n</code></pre><h1 id=\"3-编写爬虫Spider\"><a href=\"#3-编写爬虫Spider\" class=\"headerlink\" title=\"3.编写爬虫Spider\"></a>3.编写爬虫Spider</h1><blockquote>\n<p>tutorial/spiders/下创建 dmoz_spider.py:</p>\n<p>必须继承scrapy.Spider类；定义 name、start_urls、parse()</p>\n</blockquote>\n<pre><code>import scrapy\n\nclass DmozSpider(scrapy.spiders.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2]\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n</code></pre><h1 id=\"4-爬取数据\"><a href=\"#4-爬取数据\" class=\"headerlink\" title=\"4.爬取数据\"></a>4.爬取数据</h1><blockquote>\n<p>首先，进入项目根目录</p>\n<p>scrapy crawl dmoz</p>\n</blockquote>\n<h1 id=\"5-提取Item-Xpath-和-css-选择器selector\"><a href=\"#5-提取Item-Xpath-和-css-选择器selector\" class=\"headerlink\" title=\"5.提取Item: Xpath 和 css 选择器selector\"></a>5.提取Item: Xpath 和 css 选择器selector</h1><pre><code>for sel in response.xpath('//ul/li'):\n    title = sel.xpath('a/text()').extract()\n    link = sel.xpath('a/@href').extract()\n    desc = sel.xpath('text()').extract()\n    print title, link, desc\n</code></pre><h1 id=\"6-使用Item\"><a href=\"#6-使用Item\" class=\"headerlink\" title=\"6.使用Item\"></a>6.使用Item</h1><pre><code>from tutorial.items import DmozItem\ndef parse(self, response):\n        for sel in response.xpath('//ul/li'):\n            item = TutorialItem()\n            item['title'] = sel.xpath('a/text()').extract()\n            item['link'] = sel.xpath('a/@href').extract()\n            item['desc'] = sel.xpath('text()').extract()\n            yield item\n</code></pre><h1 id=\"7-保存爬取的数据\"><a href=\"#7-保存爬取的数据\" class=\"headerlink\" title=\"7.保存爬取的数据\"></a>7.保存爬取的数据</h1><blockquote>\n<p>scrapy crawl dmoz -o items.json</p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1.创建项目\"></a>1.创建项目</h1><blockquote>\n<p>scrapy startproject tutorial 创建名为tutorial的项目</p>\n</blockquote>\n<h1 id=\"2-定义Item\"><a href=\"#2-定义Item\" class=\"headerlink\" title=\"2.定义Item\"></a>2.定义Item</h1><blockquote>\n<p>Items.py:</p>\n</blockquote>\n<pre><code>import scrapy\n\nclass DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n</code></pre><h1 id=\"3-编写爬虫Spider\"><a href=\"#3-编写爬虫Spider\" class=\"headerlink\" title=\"3.编写爬虫Spider\"></a>3.编写爬虫Spider</h1><blockquote>\n<p>tutorial/spiders/下创建 dmoz_spider.py:</p>\n<p>必须继承scrapy.Spider类；定义 name、start_urls、parse()</p>\n</blockquote>\n<pre><code>import scrapy\n\nclass DmozSpider(scrapy.spiders.Spider):\n    name = &quot;dmoz&quot;\n    allowed_domains = [&quot;dmoz.org&quot;]\n    start_urls = [\n        &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n        &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n    ]\n\n    def parse(self, response):\n        filename = response.url.split(&quot;/&quot;)[-2]\n        with open(filename, &#39;wb&#39;) as f:\n            f.write(response.body)\n</code></pre><h1 id=\"4-爬取数据\"><a href=\"#4-爬取数据\" class=\"headerlink\" title=\"4.爬取数据\"></a>4.爬取数据</h1><blockquote>\n<p>首先，进入项目根目录</p>\n<p>scrapy crawl dmoz</p>\n</blockquote>\n<h1 id=\"5-提取Item-Xpath-和-css-选择器selector\"><a href=\"#5-提取Item-Xpath-和-css-选择器selector\" class=\"headerlink\" title=\"5.提取Item: Xpath 和 css 选择器selector\"></a>5.提取Item: Xpath 和 css 选择器selector</h1><pre><code>for sel in response.xpath(&#39;//ul/li&#39;):\n    title = sel.xpath(&#39;a/text()&#39;).extract()\n    link = sel.xpath(&#39;a/@href&#39;).extract()\n    desc = sel.xpath(&#39;text()&#39;).extract()\n    print title, link, desc\n</code></pre><h1 id=\"6-使用Item\"><a href=\"#6-使用Item\" class=\"headerlink\" title=\"6.使用Item\"></a>6.使用Item</h1><pre><code>from tutorial.items import DmozItem\ndef parse(self, response):\n        for sel in response.xpath(&#39;//ul/li&#39;):\n            item = TutorialItem()\n            item[&#39;title&#39;] = sel.xpath(&#39;a/text()&#39;).extract()\n            item[&#39;link&#39;] = sel.xpath(&#39;a/@href&#39;).extract()\n            item[&#39;desc&#39;] = sel.xpath(&#39;text()&#39;).extract()\n            yield item\n</code></pre><h1 id=\"7-保存爬取的数据\"><a href=\"#7-保存爬取的数据\" class=\"headerlink\" title=\"7.保存爬取的数据\"></a>7.保存爬取的数据</h1><blockquote>\n<p>scrapy crawl dmoz -o items.json</p>\n</blockquote>\n"},{"title":"VS code - Module 'torch' has no 'xxx' member","date":"2020-09-04T03:05:05.000Z","abbrlink":"20200904a","_content":"# vscode  'torch' has no 'xxx' member\n\nvscode User settings中加上\n\n    \"python.linting.pylintArgs\": [\n        \"–errors-only\",\n        \"–generated-members=numpy.* ,torch.* ,cv2.* , cv.*\",\n    ]","source":"_posts/VS-code-Module-torch-has-no-xxx-member.md","raw":"---\ntitle: VS code - Module 'torch' has no 'xxx' member\ndate: 2020-09-04 11:05:05\ntags: \n\t- VS code\ncategories: \n\t- VS code\nabbrlink: '20200904a' \n---\n# vscode  'torch' has no 'xxx' member\n\nvscode User settings中加上\n\n    \"python.linting.pylintArgs\": [\n        \"–errors-only\",\n        \"–generated-members=numpy.* ,torch.* ,cv2.* , cv.*\",\n    ]","slug":"VS-code-Module-torch-has-no-xxx-member","published":1,"updated":"2020-09-08T07:30:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n1000udgtq6lz68e55","content":"<h1 id=\"vscode-‘torch’-has-no-‘xxx’-member\"><a href=\"#vscode-‘torch’-has-no-‘xxx’-member\" class=\"headerlink\" title=\"vscode  ‘torch’ has no ‘xxx’ member\"></a>vscode  ‘torch’ has no ‘xxx’ member</h1><p>vscode User settings中加上</p>\n<pre><code>\"python.linting.pylintArgs\": [\n    \"–errors-only\",\n    \"–generated-members=numpy.* ,torch.* ,cv2.* , cv.*\",\n]\n</code></pre><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vscode-‘torch’-has-no-‘xxx’-member\"><a href=\"#vscode-‘torch’-has-no-‘xxx’-member\" class=\"headerlink\" title=\"vscode  ‘torch’ has no ‘xxx’ member\"></a>vscode  ‘torch’ has no ‘xxx’ member</h1><p>vscode User settings中加上</p>\n<pre><code>&quot;python.linting.pylintArgs&quot;: [\n    &quot;–errors-only&quot;,\n    &quot;–generated-members=numpy.* ,torch.* ,cv2.* , cv.*&quot;,\n]\n</code></pre>"},{"title":"dpkg强制卸载软件","date":"2021-02-06T07:34:09.000Z","abbrlink":"20210206","_content":"\n# dpkg强制卸载软件，忽略依赖warning\n\n```\nsudo dpkg --purge --force-depends 软件名\n```\n例如：\n```\nsudo dpkg --purge --force-depends \"libglvnd-dev\"\n```\n","source":"_posts/dpkg强制卸载软件.md","raw":"---\ntitle: dpkg强制卸载软件\ndate: 2021-02-06 15:34:09\ntags: dpkg\ncategories: dpkg\nabbrlink: '20210206'\n---\n\n# dpkg强制卸载软件，忽略依赖warning\n\n```\nsudo dpkg --purge --force-depends 软件名\n```\n例如：\n```\nsudo dpkg --purge --force-depends \"libglvnd-dev\"\n```\n","slug":"dpkg强制卸载软件","published":1,"updated":"2021-02-06T07:38:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n3000zdgtqbnqm3pai","content":"<h1 id=\"dpkg强制卸载软件，忽略依赖warning\"><a href=\"#dpkg强制卸载软件，忽略依赖warning\" class=\"headerlink\" title=\"dpkg强制卸载软件，忽略依赖warning\"></a>dpkg强制卸载软件，忽略依赖warning</h1><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --purge --force-depends 软件名</span><br></pre></td></tr></tbody></table></figure>\n<p>例如：<br></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --purge --force-depends \"libglvnd-dev\"</span><br></pre></td></tr></tbody></table></figure><p></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dpkg强制卸载软件，忽略依赖warning\"><a href=\"#dpkg强制卸载软件，忽略依赖warning\" class=\"headerlink\" title=\"dpkg强制卸载软件，忽略依赖warning\"></a>dpkg强制卸载软件，忽略依赖warning</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --purge --force-depends 软件名</span><br></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --purge --force-depends &quot;libglvnd-dev&quot;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"markdownPad2 -- 破解","date":"2020-09-02T11:57:49.000Z","abbrlink":"20200902a","_content":"\n## Email address :\n> Soar360@live.com  \n\n## License key : \n\n> GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==","source":"_posts/markdownPad2-破解.md","raw":"---\ntitle: markdownPad2 -- 破解\ndate: 2020-09-02 19:57:49\ntags: \n\t- MarkdownPad2\ncategories: \n\t- MarkdownPad2\nabbrlink: '20200902a'\n---\n\n## Email address :\n> Soar360@live.com  \n\n## License key : \n\n> GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==","slug":"markdownPad2-破解","published":1,"updated":"2020-09-02T11:59:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n40012dgtq6e5zejw0","content":"<h2 id=\"Email-address\"><a href=\"#Email-address\" class=\"headerlink\" title=\"Email address :\"></a>Email address :</h2><blockquote>\n<p>Soar360@live.com  </p>\n</blockquote>\n<h2 id=\"License-key\"><a href=\"#License-key\" class=\"headerlink\" title=\"License key :\"></a>License key :</h2><blockquote>\n<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Email-address\"><a href=\"#Email-address\" class=\"headerlink\" title=\"Email address :\"></a>Email address :</h2><blockquote>\n<p>Soar360@live.com  </p>\n</blockquote>\n<h2 id=\"License-key\"><a href=\"#License-key\" class=\"headerlink\" title=\"License key :\"></a>License key :</h2><blockquote>\n<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>\n</blockquote>\n"},{"title":"主题模型","date":"2020-09-21T05:38:41.000Z","abbrlink":"20200921-TopicModel","_content":"\n# 主题模型 （Topic Model）\n\n* **主题模型**（Topic Model）是以无监督学习的方式对文档的隐含语义结构(latent semantic structure)进行聚类(clustering)的统计模型。\n\n> 主题模型认为在词(word)与文档(document)之间没有直接的联系，应当还有一个维度将它们串联起来，这个维度称为主题(topic)。\n\n每个文档都对应着一个或多个主题，而每个主题都有对应的词分布，通过主题，就可以得到每个文档的词分布。\n\n由此有公式：\n\n$$p(\\omega_i | d_j) = \\sum _{k=1} ^{K} p(\\omega_i | t_k) \\times p( t_k | d_j), \n其中\\omega表示词，d表示文档，t表示主题，K表示主题个数$$\n\n> 在一个已知的数据集中，词和文档对应的$p(\\omega_i | d_j)$都是已知的。主题模型就是根据这个已知的信息，通过计算$p(\\omega_i | t_k)$和$p( t_k | d_j)$，从而得到**主题的词分布**和**文档的主题分布**信息。\n\n常用方法\n* LSA（Latent Semantic Analysis）\n    * 主要采用SVD（奇异值分解）暴力破解\n* LDA（Latent Dirichlet Allocation, 隐含狄利克雷分布）\n    * 贝叶斯学派方法论进行拟合\n\n# LSA（Latent Semantic Analysis）\n\nLSA最初用在语义检索上，为解决**一词多义**和**一义多词**的问题：\n* 一义多词： \n> 美女和PPMM表示相同的含义，但是单纯依靠检索词“美女”来检索文档，很可能丧失掉那些包含“PPMM”的文档。\n* 一词多义：\n> 如果输入检索词是多个检索词组成的一个小document，例如“清澈 孩子”，那我们就知道这段文字主要想表达concept是和道德相关的，不应该将“春天到了，小河多么的清澈”这样的文本包含在内。\n\n为了能够解决这个问题，需要将词语（term）中的concept提取出来，建立一个词语和概念的关联关系（t-c relationship），这样一个文档就能表示成为概念的向量。这样输入一段检索词之后，就可以先将检索词转换为概念，再通过概念去匹配文档\n\n# LDA (Latent Dirichlet Allocation)\n\n**隐含狄利克雷分布**（Latent Dirichlet Allocation, LDA）是由David Blei等人在**2003**年提出的，该方法的理论基础是**贝叶斯理论**。\n\n> LDA根据**词的共现信息**，拟合出词-文档-主题的分布，进而将词、文本都映射到一个语义空间中。\n\nLDA算法假设文档中主题的先验分布和主题中词的先验分布都服从狄利克雷分布。在贝叶斯学派看来，先验分布+数据(似然)=后验分布。我们通过对已有数据集的统计，就可以得到每篇文档中主题的多项式分布和每个主题对应词的多项式分布。然后就可以根据贝叶斯学派的方法，通过先验的狄利克雷分布和观测数据得到的多项式分布，得到一组Dirichlet-multi共轭，并据此来推断文档中主题的后验分布，也就是我们最后需要的结果。那么具体的LDA模型应当如何进行求解，其中一种主流的方法就是吉布斯采样。结合吉布斯采样的LDA模型训练过程一般如下：\n\n随机初始化，对语料中每篇文档中的每个词w，随机地赋予一个topic编号z。\n重新扫描语料库，对每个词w按照吉布斯采样公式重新采样它的topic，在语料中进行更新。\n重复以上语料库的重新采样过程直到吉布斯采样收敛。\n统计语料库的topic-word共现频率矩阵，该矩阵就是LDA的模型。\n经过以上的步骤，就得到一个训练好的LDA模型，接下来就可以按照一定的方式针对新文档的topic进行预估，具体步骤如下：\n\n随机初始化，对当前文档中的每个词w，随机地赋予一个topic编号z。\n重新扫描当前文档，按照吉布斯采样公式，重新采样它的topic。\n重复以上过程直到吉布斯采样收敛。\n统计文档中的topic分布即为预估结果。\n\n\n\n\n\n\n\n","source":"_posts/主题模型.md","raw":"---\ntitle: 主题模型\ndate: 2020-09-21 13:38:41\ntags: \n    - Topic Model\n    - 主题模型\ncategories: \n    - Topic Model\n    - 主题模型\nabbrlink: '20200921-TopicModel'\n---\n\n# 主题模型 （Topic Model）\n\n* **主题模型**（Topic Model）是以无监督学习的方式对文档的隐含语义结构(latent semantic structure)进行聚类(clustering)的统计模型。\n\n> 主题模型认为在词(word)与文档(document)之间没有直接的联系，应当还有一个维度将它们串联起来，这个维度称为主题(topic)。\n\n每个文档都对应着一个或多个主题，而每个主题都有对应的词分布，通过主题，就可以得到每个文档的词分布。\n\n由此有公式：\n\n$$p(\\omega_i | d_j) = \\sum _{k=1} ^{K} p(\\omega_i | t_k) \\times p( t_k | d_j), \n其中\\omega表示词，d表示文档，t表示主题，K表示主题个数$$\n\n> 在一个已知的数据集中，词和文档对应的$p(\\omega_i | d_j)$都是已知的。主题模型就是根据这个已知的信息，通过计算$p(\\omega_i | t_k)$和$p( t_k | d_j)$，从而得到**主题的词分布**和**文档的主题分布**信息。\n\n常用方法\n* LSA（Latent Semantic Analysis）\n    * 主要采用SVD（奇异值分解）暴力破解\n* LDA（Latent Dirichlet Allocation, 隐含狄利克雷分布）\n    * 贝叶斯学派方法论进行拟合\n\n# LSA（Latent Semantic Analysis）\n\nLSA最初用在语义检索上，为解决**一词多义**和**一义多词**的问题：\n* 一义多词： \n> 美女和PPMM表示相同的含义，但是单纯依靠检索词“美女”来检索文档，很可能丧失掉那些包含“PPMM”的文档。\n* 一词多义：\n> 如果输入检索词是多个检索词组成的一个小document，例如“清澈 孩子”，那我们就知道这段文字主要想表达concept是和道德相关的，不应该将“春天到了，小河多么的清澈”这样的文本包含在内。\n\n为了能够解决这个问题，需要将词语（term）中的concept提取出来，建立一个词语和概念的关联关系（t-c relationship），这样一个文档就能表示成为概念的向量。这样输入一段检索词之后，就可以先将检索词转换为概念，再通过概念去匹配文档\n\n# LDA (Latent Dirichlet Allocation)\n\n**隐含狄利克雷分布**（Latent Dirichlet Allocation, LDA）是由David Blei等人在**2003**年提出的，该方法的理论基础是**贝叶斯理论**。\n\n> LDA根据**词的共现信息**，拟合出词-文档-主题的分布，进而将词、文本都映射到一个语义空间中。\n\nLDA算法假设文档中主题的先验分布和主题中词的先验分布都服从狄利克雷分布。在贝叶斯学派看来，先验分布+数据(似然)=后验分布。我们通过对已有数据集的统计，就可以得到每篇文档中主题的多项式分布和每个主题对应词的多项式分布。然后就可以根据贝叶斯学派的方法，通过先验的狄利克雷分布和观测数据得到的多项式分布，得到一组Dirichlet-multi共轭，并据此来推断文档中主题的后验分布，也就是我们最后需要的结果。那么具体的LDA模型应当如何进行求解，其中一种主流的方法就是吉布斯采样。结合吉布斯采样的LDA模型训练过程一般如下：\n\n随机初始化，对语料中每篇文档中的每个词w，随机地赋予一个topic编号z。\n重新扫描语料库，对每个词w按照吉布斯采样公式重新采样它的topic，在语料中进行更新。\n重复以上语料库的重新采样过程直到吉布斯采样收敛。\n统计语料库的topic-word共现频率矩阵，该矩阵就是LDA的模型。\n经过以上的步骤，就得到一个训练好的LDA模型，接下来就可以按照一定的方式针对新文档的topic进行预估，具体步骤如下：\n\n随机初始化，对当前文档中的每个词w，随机地赋予一个topic编号z。\n重新扫描当前文档，按照吉布斯采样公式，重新采样它的topic。\n重复以上过程直到吉布斯采样收敛。\n统计文档中的topic分布即为预估结果。\n\n\n\n\n\n\n\n","slug":"主题模型","published":1,"updated":"2020-09-22T04:40:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n60016dgtq1ul45sls","content":"<h1 id=\"主题模型-（Topic-Model）\"><a href=\"#主题模型-（Topic-Model）\" class=\"headerlink\" title=\"主题模型 （Topic Model）\"></a>主题模型 （Topic Model）</h1><ul>\n<li><strong>主题模型</strong>（Topic Model）是以无监督学习的方式对文档的隐含语义结构(latent semantic structure)进行聚类(clustering)的统计模型。</li>\n</ul>\n<blockquote>\n<p>主题模型认为在词(word)与文档(document)之间没有直接的联系，应当还有一个维度将它们串联起来，这个维度称为主题(topic)。</p>\n</blockquote>\n<p>每个文档都对应着一个或多个主题，而每个主题都有对应的词分布，通过主题，就可以得到每个文档的词分布。</p>\n<p>由此有公式：</p>\n<script type=\"math/tex; mode=display\">p(\\omega_i | d_j) = \\sum _{k=1} ^{K} p(\\omega_i | t_k) \\times p( t_k | d_j), \n其中\\omega表示词，d表示文档，t表示主题，K表示主题个数</script><blockquote>\n<p>在一个已知的数据集中，词和文档对应的$p(\\omega_i | d_j)$都是已知的。主题模型就是根据这个已知的信息，通过计算$p(\\omega_i | t_k)$和$p( t_k | d_j)$，从而得到<strong>主题的词分布</strong>和<strong>文档的主题分布</strong>信息。</p>\n</blockquote>\n<p>常用方法</p>\n<ul>\n<li>LSA（Latent Semantic Analysis）<ul>\n<li>主要采用SVD（奇异值分解）暴力破解</li>\n</ul>\n</li>\n<li>LDA（Latent Dirichlet Allocation, 隐含狄利克雷分布）<ul>\n<li>贝叶斯学派方法论进行拟合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"LSA（Latent-Semantic-Analysis）\"><a href=\"#LSA（Latent-Semantic-Analysis）\" class=\"headerlink\" title=\"LSA（Latent Semantic Analysis）\"></a>LSA（Latent Semantic Analysis）</h1><p>LSA最初用在语义检索上，为解决<strong>一词多义</strong>和<strong>一义多词</strong>的问题：</p>\n<ul>\n<li>一义多词： <blockquote>\n<p>美女和PPMM表示相同的含义，但是单纯依靠检索词“美女”来检索文档，很可能丧失掉那些包含“PPMM”的文档。</p>\n</blockquote>\n</li>\n<li>一词多义：<blockquote>\n<p>如果输入检索词是多个检索词组成的一个小document，例如“清澈 孩子”，那我们就知道这段文字主要想表达concept是和道德相关的，不应该将“春天到了，小河多么的清澈”这样的文本包含在内。</p>\n</blockquote>\n</li>\n</ul>\n<p>为了能够解决这个问题，需要将词语（term）中的concept提取出来，建立一个词语和概念的关联关系（t-c relationship），这样一个文档就能表示成为概念的向量。这样输入一段检索词之后，就可以先将检索词转换为概念，再通过概念去匹配文档</p>\n<h1 id=\"LDA-Latent-Dirichlet-Allocation\"><a href=\"#LDA-Latent-Dirichlet-Allocation\" class=\"headerlink\" title=\"LDA (Latent Dirichlet Allocation)\"></a>LDA (Latent Dirichlet Allocation)</h1><p><strong>隐含狄利克雷分布</strong>（Latent Dirichlet Allocation, LDA）是由David Blei等人在<strong>2003</strong>年提出的，该方法的理论基础是<strong>贝叶斯理论</strong>。</p>\n<blockquote>\n<p>LDA根据<strong>词的共现信息</strong>，拟合出词-文档-主题的分布，进而将词、文本都映射到一个语义空间中。</p>\n</blockquote>\n<p>LDA算法假设文档中主题的先验分布和主题中词的先验分布都服从狄利克雷分布。在贝叶斯学派看来，先验分布+数据(似然)=后验分布。我们通过对已有数据集的统计，就可以得到每篇文档中主题的多项式分布和每个主题对应词的多项式分布。然后就可以根据贝叶斯学派的方法，通过先验的狄利克雷分布和观测数据得到的多项式分布，得到一组Dirichlet-multi共轭，并据此来推断文档中主题的后验分布，也就是我们最后需要的结果。那么具体的LDA模型应当如何进行求解，其中一种主流的方法就是吉布斯采样。结合吉布斯采样的LDA模型训练过程一般如下：</p>\n<p>随机初始化，对语料中每篇文档中的每个词w，随机地赋予一个topic编号z。<br>重新扫描语料库，对每个词w按照吉布斯采样公式重新采样它的topic，在语料中进行更新。<br>重复以上语料库的重新采样过程直到吉布斯采样收敛。<br>统计语料库的topic-word共现频率矩阵，该矩阵就是LDA的模型。<br>经过以上的步骤，就得到一个训练好的LDA模型，接下来就可以按照一定的方式针对新文档的topic进行预估，具体步骤如下：</p>\n<p>随机初始化，对当前文档中的每个词w，随机地赋予一个topic编号z。<br>重新扫描当前文档，按照吉布斯采样公式，重新采样它的topic。<br>重复以上过程直到吉布斯采样收敛。<br>统计文档中的topic分布即为预估结果。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"主题模型-（Topic-Model）\"><a href=\"#主题模型-（Topic-Model）\" class=\"headerlink\" title=\"主题模型 （Topic Model）\"></a>主题模型 （Topic Model）</h1><ul>\n<li><strong>主题模型</strong>（Topic Model）是以无监督学习的方式对文档的隐含语义结构(latent semantic structure)进行聚类(clustering)的统计模型。</li>\n</ul>\n<blockquote>\n<p>主题模型认为在词(word)与文档(document)之间没有直接的联系，应当还有一个维度将它们串联起来，这个维度称为主题(topic)。</p>\n</blockquote>\n<p>每个文档都对应着一个或多个主题，而每个主题都有对应的词分布，通过主题，就可以得到每个文档的词分布。</p>\n<p>由此有公式：</p>\n<script type=\"math/tex; mode=display\">p(\\omega_i | d_j) = \\sum _{k=1} ^{K} p(\\omega_i | t_k) \\times p( t_k | d_j), \n其中\\omega表示词，d表示文档，t表示主题，K表示主题个数</script><blockquote>\n<p>在一个已知的数据集中，词和文档对应的$p(\\omega_i | d_j)$都是已知的。主题模型就是根据这个已知的信息，通过计算$p(\\omega_i | t_k)$和$p( t_k | d_j)$，从而得到<strong>主题的词分布</strong>和<strong>文档的主题分布</strong>信息。</p>\n</blockquote>\n<p>常用方法</p>\n<ul>\n<li>LSA（Latent Semantic Analysis）<ul>\n<li>主要采用SVD（奇异值分解）暴力破解</li>\n</ul>\n</li>\n<li>LDA（Latent Dirichlet Allocation, 隐含狄利克雷分布）<ul>\n<li>贝叶斯学派方法论进行拟合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"LSA（Latent-Semantic-Analysis）\"><a href=\"#LSA（Latent-Semantic-Analysis）\" class=\"headerlink\" title=\"LSA（Latent Semantic Analysis）\"></a>LSA（Latent Semantic Analysis）</h1><p>LSA最初用在语义检索上，为解决<strong>一词多义</strong>和<strong>一义多词</strong>的问题：</p>\n<ul>\n<li>一义多词： <blockquote>\n<p>美女和PPMM表示相同的含义，但是单纯依靠检索词“美女”来检索文档，很可能丧失掉那些包含“PPMM”的文档。</p>\n</blockquote>\n</li>\n<li>一词多义：<blockquote>\n<p>如果输入检索词是多个检索词组成的一个小document，例如“清澈 孩子”，那我们就知道这段文字主要想表达concept是和道德相关的，不应该将“春天到了，小河多么的清澈”这样的文本包含在内。</p>\n</blockquote>\n</li>\n</ul>\n<p>为了能够解决这个问题，需要将词语（term）中的concept提取出来，建立一个词语和概念的关联关系（t-c relationship），这样一个文档就能表示成为概念的向量。这样输入一段检索词之后，就可以先将检索词转换为概念，再通过概念去匹配文档</p>\n<h1 id=\"LDA-Latent-Dirichlet-Allocation\"><a href=\"#LDA-Latent-Dirichlet-Allocation\" class=\"headerlink\" title=\"LDA (Latent Dirichlet Allocation)\"></a>LDA (Latent Dirichlet Allocation)</h1><p><strong>隐含狄利克雷分布</strong>（Latent Dirichlet Allocation, LDA）是由David Blei等人在<strong>2003</strong>年提出的，该方法的理论基础是<strong>贝叶斯理论</strong>。</p>\n<blockquote>\n<p>LDA根据<strong>词的共现信息</strong>，拟合出词-文档-主题的分布，进而将词、文本都映射到一个语义空间中。</p>\n</blockquote>\n<p>LDA算法假设文档中主题的先验分布和主题中词的先验分布都服从狄利克雷分布。在贝叶斯学派看来，先验分布+数据(似然)=后验分布。我们通过对已有数据集的统计，就可以得到每篇文档中主题的多项式分布和每个主题对应词的多项式分布。然后就可以根据贝叶斯学派的方法，通过先验的狄利克雷分布和观测数据得到的多项式分布，得到一组Dirichlet-multi共轭，并据此来推断文档中主题的后验分布，也就是我们最后需要的结果。那么具体的LDA模型应当如何进行求解，其中一种主流的方法就是吉布斯采样。结合吉布斯采样的LDA模型训练过程一般如下：</p>\n<p>随机初始化，对语料中每篇文档中的每个词w，随机地赋予一个topic编号z。<br>重新扫描语料库，对每个词w按照吉布斯采样公式重新采样它的topic，在语料中进行更新。<br>重复以上语料库的重新采样过程直到吉布斯采样收敛。<br>统计语料库的topic-word共现频率矩阵，该矩阵就是LDA的模型。<br>经过以上的步骤，就得到一个训练好的LDA模型，接下来就可以按照一定的方式针对新文档的topic进行预估，具体步骤如下：</p>\n<p>随机初始化，对当前文档中的每个词w，随机地赋予一个topic编号z。<br>重新扫描当前文档，按照吉布斯采样公式，重新采样它的topic。<br>重复以上过程直到吉布斯采样收敛。<br>统计文档中的topic分布即为预估结果。</p>\n"},{"title":"入门","abbrlink":"b4c6216f","date":"2020-07-05T16:07:54.000Z","_content":"\n# markdown","source":"_posts/入门.md","raw":"---\ntitle: 入门\nabbrlink: b4c6216f\ncategories: 入门\ndate: 2020-07-06 00:07:54\ntags: markdown\n---\n\n# markdown","slug":"入门","published":1,"updated":"2020-07-15T07:36:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n70017dgtq9atx1a0h","content":"<h1 id=\"markdown\"><a href=\"#markdown\" class=\"headerlink\" title=\"markdown\"></a>markdown</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"markdown\"><a href=\"#markdown\" class=\"headerlink\" title=\"markdown\"></a>markdown</h1>"},{"title":"计算机概论","abbrlink":"92710899","date":"2020-07-05T15:26:55.000Z","_content":"# 计算机\n\n> 接收用户输入指令与数据，经过中央处理器的数据与逻辑单元运算处理后，以产生或存储成有用的信息。\n\n## 计算机硬件的五大单元\n\n* 输入单元：键盘、鼠标等\n* CPU内部的控制单元\n* CPU内部的算术逻辑单元\n* 内存：CPU实际要处理的数据都来自内存\n* 输出单元：显示器、打印机等\n\n## CPU种类\n\n* 精简指令集系统 RISC\n\t* ARM系列\n\t* SPARC系列\n* 复杂指令集系统 CISC\n\t* AMD、Intel等x86架构\n\n## 接口设备\n\n* 主板\n\t* 主板芯片组\n* 存储设备\n\t* 硬盘、光盘\n* 显示设备\n\t* 显卡\n* 网络设备\n\t* 网卡\n\n## 计算机分类\n\n* 超级计算机\n* 大型计算机\n* 迷你计算机\n* 工作站\n* 个人计算机\n\t* 台式机\n\t* 笔记本电脑\n\n# PC机架构与接口设备\n\n> x86架构\n> 主要有Intel、AMD\n\n## 主板芯片组\n\n* 北桥负责连接速度较快的CPU、内存、显卡等组件\n\t* 系统总线\n* 南桥负责连接速度较慢的周边接口，包括硬盘、USB、网卡等\n\t* 输入输出总线（I/O）\n* 特别注意，AMD的内存直接与CPU连接，不通过北桥\n\n## CPU\n\n* 频率\n\t* 不同的CPU由于微指令集不同、架构不同、每次频率能进行的工作指令数也不同，所以只能用来比较同款CPU的速度\n\t* 外频\n\t\t* CPU与外部组件进行数据传输/运算时的速度\n\t\t* 通常超频，就是超的外频\n\t* 倍频\n\t\t* CPU内部用来加速工作性能的一个倍数\n\t\t* 出厂时通常被锁定，无法更改\n\t* 外频 * 倍频 = 频率\n\n* 总线与位数\n\t* 北桥所支持的频率：**前端总线速度**\n\t\t* 2666MHz\n\t* 每次传送的位数：**总线带宽**\n\t\t* 32/64\n\t* **总线频宽** = 总线带宽 * 前端总线速度\n\t* CPU每次能够处理解析的数据量：**字组大小**\t\n\t\t* **字组大小**可以与**总线带宽**不相同\n\t\t* 通常说的计算机位数，是指**字组大小**\n\n* CPU等级\n\t* 目前64位CPU：x86_64等级\n\n## 内存\n\n* DRAM 动态随机访问内存\n\t* 内存主要组件就是DRAM，断电数据消失\n\t* DDR:双倍数据传送速度\n* 对服务器而言，内存的容量有时比CPU速度还重要\n* 双通道设计\n\t* 扩大内存数据宽度\n* CPU与内存的外率要尽量一致为佳\n\n* SRAM 静态随机访问内存\n\t* 通常SRAM容量较小、速度频率高，用作CPU 的L2缓存，集成到CPU内部\n* ROM 只读存储器\n\t* 非挥发性内存，断电数据不消失\n\t* BIOS程序存储在ROM中，开机首先会读取BIOS程序\n\t* 固件，也是一个程序，是对硬件更加重要的部分，最初也是使用ROM来进行软件的写入，现在写入到闪存或EEPROM中\n\n## 显卡\n\n* 显存、3D加速芯片GPU\n* PCI-Express（PCIe）规格\n\n## 硬盘与存储设备\n\n* 物理组成\n\t* 盘片\n\t* 机械手臂\n\t* 磁头\n\t* 主轴马达\n* 数据\n\t* 磁道\n\t* 扇区 512B\n\t* 柱面\n\t\t* 分割硬盘的最小单位\n* 传输接口\n\t* IDE接口\n\t* SATA接口\n\t* SCSI接口\n\n## CMOS与BIOS\n\n* CMOS主要功能为，记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O地址与IRQ等,需要主板上的电池供电\n* BIOS是写入到主板上某一块闪存或EEPROM的程序，它可以在开机的时候执行，以加载CMOS当中的参数，并尝试调用存储设备中的开机程序，进一步进入到操作系统中。\n\n## 操作系统\n\n* 两部分\n\t* 内核\n\t\t* 直接参考硬件规格生成\n\t\t* 功能：\n\t\t\t* 系统调用接口\n\t\t\t* 程序管理\n\t\t\t* 内存管理\n\t\t\t* 文件系统管理\n\t\t\t* 设备驱动\n\t* 系统调用\n\n* 目前操作系统都会包含内核和相关的用户应用软件\n* 操作系统只是在管理整个硬件资源，包括CPU、内存、输入输出设备及系统文件\n* 应用程序的开发都是参考操作系统提供的开发接口，所以该应用程序只能在该操作系统上面运行\n\n\n\n\n\n \n","source":"_posts/计算机概论.md","raw":"---\ntitle: 计算机概论\ntags:\n  - linux\ncategories: Linux-鸟哥私房菜\nabbrlink: '92710899'\ndate: 2020-07-05 23:26:55\n---\n# 计算机\n\n> 接收用户输入指令与数据，经过中央处理器的数据与逻辑单元运算处理后，以产生或存储成有用的信息。\n\n## 计算机硬件的五大单元\n\n* 输入单元：键盘、鼠标等\n* CPU内部的控制单元\n* CPU内部的算术逻辑单元\n* 内存：CPU实际要处理的数据都来自内存\n* 输出单元：显示器、打印机等\n\n## CPU种类\n\n* 精简指令集系统 RISC\n\t* ARM系列\n\t* SPARC系列\n* 复杂指令集系统 CISC\n\t* AMD、Intel等x86架构\n\n## 接口设备\n\n* 主板\n\t* 主板芯片组\n* 存储设备\n\t* 硬盘、光盘\n* 显示设备\n\t* 显卡\n* 网络设备\n\t* 网卡\n\n## 计算机分类\n\n* 超级计算机\n* 大型计算机\n* 迷你计算机\n* 工作站\n* 个人计算机\n\t* 台式机\n\t* 笔记本电脑\n\n# PC机架构与接口设备\n\n> x86架构\n> 主要有Intel、AMD\n\n## 主板芯片组\n\n* 北桥负责连接速度较快的CPU、内存、显卡等组件\n\t* 系统总线\n* 南桥负责连接速度较慢的周边接口，包括硬盘、USB、网卡等\n\t* 输入输出总线（I/O）\n* 特别注意，AMD的内存直接与CPU连接，不通过北桥\n\n## CPU\n\n* 频率\n\t* 不同的CPU由于微指令集不同、架构不同、每次频率能进行的工作指令数也不同，所以只能用来比较同款CPU的速度\n\t* 外频\n\t\t* CPU与外部组件进行数据传输/运算时的速度\n\t\t* 通常超频，就是超的外频\n\t* 倍频\n\t\t* CPU内部用来加速工作性能的一个倍数\n\t\t* 出厂时通常被锁定，无法更改\n\t* 外频 * 倍频 = 频率\n\n* 总线与位数\n\t* 北桥所支持的频率：**前端总线速度**\n\t\t* 2666MHz\n\t* 每次传送的位数：**总线带宽**\n\t\t* 32/64\n\t* **总线频宽** = 总线带宽 * 前端总线速度\n\t* CPU每次能够处理解析的数据量：**字组大小**\t\n\t\t* **字组大小**可以与**总线带宽**不相同\n\t\t* 通常说的计算机位数，是指**字组大小**\n\n* CPU等级\n\t* 目前64位CPU：x86_64等级\n\n## 内存\n\n* DRAM 动态随机访问内存\n\t* 内存主要组件就是DRAM，断电数据消失\n\t* DDR:双倍数据传送速度\n* 对服务器而言，内存的容量有时比CPU速度还重要\n* 双通道设计\n\t* 扩大内存数据宽度\n* CPU与内存的外率要尽量一致为佳\n\n* SRAM 静态随机访问内存\n\t* 通常SRAM容量较小、速度频率高，用作CPU 的L2缓存，集成到CPU内部\n* ROM 只读存储器\n\t* 非挥发性内存，断电数据不消失\n\t* BIOS程序存储在ROM中，开机首先会读取BIOS程序\n\t* 固件，也是一个程序，是对硬件更加重要的部分，最初也是使用ROM来进行软件的写入，现在写入到闪存或EEPROM中\n\n## 显卡\n\n* 显存、3D加速芯片GPU\n* PCI-Express（PCIe）规格\n\n## 硬盘与存储设备\n\n* 物理组成\n\t* 盘片\n\t* 机械手臂\n\t* 磁头\n\t* 主轴马达\n* 数据\n\t* 磁道\n\t* 扇区 512B\n\t* 柱面\n\t\t* 分割硬盘的最小单位\n* 传输接口\n\t* IDE接口\n\t* SATA接口\n\t* SCSI接口\n\n## CMOS与BIOS\n\n* CMOS主要功能为，记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O地址与IRQ等,需要主板上的电池供电\n* BIOS是写入到主板上某一块闪存或EEPROM的程序，它可以在开机的时候执行，以加载CMOS当中的参数，并尝试调用存储设备中的开机程序，进一步进入到操作系统中。\n\n## 操作系统\n\n* 两部分\n\t* 内核\n\t\t* 直接参考硬件规格生成\n\t\t* 功能：\n\t\t\t* 系统调用接口\n\t\t\t* 程序管理\n\t\t\t* 内存管理\n\t\t\t* 文件系统管理\n\t\t\t* 设备驱动\n\t* 系统调用\n\n* 目前操作系统都会包含内核和相关的用户应用软件\n* 操作系统只是在管理整个硬件资源，包括CPU、内存、输入输出设备及系统文件\n* 应用程序的开发都是参考操作系统提供的开发接口，所以该应用程序只能在该操作系统上面运行\n\n\n\n\n\n \n","slug":"计算机概论","published":1,"updated":"2020-07-06T03:12:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n8001bdgtq9oaw40bi","content":"<h1 id=\"计算机\"><a href=\"#计算机\" class=\"headerlink\" title=\"计算机\"></a>计算机</h1><blockquote>\n<p>接收用户输入指令与数据，经过中央处理器的数据与逻辑单元运算处理后，以产生或存储成有用的信息。</p>\n</blockquote>\n<h2 id=\"计算机硬件的五大单元\"><a href=\"#计算机硬件的五大单元\" class=\"headerlink\" title=\"计算机硬件的五大单元\"></a>计算机硬件的五大单元</h2><ul>\n<li>输入单元：键盘、鼠标等</li>\n<li>CPU内部的控制单元</li>\n<li>CPU内部的算术逻辑单元</li>\n<li>内存：CPU实际要处理的数据都来自内存</li>\n<li>输出单元：显示器、打印机等</li>\n</ul>\n<h2 id=\"CPU种类\"><a href=\"#CPU种类\" class=\"headerlink\" title=\"CPU种类\"></a>CPU种类</h2><ul>\n<li>精简指令集系统 RISC<ul>\n<li>ARM系列</li>\n<li>SPARC系列</li>\n</ul>\n</li>\n<li>复杂指令集系统 CISC<ul>\n<li>AMD、Intel等x86架构</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"接口设备\"><a href=\"#接口设备\" class=\"headerlink\" title=\"接口设备\"></a>接口设备</h2><ul>\n<li>主板<ul>\n<li>主板芯片组</li>\n</ul>\n</li>\n<li>存储设备<ul>\n<li>硬盘、光盘</li>\n</ul>\n</li>\n<li>显示设备<ul>\n<li>显卡</li>\n</ul>\n</li>\n<li>网络设备<ul>\n<li>网卡</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"计算机分类\"><a href=\"#计算机分类\" class=\"headerlink\" title=\"计算机分类\"></a>计算机分类</h2><ul>\n<li>超级计算机</li>\n<li>大型计算机</li>\n<li>迷你计算机</li>\n<li>工作站</li>\n<li>个人计算机<ul>\n<li>台式机</li>\n<li>笔记本电脑</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"PC机架构与接口设备\"><a href=\"#PC机架构与接口设备\" class=\"headerlink\" title=\"PC机架构与接口设备\"></a>PC机架构与接口设备</h1><blockquote>\n<p>x86架构<br>主要有Intel、AMD</p>\n</blockquote>\n<h2 id=\"主板芯片组\"><a href=\"#主板芯片组\" class=\"headerlink\" title=\"主板芯片组\"></a>主板芯片组</h2><ul>\n<li>北桥负责连接速度较快的CPU、内存、显卡等组件<ul>\n<li>系统总线</li>\n</ul>\n</li>\n<li>南桥负责连接速度较慢的周边接口，包括硬盘、USB、网卡等<ul>\n<li>输入输出总线（I/O）</li>\n</ul>\n</li>\n<li>特别注意，AMD的内存直接与CPU连接，不通过北桥</li>\n</ul>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><ul>\n<li><p>频率</p>\n<ul>\n<li>不同的CPU由于微指令集不同、架构不同、每次频率能进行的工作指令数也不同，所以只能用来比较同款CPU的速度</li>\n<li>外频<ul>\n<li>CPU与外部组件进行数据传输/运算时的速度</li>\n<li>通常超频，就是超的外频</li>\n</ul>\n</li>\n<li>倍频<ul>\n<li>CPU内部用来加速工作性能的一个倍数</li>\n<li>出厂时通常被锁定，无法更改</li>\n</ul>\n</li>\n<li>外频 * 倍频 = 频率</li>\n</ul>\n</li>\n<li><p>总线与位数</p>\n<ul>\n<li>北桥所支持的频率：<strong>前端总线速度</strong><ul>\n<li>2666MHz</li>\n</ul>\n</li>\n<li>每次传送的位数：<strong>总线带宽</strong><ul>\n<li>32/64</li>\n</ul>\n</li>\n<li><strong>总线频宽</strong> = 总线带宽 * 前端总线速度</li>\n<li>CPU每次能够处理解析的数据量：<strong>字组大小</strong>    <ul>\n<li><strong>字组大小</strong>可以与<strong>总线带宽</strong>不相同</li>\n<li>通常说的计算机位数，是指<strong>字组大小</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>CPU等级</p>\n<ul>\n<li>目前64位CPU：x86_64等级</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><ul>\n<li>DRAM 动态随机访问内存<ul>\n<li>内存主要组件就是DRAM，断电数据消失</li>\n<li>DDR:双倍数据传送速度</li>\n</ul>\n</li>\n<li>对服务器而言，内存的容量有时比CPU速度还重要</li>\n<li>双通道设计<ul>\n<li>扩大内存数据宽度</li>\n</ul>\n</li>\n<li><p>CPU与内存的外率要尽量一致为佳</p>\n</li>\n<li><p>SRAM 静态随机访问内存</p>\n<ul>\n<li>通常SRAM容量较小、速度频率高，用作CPU 的L2缓存，集成到CPU内部</li>\n</ul>\n</li>\n<li>ROM 只读存储器<ul>\n<li>非挥发性内存，断电数据不消失</li>\n<li>BIOS程序存储在ROM中，开机首先会读取BIOS程序</li>\n<li>固件，也是一个程序，是对硬件更加重要的部分，最初也是使用ROM来进行软件的写入，现在写入到闪存或EEPROM中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h2><ul>\n<li>显存、3D加速芯片GPU</li>\n<li>PCI-Express（PCIe）规格</li>\n</ul>\n<h2 id=\"硬盘与存储设备\"><a href=\"#硬盘与存储设备\" class=\"headerlink\" title=\"硬盘与存储设备\"></a>硬盘与存储设备</h2><ul>\n<li>物理组成<ul>\n<li>盘片</li>\n<li>机械手臂</li>\n<li>磁头</li>\n<li>主轴马达</li>\n</ul>\n</li>\n<li>数据<ul>\n<li>磁道</li>\n<li>扇区 512B</li>\n<li>柱面<ul>\n<li>分割硬盘的最小单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>传输接口<ul>\n<li>IDE接口</li>\n<li>SATA接口</li>\n<li>SCSI接口</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CMOS与BIOS\"><a href=\"#CMOS与BIOS\" class=\"headerlink\" title=\"CMOS与BIOS\"></a>CMOS与BIOS</h2><ul>\n<li>CMOS主要功能为，记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O地址与IRQ等,需要主板上的电池供电</li>\n<li>BIOS是写入到主板上某一块闪存或EEPROM的程序，它可以在开机的时候执行，以加载CMOS当中的参数，并尝试调用存储设备中的开机程序，进一步进入到操作系统中。</li>\n</ul>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><ul>\n<li><p>两部分</p>\n<ul>\n<li>内核<ul>\n<li>直接参考硬件规格生成</li>\n<li>功能：<ul>\n<li>系统调用接口</li>\n<li>程序管理</li>\n<li>内存管理</li>\n<li>文件系统管理</li>\n<li>设备驱动</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>系统调用</li>\n</ul>\n</li>\n<li><p>目前操作系统都会包含内核和相关的用户应用软件</p>\n</li>\n<li>操作系统只是在管理整个硬件资源，包括CPU、内存、输入输出设备及系统文件</li>\n<li>应用程序的开发都是参考操作系统提供的开发接口，所以该应用程序只能在该操作系统上面运行</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机\"><a href=\"#计算机\" class=\"headerlink\" title=\"计算机\"></a>计算机</h1><blockquote>\n<p>接收用户输入指令与数据，经过中央处理器的数据与逻辑单元运算处理后，以产生或存储成有用的信息。</p>\n</blockquote>\n<h2 id=\"计算机硬件的五大单元\"><a href=\"#计算机硬件的五大单元\" class=\"headerlink\" title=\"计算机硬件的五大单元\"></a>计算机硬件的五大单元</h2><ul>\n<li>输入单元：键盘、鼠标等</li>\n<li>CPU内部的控制单元</li>\n<li>CPU内部的算术逻辑单元</li>\n<li>内存：CPU实际要处理的数据都来自内存</li>\n<li>输出单元：显示器、打印机等</li>\n</ul>\n<h2 id=\"CPU种类\"><a href=\"#CPU种类\" class=\"headerlink\" title=\"CPU种类\"></a>CPU种类</h2><ul>\n<li>精简指令集系统 RISC<ul>\n<li>ARM系列</li>\n<li>SPARC系列</li>\n</ul>\n</li>\n<li>复杂指令集系统 CISC<ul>\n<li>AMD、Intel等x86架构</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"接口设备\"><a href=\"#接口设备\" class=\"headerlink\" title=\"接口设备\"></a>接口设备</h2><ul>\n<li>主板<ul>\n<li>主板芯片组</li>\n</ul>\n</li>\n<li>存储设备<ul>\n<li>硬盘、光盘</li>\n</ul>\n</li>\n<li>显示设备<ul>\n<li>显卡</li>\n</ul>\n</li>\n<li>网络设备<ul>\n<li>网卡</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"计算机分类\"><a href=\"#计算机分类\" class=\"headerlink\" title=\"计算机分类\"></a>计算机分类</h2><ul>\n<li>超级计算机</li>\n<li>大型计算机</li>\n<li>迷你计算机</li>\n<li>工作站</li>\n<li>个人计算机<ul>\n<li>台式机</li>\n<li>笔记本电脑</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"PC机架构与接口设备\"><a href=\"#PC机架构与接口设备\" class=\"headerlink\" title=\"PC机架构与接口设备\"></a>PC机架构与接口设备</h1><blockquote>\n<p>x86架构<br>主要有Intel、AMD</p>\n</blockquote>\n<h2 id=\"主板芯片组\"><a href=\"#主板芯片组\" class=\"headerlink\" title=\"主板芯片组\"></a>主板芯片组</h2><ul>\n<li>北桥负责连接速度较快的CPU、内存、显卡等组件<ul>\n<li>系统总线</li>\n</ul>\n</li>\n<li>南桥负责连接速度较慢的周边接口，包括硬盘、USB、网卡等<ul>\n<li>输入输出总线（I/O）</li>\n</ul>\n</li>\n<li>特别注意，AMD的内存直接与CPU连接，不通过北桥</li>\n</ul>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><ul>\n<li><p>频率</p>\n<ul>\n<li>不同的CPU由于微指令集不同、架构不同、每次频率能进行的工作指令数也不同，所以只能用来比较同款CPU的速度</li>\n<li>外频<ul>\n<li>CPU与外部组件进行数据传输/运算时的速度</li>\n<li>通常超频，就是超的外频</li>\n</ul>\n</li>\n<li>倍频<ul>\n<li>CPU内部用来加速工作性能的一个倍数</li>\n<li>出厂时通常被锁定，无法更改</li>\n</ul>\n</li>\n<li>外频 * 倍频 = 频率</li>\n</ul>\n</li>\n<li><p>总线与位数</p>\n<ul>\n<li>北桥所支持的频率：<strong>前端总线速度</strong><ul>\n<li>2666MHz</li>\n</ul>\n</li>\n<li>每次传送的位数：<strong>总线带宽</strong><ul>\n<li>32/64</li>\n</ul>\n</li>\n<li><strong>总线频宽</strong> = 总线带宽 * 前端总线速度</li>\n<li>CPU每次能够处理解析的数据量：<strong>字组大小</strong>    <ul>\n<li><strong>字组大小</strong>可以与<strong>总线带宽</strong>不相同</li>\n<li>通常说的计算机位数，是指<strong>字组大小</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>CPU等级</p>\n<ul>\n<li>目前64位CPU：x86_64等级</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><ul>\n<li>DRAM 动态随机访问内存<ul>\n<li>内存主要组件就是DRAM，断电数据消失</li>\n<li>DDR:双倍数据传送速度</li>\n</ul>\n</li>\n<li>对服务器而言，内存的容量有时比CPU速度还重要</li>\n<li>双通道设计<ul>\n<li>扩大内存数据宽度</li>\n</ul>\n</li>\n<li><p>CPU与内存的外率要尽量一致为佳</p>\n</li>\n<li><p>SRAM 静态随机访问内存</p>\n<ul>\n<li>通常SRAM容量较小、速度频率高，用作CPU 的L2缓存，集成到CPU内部</li>\n</ul>\n</li>\n<li>ROM 只读存储器<ul>\n<li>非挥发性内存，断电数据不消失</li>\n<li>BIOS程序存储在ROM中，开机首先会读取BIOS程序</li>\n<li>固件，也是一个程序，是对硬件更加重要的部分，最初也是使用ROM来进行软件的写入，现在写入到闪存或EEPROM中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h2><ul>\n<li>显存、3D加速芯片GPU</li>\n<li>PCI-Express（PCIe）规格</li>\n</ul>\n<h2 id=\"硬盘与存储设备\"><a href=\"#硬盘与存储设备\" class=\"headerlink\" title=\"硬盘与存储设备\"></a>硬盘与存储设备</h2><ul>\n<li>物理组成<ul>\n<li>盘片</li>\n<li>机械手臂</li>\n<li>磁头</li>\n<li>主轴马达</li>\n</ul>\n</li>\n<li>数据<ul>\n<li>磁道</li>\n<li>扇区 512B</li>\n<li>柱面<ul>\n<li>分割硬盘的最小单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>传输接口<ul>\n<li>IDE接口</li>\n<li>SATA接口</li>\n<li>SCSI接口</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CMOS与BIOS\"><a href=\"#CMOS与BIOS\" class=\"headerlink\" title=\"CMOS与BIOS\"></a>CMOS与BIOS</h2><ul>\n<li>CMOS主要功能为，记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O地址与IRQ等,需要主板上的电池供电</li>\n<li>BIOS是写入到主板上某一块闪存或EEPROM的程序，它可以在开机的时候执行，以加载CMOS当中的参数，并尝试调用存储设备中的开机程序，进一步进入到操作系统中。</li>\n</ul>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><ul>\n<li><p>两部分</p>\n<ul>\n<li>内核<ul>\n<li>直接参考硬件规格生成</li>\n<li>功能：<ul>\n<li>系统调用接口</li>\n<li>程序管理</li>\n<li>内存管理</li>\n<li>文件系统管理</li>\n<li>设备驱动</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>系统调用</li>\n</ul>\n</li>\n<li><p>目前操作系统都会包含内核和相关的用户应用软件</p>\n</li>\n<li>操作系统只是在管理整个硬件资源，包括CPU、内存、输入输出设备及系统文件</li>\n<li>应用程序的开发都是参考操作系统提供的开发接口，所以该应用程序只能在该操作系统上面运行</li>\n</ul>\n"},{"title":"论文笔记--关系抽取概述","date":"2020-07-11T11:02:41.000Z","abbrlink":"200711ia","_content":"\n# Neural Relation Extraction\n\n## Embedding\n\n1.Improving Distantly-Supervised Relation Extraction with Joint Label Embedding, EMNLP/IJCNLP 2019\n\n> 利用KG中结构化的三元组信息$(h,r,t)$和实体描述(WikiPedia主页中的第一段文本)，学习Label的嵌入向量表示，结合注意力机制，以选择bag内的有效句子。\n\n## Encoder\n\n## Selector\n\n## Classifier\n\n","source":"_posts/论文笔记-关系抽取概述.md","raw":"---\ntitle: 论文笔记--关系抽取概述\ndate: 2020-07-11 19:02:41\ntags: Relation Extraction\ncategories: Relation Extraction Notes\nabbrlink: '200711ia'\n---\n\n# Neural Relation Extraction\n\n## Embedding\n\n1.Improving Distantly-Supervised Relation Extraction with Joint Label Embedding, EMNLP/IJCNLP 2019\n\n> 利用KG中结构化的三元组信息$(h,r,t)$和实体描述(WikiPedia主页中的第一段文本)，学习Label的嵌入向量表示，结合注意力机制，以选择bag内的有效句子。\n\n## Encoder\n\n## Selector\n\n## Classifier\n\n","slug":"论文笔记-关系抽取概述","published":1,"updated":"2020-09-22T12:49:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82n9001edgtq9kj4394s","content":"<h1 id=\"Neural-Relation-Extraction\"><a href=\"#Neural-Relation-Extraction\" class=\"headerlink\" title=\"Neural Relation Extraction\"></a>Neural Relation Extraction</h1><h2 id=\"Embedding\"><a href=\"#Embedding\" class=\"headerlink\" title=\"Embedding\"></a>Embedding</h2><p>1.Improving Distantly-Supervised Relation Extraction with Joint Label Embedding, EMNLP/IJCNLP 2019</p>\n<blockquote>\n<p>利用KG中结构化的三元组信息$(h,r,t)$和实体描述(WikiPedia主页中的第一段文本)，学习Label的嵌入向量表示，结合注意力机制，以选择bag内的有效句子。</p>\n</blockquote>\n<h2 id=\"Encoder\"><a href=\"#Encoder\" class=\"headerlink\" title=\"Encoder\"></a>Encoder</h2><h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><h2 id=\"Classifier\"><a href=\"#Classifier\" class=\"headerlink\" title=\"Classifier\"></a>Classifier</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Neural-Relation-Extraction\"><a href=\"#Neural-Relation-Extraction\" class=\"headerlink\" title=\"Neural Relation Extraction\"></a>Neural Relation Extraction</h1><h2 id=\"Embedding\"><a href=\"#Embedding\" class=\"headerlink\" title=\"Embedding\"></a>Embedding</h2><p>1.Improving Distantly-Supervised Relation Extraction with Joint Label Embedding, EMNLP/IJCNLP 2019</p>\n<blockquote>\n<p>利用KG中结构化的三元组信息$(h,r,t)$和实体描述(WikiPedia主页中的第一段文本)，学习Label的嵌入向量表示，结合注意力机制，以选择bag内的有效句子。</p>\n</blockquote>\n<h2 id=\"Encoder\"><a href=\"#Encoder\" class=\"headerlink\" title=\"Encoder\"></a>Encoder</h2><h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><h2 id=\"Classifier\"><a href=\"#Classifier\" class=\"headerlink\" title=\"Classifier\"></a>Classifier</h2>"},{"title":"软件学报2020--基于带噪观测的远监督神经网络关系抽取","date":"2020-10-20T14:01:19.000Z","abbrlink":"20201020","_content":"\n# 拟解决问题\n\n远程监督关系抽取的标记噪音问题\n\n# 出发点\n\n提出”**远程监督中，最终句子对齐的标签是基于某些未知因素所生成的带噪观测结果**”这一假设。\n\n# 模型\n\n模型结构如下图所示：\n\n![带噪观测模型](软件学报2020-基于带噪观测的远监督神经网络关系抽取/model.jpg)\n\n\n\n\n","source":"_posts/软件学报2020-基于带噪观测的远监督神经网络关系抽取.md","raw":"---\ntitle: 软件学报2020--基于带噪观测的远监督神经网络关系抽取\ndate: 2020-10-20 22:01:19\ntags: \n\t- 软件学报 2020\n\t- Relation Extraction\ncategories: \n\t- Relation Extraction Notes\n\t- 软件学报 2020\nabbrlink: '20201020'\n---\n\n# 拟解决问题\n\n远程监督关系抽取的标记噪音问题\n\n# 出发点\n\n提出”**远程监督中，最终句子对齐的标签是基于某些未知因素所生成的带噪观测结果**”这一假设。\n\n# 模型\n\n模型结构如下图所示：\n\n![带噪观测模型](软件学报2020-基于带噪观测的远监督神经网络关系抽取/model.jpg)\n\n\n\n\n","slug":"软件学报2020-基于带噪观测的远监督神经网络关系抽取","published":1,"updated":"2020-10-21T07:33:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82na001idgtqbxmjddiv","content":"<h1 id=\"拟解决问题\"><a href=\"#拟解决问题\" class=\"headerlink\" title=\"拟解决问题\"></a>拟解决问题</h1><p>远程监督关系抽取的标记噪音问题</p>\n<h1 id=\"出发点\"><a href=\"#出发点\" class=\"headerlink\" title=\"出发点\"></a>出发点</h1><p>提出”<strong>远程监督中，最终句子对齐的标签是基于某些未知因素所生成的带噪观测结果</strong>”这一假设。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><p>模型结构如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201020/model.jpg\" alt=\"带噪观测模型\" title=\"\">\n                </div>\n                <div class=\"image-caption\">带噪观测模型</div>\n            </figure>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"拟解决问题\"><a href=\"#拟解决问题\" class=\"headerlink\" title=\"拟解决问题\"></a>拟解决问题</h1><p>远程监督关系抽取的标记噪音问题</p>\n<h1 id=\"出发点\"><a href=\"#出发点\" class=\"headerlink\" title=\"出发点\"></a>出发点</h1><p>提出”<strong>远程监督中，最终句子对齐的标签是基于某些未知因素所生成的带噪观测结果</strong>”这一假设。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><p>模型结构如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/posts/20201020/model.jpg\" alt=\"带噪观测模型\" title>\n                </div>\n                <div class=\"image-caption\">带噪观测模型</div>\n            </figure>\n"},{"title":"首次登录与在线求助","date":"2020-07-11T02:01:31.000Z","abbrlink":"927108io","_content":"\n# X window与命令行模式的切换\n\n* 命令行模式，也称为终端界面（terminal或者console）\n* 启动的程序称为**shell**，linux默认的shell就是bash\n\n> Linux默认情况会提供6个terminal来让用户登录，切换的方式是：[Ctrl]+[Alt]+[F1]~[F6],用户名密码登录，exit注销\n> \n> 这六个终端界面命名为 tty1~tty6，[Ctrl]+[Alt]+[F7]返回图形界面tty7\n\n## Linux登录模式\n\n* 仅有纯文本界面\n\t* 运行等级 **run level 3**\n* 图形界面登录环境\n\t* 运行等级 **run level 5**\n\n## Linux运行等级\n\n* 共计**7**个run level\n* 最常用到的是run level 3 与run level 5\n\n> 若想要更改linux默认的登录模式，需要修改 **/etc/inittab**，下次重启生效\n\n## ~说明\n\n* ~代表的是用户的主文件夹，它是个变化的值\n\t* root的主目录：/root\n\t* hanrd这个用户的主目录：/home/hanrd\n\n## 提示符\n\n* root提示符 **#**\n* 一般用户提示符 **$**\n\n# 执行命令\n\n* 格式为: 命令 选项 参数1 参数2 ...\n\t* command [-options] parameter1 ...\n\t* 一行命令的第一个部分绝对是**命令command**或**可执行文件**\n\t* 选项参数设置\n\t\t* -后面接选项的简写\n\t\t* --后面接选项的全名\n\t\t* 特殊情况会有 +\n\t* 各部分用空格分隔，不论几个空格，都按照一个空格对待\n\t* 按下回车Enter开始执行\n\t* 命令太长可以用反斜杠\\转义Enter，下一行续写\n* 特别注意，linux命令大小写敏感\n\t\n\n> ls\n> \n> ls -al ~\n> \n> ls -a -l ~\n\n# 基础命令\n\n* echo $LANG\n\t* 显示目前所支持的语言\n\n* LANG=en_US\n\t* 临时修改为英语\n\n* date\n\t* 显示日期与时间\n\t* date +%Y/%m/%d 特定输出\n\n* cal\n\t* 显示日历\n\t* cal 12 2020 指定年月\n\n* bc\n\t* 显示计算器\n\t* quit离开\n\t* +、-、*、/、^、%\n\t* 默认只输出结果的整数位\n\t* 保留小数要执行**scale=3**，指定保留几位小数\n\n# 常用快捷键\n\n* [Tab]\n\t* 命令补全\n\t* 文件补齐\n\n* [Ctrl] + c\n\t* 中断目前程序/命令\n\n* [Ctrl] + d\n\t* 表示键盘输入结束\n\t* 可以用来直接离开文字界面，关闭terminal\n\t* 相当于输入exit\n\n# 在线求助 man page / info page \n\n## man page\n\n* man是manual（操作说明）缩写\n* 查询出的页面，叫做man page\n* 如，man date\n* man page的文件数据通常放在**/usr/share/man**目录里，可通过修改名为**/etc/man.config**的文件更改目录（不同的distribution文件名略有不同）\n\n### 详细说明\n\n* 诸如“DATE(1)”中的数字的意义（1-9），**常用数字**如下：\n\t* 1--用户在shell环境中可以操作的命令或者可执行文件\n\t* 5--配置文件或者是某些文件的格式\n\t* 8--系统管理员可用的管理命令\n\n* man page **主要内容**包括：\n\t* NAME--简短的命令、数据名称说明\n\t* SYNOPSIS--简短的命令执行语法简介\n\t* DESCRIPTION--较为完整的说明，这部分最好仔细看看\n\t* OPTIONS--针对SYNOPSIS的所有的可用的选项的说明\n\t* SEE ALSO--其他参考材料\n\t* FILES--某些有关的文件\n\t* 其他诸如，EXAMPLES、BUGS、AUTHORS等\n\n* man page **常用按键**\n\t* 向下翻一页\n\t\t* 空格\n\t\t* [Page Down]\n\t* 向上翻一页\n\t\t* [Page Up]\n\t* 回到第一页\n\t\t* [Home]\n\t* 去到最后一页\n\t\t* [End]\n\t* 向下查询字符串\n\t\t* /string\n\t* 向上查询字符串\n\t\t* ?string\n\t* 继续查询\n\t\t* n继续当前查询方向查询写一个\n\t\t* N当前查询方向逆方向查询下一个\n\t* 离开\n\t\t* q\n\n* 高阶命令\n\t* 查找与指定命令或数据有关的man page文件\n\t\t* whatis 命令或数据 \n\t\t\t* 需要root权限执行 makewhatis创建whatis数据库\n\t\t* man -f 命令或数据\n\n\t* 查找包含指定关键字的man page文件\n\t\t* apropos 命令或数据\n\t\t\t* 需要root权限执行 makewhatis创建whatis数据库\n\t\t* man -k 命令或数据\n\n## info page\n\n> info与man的用途差不多\n> \n> info page将文件数据拆成一个一个的段落，每个段落用自己的页面撰写，并且每个页面有“超链接”来跳到不同的页面中，每个独立的页面称为**节点（Node）**\n> \n> info page是只有linux才有的产物，必须按照info page的格式撰写求助文件才能具有info page的功能，info page的文件放置于**/usr/share/info/**目录中\n> \n> 非info page格式的文件也能用info显示，只不过显示效果与man相同\n\n### info page内容\n\n* 第一行\n\t* File--文件名（xx.info）\n\t* Node--节点名\n\t* Next--下一个节点\n\t* Up--回到上一层的节点总览界面\n\t* Prev--上一个节点\n\n* Menu\n\t* 可使用方向键选择，按下[Enter]，前往该小节\n\t* 也可[Tab]，在节点间移动\n\n### 按键\n\n* 空格键 -- 向下翻页\n* [Page Down] -- 向下翻页\n* [Page Up] -- 向上翻页\n* [Tab] -- 在节点间移动，节点以“*”显示\n* [Enter] -- 进入该节点\n* B -- 光标移至info界面第一个节点处\n* E -- 光标移至info界面最后一个节点处\n* N -- 前往下一个节点\n* P -- 前往上一个节点\n* U -- 向上移动一层\n* S或者/ -- 查询搜索\n* H -- 显示求助菜单\n* ? -- 命令一览表\n* Q -- 离开\n\n> 上述命令不区分大小写字母\n\n## 其他文档 documents\n\n* **/usr/share/doc**目录包含一些额外的说明文件，包含how-to及相关原理说明\n\n## 文本编辑器 nano\n\n* 进入nano\n\t* nano text.txt\n\n* 离开nano\n\t* [Ctrl] + X\n\t* Y/N\n\n* 查询字符串\n\t* [Ctrl] + W\n\n> ^表示[Ctrl]\n> \n> M表示[Alt]\n\n## 正确关机方法\n\n* 关机时要注意：\n\t* 查看系统的使用状态\n\t\t* who 查看谁在线\n\t\t* netstat -a 查看网络联机状态\n\t\t* ps -aux 查看后台执行的程序\n\t* 通知在线用户关机的时刻\n\t* 正确的关机命令使用\n\t\t* shutdown\n\t\t* reboot\n* 非正常关机可能造成文件系统的毁损\n\n### 数据同步写入硬盘\n\t\n* 命令\n\t* sync\n\n* 目的\n\t* 在默认情况下，某些已经加载内存中的数据不会直接被写回硬盘，而是先存在内存中，因而，特殊情况或者非正常关机会使数据的更新不正常\n\t* 需要sync将内存里的尚未被更新的数据写入硬盘\n\n### 常用关机重启命令\n\n#### shutdown\n\n> shutdown可以完成如下工作：\n> \n> 可以自由选择关机模式：关机、重启、单用户操作模式\n> \n> 可以设置关机时间\n> \n> 可以自定义关机消息\n> \n> 可以仅发出警告消息，不关机或重启\n> \n> 可以选择是否要用fsck检查文件系统\n\n* shutdown -- 依据目前已启动的服务逐次关闭各服务，然后关机\n\t* shutdown -h now\n\t\t* 立刻关机\n\t* shutdown -h 20:25\n\t\t* 20：25关机\n\t* shutdown -h +10\n\t\t* 十分钟后关机\n\t* shutdown -r now\n\t\t* 立即重启\n\t* shutdown -r +30 'the system will reboot'\n\t\t* 30分钟后重启，在目前登录者的屏幕前方显示该信息\n    * shutdown -k now 'the system will reboot'\n\t    * 仅发出警告消息，系统不会关机\n\n#### reboot \n\n* 重启\n* 通常执行:  sync;sync;sync;reboot\n\n#### halt \n\n* 不理会目前系统状态，硬件关机\n\n#### poweroff\n* 关机\n\t* poweroff -f\n\n#### 切换执行等级 init\n\n* run level 0\n\t* 关机\n* run level 3\n\t* 纯命令行模式\n* run level 5\n\t* 含有图形界面模式\n* run level 6\n\t* 重启\n\n> **init 0**也可以关机\n","source":"_posts/首次登录与在线求助.md","raw":"---\ntitle: 首次登录与在线求助\ndate: 2020-07-11 10:01:31\ntags: linux\ncategories: Linux-鸟哥私房菜\nabbrlink: '927108io'\n---\n\n# X window与命令行模式的切换\n\n* 命令行模式，也称为终端界面（terminal或者console）\n* 启动的程序称为**shell**，linux默认的shell就是bash\n\n> Linux默认情况会提供6个terminal来让用户登录，切换的方式是：[Ctrl]+[Alt]+[F1]~[F6],用户名密码登录，exit注销\n> \n> 这六个终端界面命名为 tty1~tty6，[Ctrl]+[Alt]+[F7]返回图形界面tty7\n\n## Linux登录模式\n\n* 仅有纯文本界面\n\t* 运行等级 **run level 3**\n* 图形界面登录环境\n\t* 运行等级 **run level 5**\n\n## Linux运行等级\n\n* 共计**7**个run level\n* 最常用到的是run level 3 与run level 5\n\n> 若想要更改linux默认的登录模式，需要修改 **/etc/inittab**，下次重启生效\n\n## ~说明\n\n* ~代表的是用户的主文件夹，它是个变化的值\n\t* root的主目录：/root\n\t* hanrd这个用户的主目录：/home/hanrd\n\n## 提示符\n\n* root提示符 **#**\n* 一般用户提示符 **$**\n\n# 执行命令\n\n* 格式为: 命令 选项 参数1 参数2 ...\n\t* command [-options] parameter1 ...\n\t* 一行命令的第一个部分绝对是**命令command**或**可执行文件**\n\t* 选项参数设置\n\t\t* -后面接选项的简写\n\t\t* --后面接选项的全名\n\t\t* 特殊情况会有 +\n\t* 各部分用空格分隔，不论几个空格，都按照一个空格对待\n\t* 按下回车Enter开始执行\n\t* 命令太长可以用反斜杠\\转义Enter，下一行续写\n* 特别注意，linux命令大小写敏感\n\t\n\n> ls\n> \n> ls -al ~\n> \n> ls -a -l ~\n\n# 基础命令\n\n* echo $LANG\n\t* 显示目前所支持的语言\n\n* LANG=en_US\n\t* 临时修改为英语\n\n* date\n\t* 显示日期与时间\n\t* date +%Y/%m/%d 特定输出\n\n* cal\n\t* 显示日历\n\t* cal 12 2020 指定年月\n\n* bc\n\t* 显示计算器\n\t* quit离开\n\t* +、-、*、/、^、%\n\t* 默认只输出结果的整数位\n\t* 保留小数要执行**scale=3**，指定保留几位小数\n\n# 常用快捷键\n\n* [Tab]\n\t* 命令补全\n\t* 文件补齐\n\n* [Ctrl] + c\n\t* 中断目前程序/命令\n\n* [Ctrl] + d\n\t* 表示键盘输入结束\n\t* 可以用来直接离开文字界面，关闭terminal\n\t* 相当于输入exit\n\n# 在线求助 man page / info page \n\n## man page\n\n* man是manual（操作说明）缩写\n* 查询出的页面，叫做man page\n* 如，man date\n* man page的文件数据通常放在**/usr/share/man**目录里，可通过修改名为**/etc/man.config**的文件更改目录（不同的distribution文件名略有不同）\n\n### 详细说明\n\n* 诸如“DATE(1)”中的数字的意义（1-9），**常用数字**如下：\n\t* 1--用户在shell环境中可以操作的命令或者可执行文件\n\t* 5--配置文件或者是某些文件的格式\n\t* 8--系统管理员可用的管理命令\n\n* man page **主要内容**包括：\n\t* NAME--简短的命令、数据名称说明\n\t* SYNOPSIS--简短的命令执行语法简介\n\t* DESCRIPTION--较为完整的说明，这部分最好仔细看看\n\t* OPTIONS--针对SYNOPSIS的所有的可用的选项的说明\n\t* SEE ALSO--其他参考材料\n\t* FILES--某些有关的文件\n\t* 其他诸如，EXAMPLES、BUGS、AUTHORS等\n\n* man page **常用按键**\n\t* 向下翻一页\n\t\t* 空格\n\t\t* [Page Down]\n\t* 向上翻一页\n\t\t* [Page Up]\n\t* 回到第一页\n\t\t* [Home]\n\t* 去到最后一页\n\t\t* [End]\n\t* 向下查询字符串\n\t\t* /string\n\t* 向上查询字符串\n\t\t* ?string\n\t* 继续查询\n\t\t* n继续当前查询方向查询写一个\n\t\t* N当前查询方向逆方向查询下一个\n\t* 离开\n\t\t* q\n\n* 高阶命令\n\t* 查找与指定命令或数据有关的man page文件\n\t\t* whatis 命令或数据 \n\t\t\t* 需要root权限执行 makewhatis创建whatis数据库\n\t\t* man -f 命令或数据\n\n\t* 查找包含指定关键字的man page文件\n\t\t* apropos 命令或数据\n\t\t\t* 需要root权限执行 makewhatis创建whatis数据库\n\t\t* man -k 命令或数据\n\n## info page\n\n> info与man的用途差不多\n> \n> info page将文件数据拆成一个一个的段落，每个段落用自己的页面撰写，并且每个页面有“超链接”来跳到不同的页面中，每个独立的页面称为**节点（Node）**\n> \n> info page是只有linux才有的产物，必须按照info page的格式撰写求助文件才能具有info page的功能，info page的文件放置于**/usr/share/info/**目录中\n> \n> 非info page格式的文件也能用info显示，只不过显示效果与man相同\n\n### info page内容\n\n* 第一行\n\t* File--文件名（xx.info）\n\t* Node--节点名\n\t* Next--下一个节点\n\t* Up--回到上一层的节点总览界面\n\t* Prev--上一个节点\n\n* Menu\n\t* 可使用方向键选择，按下[Enter]，前往该小节\n\t* 也可[Tab]，在节点间移动\n\n### 按键\n\n* 空格键 -- 向下翻页\n* [Page Down] -- 向下翻页\n* [Page Up] -- 向上翻页\n* [Tab] -- 在节点间移动，节点以“*”显示\n* [Enter] -- 进入该节点\n* B -- 光标移至info界面第一个节点处\n* E -- 光标移至info界面最后一个节点处\n* N -- 前往下一个节点\n* P -- 前往上一个节点\n* U -- 向上移动一层\n* S或者/ -- 查询搜索\n* H -- 显示求助菜单\n* ? -- 命令一览表\n* Q -- 离开\n\n> 上述命令不区分大小写字母\n\n## 其他文档 documents\n\n* **/usr/share/doc**目录包含一些额外的说明文件，包含how-to及相关原理说明\n\n## 文本编辑器 nano\n\n* 进入nano\n\t* nano text.txt\n\n* 离开nano\n\t* [Ctrl] + X\n\t* Y/N\n\n* 查询字符串\n\t* [Ctrl] + W\n\n> ^表示[Ctrl]\n> \n> M表示[Alt]\n\n## 正确关机方法\n\n* 关机时要注意：\n\t* 查看系统的使用状态\n\t\t* who 查看谁在线\n\t\t* netstat -a 查看网络联机状态\n\t\t* ps -aux 查看后台执行的程序\n\t* 通知在线用户关机的时刻\n\t* 正确的关机命令使用\n\t\t* shutdown\n\t\t* reboot\n* 非正常关机可能造成文件系统的毁损\n\n### 数据同步写入硬盘\n\t\n* 命令\n\t* sync\n\n* 目的\n\t* 在默认情况下，某些已经加载内存中的数据不会直接被写回硬盘，而是先存在内存中，因而，特殊情况或者非正常关机会使数据的更新不正常\n\t* 需要sync将内存里的尚未被更新的数据写入硬盘\n\n### 常用关机重启命令\n\n#### shutdown\n\n> shutdown可以完成如下工作：\n> \n> 可以自由选择关机模式：关机、重启、单用户操作模式\n> \n> 可以设置关机时间\n> \n> 可以自定义关机消息\n> \n> 可以仅发出警告消息，不关机或重启\n> \n> 可以选择是否要用fsck检查文件系统\n\n* shutdown -- 依据目前已启动的服务逐次关闭各服务，然后关机\n\t* shutdown -h now\n\t\t* 立刻关机\n\t* shutdown -h 20:25\n\t\t* 20：25关机\n\t* shutdown -h +10\n\t\t* 十分钟后关机\n\t* shutdown -r now\n\t\t* 立即重启\n\t* shutdown -r +30 'the system will reboot'\n\t\t* 30分钟后重启，在目前登录者的屏幕前方显示该信息\n    * shutdown -k now 'the system will reboot'\n\t    * 仅发出警告消息，系统不会关机\n\n#### reboot \n\n* 重启\n* 通常执行:  sync;sync;sync;reboot\n\n#### halt \n\n* 不理会目前系统状态，硬件关机\n\n#### poweroff\n* 关机\n\t* poweroff -f\n\n#### 切换执行等级 init\n\n* run level 0\n\t* 关机\n* run level 3\n\t* 纯命令行模式\n* run level 5\n\t* 含有图形界面模式\n* run level 6\n\t* 重启\n\n> **init 0**也可以关机\n","slug":"首次登录与在线求助","published":1,"updated":"2020-07-13T09:14:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklan82nc001mdgtq8nxqh9o1","content":"<h1 id=\"X-window与命令行模式的切换\"><a href=\"#X-window与命令行模式的切换\" class=\"headerlink\" title=\"X window与命令行模式的切换\"></a>X window与命令行模式的切换</h1><ul>\n<li>命令行模式，也称为终端界面（terminal或者console）</li>\n<li>启动的程序称为<strong>shell</strong>，linux默认的shell就是bash</li>\n</ul>\n<blockquote>\n<p>Linux默认情况会提供6个terminal来让用户登录，切换的方式是：[Ctrl]+[Alt]+[F1]~[F6],用户名密码登录，exit注销</p>\n<p>这六个终端界面命名为 tty1~tty6，[Ctrl]+[Alt]+[F7]返回图形界面tty7</p>\n</blockquote>\n<h2 id=\"Linux登录模式\"><a href=\"#Linux登录模式\" class=\"headerlink\" title=\"Linux登录模式\"></a>Linux登录模式</h2><ul>\n<li>仅有纯文本界面<ul>\n<li>运行等级 <strong>run level 3</strong></li>\n</ul>\n</li>\n<li>图形界面登录环境<ul>\n<li>运行等级 <strong>run level 5</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux运行等级\"><a href=\"#Linux运行等级\" class=\"headerlink\" title=\"Linux运行等级\"></a>Linux运行等级</h2><ul>\n<li>共计<strong>7</strong>个run level</li>\n<li>最常用到的是run level 3 与run level 5</li>\n</ul>\n<blockquote>\n<p>若想要更改linux默认的登录模式，需要修改 <strong>/etc/inittab</strong>，下次重启生效</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"~说明\"></a>~说明</h2><ul>\n<li>~代表的是用户的主文件夹，它是个变化的值<ul>\n<li>root的主目录：/root</li>\n<li>hanrd这个用户的主目录：/home/hanrd</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"提示符\"><a href=\"#提示符\" class=\"headerlink\" title=\"提示符\"></a>提示符</h2><ul>\n<li>root提示符 <strong>#</strong></li>\n<li>一般用户提示符 <strong>$</strong></li>\n</ul>\n<h1 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h1><ul>\n<li>格式为: 命令 选项 参数1 参数2 …<ul>\n<li>command [-options] parameter1 …</li>\n<li>一行命令的第一个部分绝对是<strong>命令command</strong>或<strong>可执行文件</strong></li>\n<li>选项参数设置<ul>\n<li>-后面接选项的简写</li>\n<li>—后面接选项的全名</li>\n<li>特殊情况会有 +</li>\n</ul>\n</li>\n<li>各部分用空格分隔，不论几个空格，都按照一个空格对待</li>\n<li>按下回车Enter开始执行</li>\n<li>命令太长可以用反斜杠\\转义Enter，下一行续写</li>\n</ul>\n</li>\n<li>特别注意，linux命令大小写敏感</li>\n</ul>\n<blockquote>\n<p>ls</p>\n<p>ls -al ~</p>\n<p>ls -a -l ~</p>\n</blockquote>\n<h1 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h1><ul>\n<li><p>echo $LANG</p>\n<ul>\n<li>显示目前所支持的语言</li>\n</ul>\n</li>\n<li><p>LANG=en_US</p>\n<ul>\n<li>临时修改为英语</li>\n</ul>\n</li>\n<li><p>date</p>\n<ul>\n<li>显示日期与时间</li>\n<li>date +%Y/%m/%d 特定输出</li>\n</ul>\n</li>\n<li><p>cal</p>\n<ul>\n<li>显示日历</li>\n<li>cal 12 2020 指定年月</li>\n</ul>\n</li>\n<li><p>bc</p>\n<ul>\n<li>显示计算器</li>\n<li>quit离开</li>\n<li>+、-、*、/、^、%</li>\n<li>默认只输出结果的整数位</li>\n<li>保留小数要执行<strong>scale=3</strong>，指定保留几位小数</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><ul>\n<li><p>[Tab]</p>\n<ul>\n<li>命令补全</li>\n<li>文件补齐</li>\n</ul>\n</li>\n<li><p>[Ctrl] + c</p>\n<ul>\n<li>中断目前程序/命令</li>\n</ul>\n</li>\n<li><p>[Ctrl] + d</p>\n<ul>\n<li>表示键盘输入结束</li>\n<li>可以用来直接离开文字界面，关闭terminal</li>\n<li>相当于输入exit</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"在线求助-man-page-info-page\"><a href=\"#在线求助-man-page-info-page\" class=\"headerlink\" title=\"在线求助 man page / info page\"></a>在线求助 man page / info page</h1><h2 id=\"man-page\"><a href=\"#man-page\" class=\"headerlink\" title=\"man page\"></a>man page</h2><ul>\n<li>man是manual（操作说明）缩写</li>\n<li>查询出的页面，叫做man page</li>\n<li>如，man date</li>\n<li>man page的文件数据通常放在<strong>/usr/share/man</strong>目录里，可通过修改名为<strong>/etc/man.config</strong>的文件更改目录（不同的distribution文件名略有不同）</li>\n</ul>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><ul>\n<li><p>诸如“DATE(1)”中的数字的意义（1-9），<strong>常用数字</strong>如下：</p>\n<ul>\n<li>1—用户在shell环境中可以操作的命令或者可执行文件</li>\n<li>5—配置文件或者是某些文件的格式</li>\n<li>8—系统管理员可用的管理命令</li>\n</ul>\n</li>\n<li><p>man page <strong>主要内容</strong>包括：</p>\n<ul>\n<li>NAME—简短的命令、数据名称说明</li>\n<li>SYNOPSIS—简短的命令执行语法简介</li>\n<li>DESCRIPTION—较为完整的说明，这部分最好仔细看看</li>\n<li>OPTIONS—针对SYNOPSIS的所有的可用的选项的说明</li>\n<li>SEE ALSO—其他参考材料</li>\n<li>FILES—某些有关的文件</li>\n<li>其他诸如，EXAMPLES、BUGS、AUTHORS等</li>\n</ul>\n</li>\n<li><p>man page <strong>常用按键</strong></p>\n<ul>\n<li>向下翻一页<ul>\n<li>空格</li>\n<li>[Page Down]</li>\n</ul>\n</li>\n<li>向上翻一页<ul>\n<li>[Page Up]</li>\n</ul>\n</li>\n<li>回到第一页<ul>\n<li>[Home]</li>\n</ul>\n</li>\n<li>去到最后一页<ul>\n<li>[End]</li>\n</ul>\n</li>\n<li>向下查询字符串<ul>\n<li>/string</li>\n</ul>\n</li>\n<li>向上查询字符串<ul>\n<li>?string</li>\n</ul>\n</li>\n<li>继续查询<ul>\n<li>n继续当前查询方向查询写一个</li>\n<li>N当前查询方向逆方向查询下一个</li>\n</ul>\n</li>\n<li>离开<ul>\n<li>q</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高阶命令</p>\n<ul>\n<li><p>查找与指定命令或数据有关的man page文件</p>\n<ul>\n<li>whatis 命令或数据 <ul>\n<li>需要root权限执行 makewhatis创建whatis数据库</li>\n</ul>\n</li>\n<li>man -f 命令或数据</li>\n</ul>\n</li>\n<li><p>查找包含指定关键字的man page文件</p>\n<ul>\n<li>apropos 命令或数据<ul>\n<li>需要root权限执行 makewhatis创建whatis数据库</li>\n</ul>\n</li>\n<li>man -k 命令或数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"info-page\"><a href=\"#info-page\" class=\"headerlink\" title=\"info page\"></a>info page</h2><blockquote>\n<p>info与man的用途差不多</p>\n<p>info page将文件数据拆成一个一个的段落，每个段落用自己的页面撰写，并且每个页面有“超链接”来跳到不同的页面中，每个独立的页面称为<strong>节点（Node）</strong></p>\n<p>info page是只有linux才有的产物，必须按照info page的格式撰写求助文件才能具有info page的功能，info page的文件放置于<strong>/usr/share/info/</strong>目录中</p>\n<p>非info page格式的文件也能用info显示，只不过显示效果与man相同</p>\n</blockquote>\n<h3 id=\"info-page内容\"><a href=\"#info-page内容\" class=\"headerlink\" title=\"info page内容\"></a>info page内容</h3><ul>\n<li><p>第一行</p>\n<ul>\n<li>File—文件名（xx.info）</li>\n<li>Node—节点名</li>\n<li>Next—下一个节点</li>\n<li>Up—回到上一层的节点总览界面</li>\n<li>Prev—上一个节点</li>\n</ul>\n</li>\n<li><p>Menu</p>\n<ul>\n<li>可使用方向键选择，按下[Enter]，前往该小节</li>\n<li>也可[Tab]，在节点间移动</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"按键\"><a href=\"#按键\" class=\"headerlink\" title=\"按键\"></a>按键</h3><ul>\n<li>空格键 — 向下翻页</li>\n<li>[Page Down] — 向下翻页</li>\n<li>[Page Up] — 向上翻页</li>\n<li>[Tab] — 在节点间移动，节点以“*”显示</li>\n<li>[Enter] — 进入该节点</li>\n<li>B — 光标移至info界面第一个节点处</li>\n<li>E — 光标移至info界面最后一个节点处</li>\n<li>N — 前往下一个节点</li>\n<li>P — 前往上一个节点</li>\n<li>U — 向上移动一层</li>\n<li>S或者/ — 查询搜索</li>\n<li>H — 显示求助菜单</li>\n<li>? — 命令一览表</li>\n<li>Q — 离开</li>\n</ul>\n<blockquote>\n<p>上述命令不区分大小写字母</p>\n</blockquote>\n<h2 id=\"其他文档-documents\"><a href=\"#其他文档-documents\" class=\"headerlink\" title=\"其他文档 documents\"></a>其他文档 documents</h2><ul>\n<li><strong>/usr/share/doc</strong>目录包含一些额外的说明文件，包含how-to及相关原理说明</li>\n</ul>\n<h2 id=\"文本编辑器-nano\"><a href=\"#文本编辑器-nano\" class=\"headerlink\" title=\"文本编辑器 nano\"></a>文本编辑器 nano</h2><ul>\n<li><p>进入nano</p>\n<ul>\n<li>nano text.txt</li>\n</ul>\n</li>\n<li><p>离开nano</p>\n<ul>\n<li>[Ctrl] + X</li>\n<li>Y/N</li>\n</ul>\n</li>\n<li><p>查询字符串</p>\n<ul>\n<li>[Ctrl] + W</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>^表示[Ctrl]</p>\n<p>M表示[Alt]</p>\n</blockquote>\n<h2 id=\"正确关机方法\"><a href=\"#正确关机方法\" class=\"headerlink\" title=\"正确关机方法\"></a>正确关机方法</h2><ul>\n<li>关机时要注意：<ul>\n<li>查看系统的使用状态<ul>\n<li>who 查看谁在线</li>\n<li>netstat -a 查看网络联机状态</li>\n<li>ps -aux 查看后台执行的程序</li>\n</ul>\n</li>\n<li>通知在线用户关机的时刻</li>\n<li>正确的关机命令使用<ul>\n<li>shutdown</li>\n<li>reboot</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非正常关机可能造成文件系统的毁损</li>\n</ul>\n<h3 id=\"数据同步写入硬盘\"><a href=\"#数据同步写入硬盘\" class=\"headerlink\" title=\"数据同步写入硬盘\"></a>数据同步写入硬盘</h3><ul>\n<li><p>命令</p>\n<ul>\n<li>sync</li>\n</ul>\n</li>\n<li><p>目的</p>\n<ul>\n<li>在默认情况下，某些已经加载内存中的数据不会直接被写回硬盘，而是先存在内存中，因而，特殊情况或者非正常关机会使数据的更新不正常</li>\n<li>需要sync将内存里的尚未被更新的数据写入硬盘</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用关机重启命令\"><a href=\"#常用关机重启命令\" class=\"headerlink\" title=\"常用关机重启命令\"></a>常用关机重启命令</h3><h4 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h4><blockquote>\n<p>shutdown可以完成如下工作：</p>\n<p>可以自由选择关机模式：关机、重启、单用户操作模式</p>\n<p>可以设置关机时间</p>\n<p>可以自定义关机消息</p>\n<p>可以仅发出警告消息，不关机或重启</p>\n<p>可以选择是否要用fsck检查文件系统</p>\n</blockquote>\n<ul>\n<li>shutdown — 依据目前已启动的服务逐次关闭各服务，然后关机<ul>\n<li>shutdown -h now<ul>\n<li>立刻关机</li>\n</ul>\n</li>\n<li>shutdown -h 20:25<ul>\n<li>20：25关机</li>\n</ul>\n</li>\n<li>shutdown -h +10<ul>\n<li>十分钟后关机</li>\n</ul>\n</li>\n<li>shutdown -r now<ul>\n<li>立即重启</li>\n</ul>\n</li>\n<li>shutdown -r +30 ‘the system will reboot’<ul>\n<li>30分钟后重启，在目前登录者的屏幕前方显示该信息</li>\n</ul>\n</li>\n<li>shutdown -k now ‘the system will reboot’<ul>\n<li>仅发出警告消息，系统不会关机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h4><ul>\n<li>重启</li>\n<li>通常执行:  sync;sync;sync;reboot</li>\n</ul>\n<h4 id=\"halt\"><a href=\"#halt\" class=\"headerlink\" title=\"halt\"></a>halt</h4><ul>\n<li>不理会目前系统状态，硬件关机</li>\n</ul>\n<h4 id=\"poweroff\"><a href=\"#poweroff\" class=\"headerlink\" title=\"poweroff\"></a>poweroff</h4><ul>\n<li>关机<ul>\n<li>poweroff -f</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"切换执行等级-init\"><a href=\"#切换执行等级-init\" class=\"headerlink\" title=\"切换执行等级 init\"></a>切换执行等级 init</h4><ul>\n<li>run level 0<ul>\n<li>关机</li>\n</ul>\n</li>\n<li>run level 3<ul>\n<li>纯命令行模式</li>\n</ul>\n</li>\n<li>run level 5<ul>\n<li>含有图形界面模式</li>\n</ul>\n</li>\n<li>run level 6<ul>\n<li>重启</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>init 0</strong>也可以关机</p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"X-window与命令行模式的切换\"><a href=\"#X-window与命令行模式的切换\" class=\"headerlink\" title=\"X window与命令行模式的切换\"></a>X window与命令行模式的切换</h1><ul>\n<li>命令行模式，也称为终端界面（terminal或者console）</li>\n<li>启动的程序称为<strong>shell</strong>，linux默认的shell就是bash</li>\n</ul>\n<blockquote>\n<p>Linux默认情况会提供6个terminal来让用户登录，切换的方式是：[Ctrl]+[Alt]+[F1]~[F6],用户名密码登录，exit注销</p>\n<p>这六个终端界面命名为 tty1~tty6，[Ctrl]+[Alt]+[F7]返回图形界面tty7</p>\n</blockquote>\n<h2 id=\"Linux登录模式\"><a href=\"#Linux登录模式\" class=\"headerlink\" title=\"Linux登录模式\"></a>Linux登录模式</h2><ul>\n<li>仅有纯文本界面<ul>\n<li>运行等级 <strong>run level 3</strong></li>\n</ul>\n</li>\n<li>图形界面登录环境<ul>\n<li>运行等级 <strong>run level 5</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux运行等级\"><a href=\"#Linux运行等级\" class=\"headerlink\" title=\"Linux运行等级\"></a>Linux运行等级</h2><ul>\n<li>共计<strong>7</strong>个run level</li>\n<li>最常用到的是run level 3 与run level 5</li>\n</ul>\n<blockquote>\n<p>若想要更改linux默认的登录模式，需要修改 <strong>/etc/inittab</strong>，下次重启生效</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"~说明\"></a>~说明</h2><ul>\n<li>~代表的是用户的主文件夹，它是个变化的值<ul>\n<li>root的主目录：/root</li>\n<li>hanrd这个用户的主目录：/home/hanrd</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"提示符\"><a href=\"#提示符\" class=\"headerlink\" title=\"提示符\"></a>提示符</h2><ul>\n<li>root提示符 <strong>#</strong></li>\n<li>一般用户提示符 <strong>$</strong></li>\n</ul>\n<h1 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h1><ul>\n<li>格式为: 命令 选项 参数1 参数2 …<ul>\n<li>command [-options] parameter1 …</li>\n<li>一行命令的第一个部分绝对是<strong>命令command</strong>或<strong>可执行文件</strong></li>\n<li>选项参数设置<ul>\n<li>-后面接选项的简写</li>\n<li>—后面接选项的全名</li>\n<li>特殊情况会有 +</li>\n</ul>\n</li>\n<li>各部分用空格分隔，不论几个空格，都按照一个空格对待</li>\n<li>按下回车Enter开始执行</li>\n<li>命令太长可以用反斜杠\\转义Enter，下一行续写</li>\n</ul>\n</li>\n<li>特别注意，linux命令大小写敏感</li>\n</ul>\n<blockquote>\n<p>ls</p>\n<p>ls -al ~</p>\n<p>ls -a -l ~</p>\n</blockquote>\n<h1 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h1><ul>\n<li><p>echo $LANG</p>\n<ul>\n<li>显示目前所支持的语言</li>\n</ul>\n</li>\n<li><p>LANG=en_US</p>\n<ul>\n<li>临时修改为英语</li>\n</ul>\n</li>\n<li><p>date</p>\n<ul>\n<li>显示日期与时间</li>\n<li>date +%Y/%m/%d 特定输出</li>\n</ul>\n</li>\n<li><p>cal</p>\n<ul>\n<li>显示日历</li>\n<li>cal 12 2020 指定年月</li>\n</ul>\n</li>\n<li><p>bc</p>\n<ul>\n<li>显示计算器</li>\n<li>quit离开</li>\n<li>+、-、*、/、^、%</li>\n<li>默认只输出结果的整数位</li>\n<li>保留小数要执行<strong>scale=3</strong>，指定保留几位小数</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><ul>\n<li><p>[Tab]</p>\n<ul>\n<li>命令补全</li>\n<li>文件补齐</li>\n</ul>\n</li>\n<li><p>[Ctrl] + c</p>\n<ul>\n<li>中断目前程序/命令</li>\n</ul>\n</li>\n<li><p>[Ctrl] + d</p>\n<ul>\n<li>表示键盘输入结束</li>\n<li>可以用来直接离开文字界面，关闭terminal</li>\n<li>相当于输入exit</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"在线求助-man-page-info-page\"><a href=\"#在线求助-man-page-info-page\" class=\"headerlink\" title=\"在线求助 man page / info page\"></a>在线求助 man page / info page</h1><h2 id=\"man-page\"><a href=\"#man-page\" class=\"headerlink\" title=\"man page\"></a>man page</h2><ul>\n<li>man是manual（操作说明）缩写</li>\n<li>查询出的页面，叫做man page</li>\n<li>如，man date</li>\n<li>man page的文件数据通常放在<strong>/usr/share/man</strong>目录里，可通过修改名为<strong>/etc/man.config</strong>的文件更改目录（不同的distribution文件名略有不同）</li>\n</ul>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><ul>\n<li><p>诸如“DATE(1)”中的数字的意义（1-9），<strong>常用数字</strong>如下：</p>\n<ul>\n<li>1—用户在shell环境中可以操作的命令或者可执行文件</li>\n<li>5—配置文件或者是某些文件的格式</li>\n<li>8—系统管理员可用的管理命令</li>\n</ul>\n</li>\n<li><p>man page <strong>主要内容</strong>包括：</p>\n<ul>\n<li>NAME—简短的命令、数据名称说明</li>\n<li>SYNOPSIS—简短的命令执行语法简介</li>\n<li>DESCRIPTION—较为完整的说明，这部分最好仔细看看</li>\n<li>OPTIONS—针对SYNOPSIS的所有的可用的选项的说明</li>\n<li>SEE ALSO—其他参考材料</li>\n<li>FILES—某些有关的文件</li>\n<li>其他诸如，EXAMPLES、BUGS、AUTHORS等</li>\n</ul>\n</li>\n<li><p>man page <strong>常用按键</strong></p>\n<ul>\n<li>向下翻一页<ul>\n<li>空格</li>\n<li>[Page Down]</li>\n</ul>\n</li>\n<li>向上翻一页<ul>\n<li>[Page Up]</li>\n</ul>\n</li>\n<li>回到第一页<ul>\n<li>[Home]</li>\n</ul>\n</li>\n<li>去到最后一页<ul>\n<li>[End]</li>\n</ul>\n</li>\n<li>向下查询字符串<ul>\n<li>/string</li>\n</ul>\n</li>\n<li>向上查询字符串<ul>\n<li>?string</li>\n</ul>\n</li>\n<li>继续查询<ul>\n<li>n继续当前查询方向查询写一个</li>\n<li>N当前查询方向逆方向查询下一个</li>\n</ul>\n</li>\n<li>离开<ul>\n<li>q</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高阶命令</p>\n<ul>\n<li><p>查找与指定命令或数据有关的man page文件</p>\n<ul>\n<li>whatis 命令或数据 <ul>\n<li>需要root权限执行 makewhatis创建whatis数据库</li>\n</ul>\n</li>\n<li>man -f 命令或数据</li>\n</ul>\n</li>\n<li><p>查找包含指定关键字的man page文件</p>\n<ul>\n<li>apropos 命令或数据<ul>\n<li>需要root权限执行 makewhatis创建whatis数据库</li>\n</ul>\n</li>\n<li>man -k 命令或数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"info-page\"><a href=\"#info-page\" class=\"headerlink\" title=\"info page\"></a>info page</h2><blockquote>\n<p>info与man的用途差不多</p>\n<p>info page将文件数据拆成一个一个的段落，每个段落用自己的页面撰写，并且每个页面有“超链接”来跳到不同的页面中，每个独立的页面称为<strong>节点（Node）</strong></p>\n<p>info page是只有linux才有的产物，必须按照info page的格式撰写求助文件才能具有info page的功能，info page的文件放置于<strong>/usr/share/info/</strong>目录中</p>\n<p>非info page格式的文件也能用info显示，只不过显示效果与man相同</p>\n</blockquote>\n<h3 id=\"info-page内容\"><a href=\"#info-page内容\" class=\"headerlink\" title=\"info page内容\"></a>info page内容</h3><ul>\n<li><p>第一行</p>\n<ul>\n<li>File—文件名（xx.info）</li>\n<li>Node—节点名</li>\n<li>Next—下一个节点</li>\n<li>Up—回到上一层的节点总览界面</li>\n<li>Prev—上一个节点</li>\n</ul>\n</li>\n<li><p>Menu</p>\n<ul>\n<li>可使用方向键选择，按下[Enter]，前往该小节</li>\n<li>也可[Tab]，在节点间移动</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"按键\"><a href=\"#按键\" class=\"headerlink\" title=\"按键\"></a>按键</h3><ul>\n<li>空格键 — 向下翻页</li>\n<li>[Page Down] — 向下翻页</li>\n<li>[Page Up] — 向上翻页</li>\n<li>[Tab] — 在节点间移动，节点以“*”显示</li>\n<li>[Enter] — 进入该节点</li>\n<li>B — 光标移至info界面第一个节点处</li>\n<li>E — 光标移至info界面最后一个节点处</li>\n<li>N — 前往下一个节点</li>\n<li>P — 前往上一个节点</li>\n<li>U — 向上移动一层</li>\n<li>S或者/ — 查询搜索</li>\n<li>H — 显示求助菜单</li>\n<li>? — 命令一览表</li>\n<li>Q — 离开</li>\n</ul>\n<blockquote>\n<p>上述命令不区分大小写字母</p>\n</blockquote>\n<h2 id=\"其他文档-documents\"><a href=\"#其他文档-documents\" class=\"headerlink\" title=\"其他文档 documents\"></a>其他文档 documents</h2><ul>\n<li><strong>/usr/share/doc</strong>目录包含一些额外的说明文件，包含how-to及相关原理说明</li>\n</ul>\n<h2 id=\"文本编辑器-nano\"><a href=\"#文本编辑器-nano\" class=\"headerlink\" title=\"文本编辑器 nano\"></a>文本编辑器 nano</h2><ul>\n<li><p>进入nano</p>\n<ul>\n<li>nano text.txt</li>\n</ul>\n</li>\n<li><p>离开nano</p>\n<ul>\n<li>[Ctrl] + X</li>\n<li>Y/N</li>\n</ul>\n</li>\n<li><p>查询字符串</p>\n<ul>\n<li>[Ctrl] + W</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>^表示[Ctrl]</p>\n<p>M表示[Alt]</p>\n</blockquote>\n<h2 id=\"正确关机方法\"><a href=\"#正确关机方法\" class=\"headerlink\" title=\"正确关机方法\"></a>正确关机方法</h2><ul>\n<li>关机时要注意：<ul>\n<li>查看系统的使用状态<ul>\n<li>who 查看谁在线</li>\n<li>netstat -a 查看网络联机状态</li>\n<li>ps -aux 查看后台执行的程序</li>\n</ul>\n</li>\n<li>通知在线用户关机的时刻</li>\n<li>正确的关机命令使用<ul>\n<li>shutdown</li>\n<li>reboot</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非正常关机可能造成文件系统的毁损</li>\n</ul>\n<h3 id=\"数据同步写入硬盘\"><a href=\"#数据同步写入硬盘\" class=\"headerlink\" title=\"数据同步写入硬盘\"></a>数据同步写入硬盘</h3><ul>\n<li><p>命令</p>\n<ul>\n<li>sync</li>\n</ul>\n</li>\n<li><p>目的</p>\n<ul>\n<li>在默认情况下，某些已经加载内存中的数据不会直接被写回硬盘，而是先存在内存中，因而，特殊情况或者非正常关机会使数据的更新不正常</li>\n<li>需要sync将内存里的尚未被更新的数据写入硬盘</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用关机重启命令\"><a href=\"#常用关机重启命令\" class=\"headerlink\" title=\"常用关机重启命令\"></a>常用关机重启命令</h3><h4 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h4><blockquote>\n<p>shutdown可以完成如下工作：</p>\n<p>可以自由选择关机模式：关机、重启、单用户操作模式</p>\n<p>可以设置关机时间</p>\n<p>可以自定义关机消息</p>\n<p>可以仅发出警告消息，不关机或重启</p>\n<p>可以选择是否要用fsck检查文件系统</p>\n</blockquote>\n<ul>\n<li>shutdown — 依据目前已启动的服务逐次关闭各服务，然后关机<ul>\n<li>shutdown -h now<ul>\n<li>立刻关机</li>\n</ul>\n</li>\n<li>shutdown -h 20:25<ul>\n<li>20：25关机</li>\n</ul>\n</li>\n<li>shutdown -h +10<ul>\n<li>十分钟后关机</li>\n</ul>\n</li>\n<li>shutdown -r now<ul>\n<li>立即重启</li>\n</ul>\n</li>\n<li>shutdown -r +30 ‘the system will reboot’<ul>\n<li>30分钟后重启，在目前登录者的屏幕前方显示该信息</li>\n</ul>\n</li>\n<li>shutdown -k now ‘the system will reboot’<ul>\n<li>仅发出警告消息，系统不会关机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h4><ul>\n<li>重启</li>\n<li>通常执行:  sync;sync;sync;reboot</li>\n</ul>\n<h4 id=\"halt\"><a href=\"#halt\" class=\"headerlink\" title=\"halt\"></a>halt</h4><ul>\n<li>不理会目前系统状态，硬件关机</li>\n</ul>\n<h4 id=\"poweroff\"><a href=\"#poweroff\" class=\"headerlink\" title=\"poweroff\"></a>poweroff</h4><ul>\n<li>关机<ul>\n<li>poweroff -f</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"切换执行等级-init\"><a href=\"#切换执行等级-init\" class=\"headerlink\" title=\"切换执行等级 init\"></a>切换执行等级 init</h4><ul>\n<li>run level 0<ul>\n<li>关机</li>\n</ul>\n</li>\n<li>run level 3<ul>\n<li>纯命令行模式</li>\n</ul>\n</li>\n<li>run level 5<ul>\n<li>含有图形界面模式</li>\n</ul>\n</li>\n<li>run level 6<ul>\n<li>重启</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>init 0</strong>也可以关机</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/casrel.jpg","slug":"casrel.jpg","post":"cklan82ml0006dgtqdj30a4ho","modified":1,"renderable":0},{"_id":"source/_posts/AAAI-2020-Self-Attention-Enhanced-Selective-Gate-with-Entity-Aware-Embedding-for-Distantly-Supervised-Relation-Extraction/model.jpg","post":"cklan82mg0002dgtq5c12hy1z","slug":"model.jpg","modified":1,"renderable":1},{"_id":"source/_posts/VS-code-Module-torch-has-no-xxx-member/hello.jpg","post":"cklan82n1000udgtq6lz68e55","slug":"hello.jpg","modified":1,"renderable":1},{"_id":"source/_posts/markdownPad2-破解/hello.jpg","post":"cklan82n40012dgtq6e5zejw0","slug":"hello.jpg","modified":1,"renderable":1},{"_id":"source/_posts/软件学报2020-基于带噪观测的远监督神经网络关系抽取/model.jpg","post":"cklan82na001idgtqbxmjddiv","slug":"model.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL-2020-A-Novel-Cascade-Binary-Tagging-Framework-for-Relational-Triple-Extraction/overlapType.jpg","post":"cklan82ml0006dgtqdj30a4ho","slug":"overlapType.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-formula.JPG","post":"cklan82mn0008dgtqgl4p9sjk","slug":"lstm-formula.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/lstm-img.png","post":"cklan82mn0008dgtqgl4p9sjk","slug":"lstm-img.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL-2020-Exploiting-the-Syntax-Model-Consistency-for-Neural-Relation-Extraction/on-lstm-img.jpg","post":"cklan82mn0008dgtqgl4p9sjk","slug":"on-lstm-img.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/2.JPG","post":"cklan82mr000edgtq3rqp6d2f","slug":"2.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/3.JPG","post":"cklan82mr000edgtq3rqp6d2f","slug":"3.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/model_train.jpg","post":"cklan82mr000edgtq3rqp6d2f","slug":"model_train.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/捕获.JPG","post":"cklan82mr000edgtq3rqp6d2f","slug":"捕获.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ICASSP-2016-Training-deep-neural-networks-based-on-unreliable-labels/捕获1.JPG","post":"cklan82mr000edgtq3rqp6d2f","slug":"捕获1.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-state-flow.jpg","post":"cklan82mv000jdgtqgwwhexab","slug":"cell-state-flow.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/cell-update.JPG","post":"cklan82mv000jdgtqgwwhexab","slug":"cell-update.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/eg1.JPG","post":"cklan82mv000jdgtqgwwhexab","slug":"eg1.JPG","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/level-his-now.jpg","post":"cklan82mv000jdgtqgwwhexab","slug":"level-his-now.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-formula.jpg","post":"cklan82mv000jdgtqgwwhexab","slug":"lstm-formula.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/lstm-img.png","post":"cklan82mv000jdgtqgwwhexab","slug":"lstm-img.png","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/on-lstm-img.jpg","post":"cklan82mv000jdgtqgwwhexab","slug":"on-lstm-img.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/police-tree.jpg","post":"cklan82mv000jdgtqgwwhexab","slug":"police-tree.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ICLR-2019-ORDERED-NEURONS-INTEGRATING-TREE-STRUCTURES-INTO-RECURRENT-NEURAL-NETWORKS/two-case.jpg","post":"cklan82mv000jdgtqgwwhexab","slug":"two-case.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cklan82m90000dgtqasiu4t1y","category_id":"cklan82mj0004dgtq4795hsz1","_id":"cklan82ms000fdgtqarcl4a66"},{"post_id":"cklan82mx000mdgtqbeq6arx2","category_id":"cklan82mj0004dgtq4795hsz1","_id":"cklan82n2000vdgtq9k4ldfpp"},{"post_id":"cklan82my000odgtq79ty9fq3","category_id":"cklan82mj0004dgtq4795hsz1","_id":"cklan82n30010dgtq3xntb38i"},{"post_id":"cklan82mq000ddgtq3w3z9519","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82n70018dgtqdoh7110r"},{"post_id":"cklan82mq000ddgtq3w3z9519","category_id":"cklan82n2000wdgtq35dlgaob","_id":"cklan82n9001cdgtqc1lrgs0j"},{"post_id":"cklan82mg0002dgtq5c12hy1z","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82na001gdgtq55jecf4m"},{"post_id":"cklan82mg0002dgtq5c12hy1z","category_id":"cklan82n50013dgtqb6lbft58","_id":"cklan82nc001ldgtqh0zrg523"},{"post_id":"cklan82n8001bdgtq9oaw40bi","category_id":"cklan82mj0004dgtq4795hsz1","_id":"cklan82nd001odgtq640h2cob"},{"post_id":"cklan82n9001edgtq9kj4394s","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82ne001sdgtq0m2o6m0t"},{"post_id":"cklan82mr000edgtq3rqp6d2f","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82nf001udgtqbb5vfimw"},{"post_id":"cklan82mr000edgtq3rqp6d2f","category_id":"cklan82n80019dgtq27o97mwm","_id":"cklan82ng001ydgtq1hgb18d3"},{"post_id":"cklan82nc001mdgtq8nxqh9o1","category_id":"cklan82mj0004dgtq4795hsz1","_id":"cklan82ng001zdgtqg2kl9nm4"},{"post_id":"cklan82ml0006dgtqdj30a4ho","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82nj0022dgtqgkblhgbo"},{"post_id":"cklan82ml0006dgtqdj30a4ho","category_id":"cklan82ne001qdgtq37192m4i","_id":"cklan82nk0024dgtq0ql89b70"},{"post_id":"cklan82mv000jdgtqgwwhexab","category_id":"cklan82nf001wdgtq355qbin8","_id":"cklan82nm0028dgtqbihoc17k"},{"post_id":"cklan82mn0008dgtqgl4p9sjk","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82nn002adgtq2nzb9nnl"},{"post_id":"cklan82mn0008dgtqgl4p9sjk","category_id":"cklan82ne001qdgtq37192m4i","_id":"cklan82no002ddgtq5za32aq8"},{"post_id":"cklan82n0000sdgtq33qng1qk","category_id":"cklan82nk0027dgtqdp8fg0ow","_id":"cklan82np002hdgtqfjhmg2av"},{"post_id":"cklan82mo0009dgtqg3r63nt4","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82np002jdgtq2ppahebg"},{"post_id":"cklan82mo0009dgtqg3r63nt4","category_id":"cklan82ne001qdgtq37192m4i","_id":"cklan82nq002mdgtq02q5ddgh"},{"post_id":"cklan82n1000udgtq6lz68e55","category_id":"cklan82no002gdgtq7n094oyw","_id":"cklan82nq002pdgtq3lntbtjb"},{"post_id":"cklan82n3000zdgtqbnqm3pai","category_id":"cklan82np002kdgtq53zc9jn4","_id":"cklan82nr002tdgtq7rlo6ujk"},{"post_id":"cklan82n40012dgtq6e5zejw0","category_id":"cklan82nq002qdgtqeb9fgqvh","_id":"cklan82ns002wdgtq5s1ff07r"},{"post_id":"cklan82n70017dgtq9atx1a0h","category_id":"cklan82ns002xdgtq6tlxapm8","_id":"cklan82nu0034dgtqc0je293s"},{"post_id":"cklan82na001idgtqbxmjddiv","category_id":"cklan82mp000adgtq2a15d4hm","_id":"cklan82nv0038dgtq1et2ge0t"},{"post_id":"cklan82na001idgtqbxmjddiv","category_id":"cklan82nt0031dgtqa3114d93","_id":"cklan82nw003bdgtq90aoguld"},{"post_id":"cklan82mu000idgtq2cedhd63","category_id":"cklan82nb001jdgtq29an44ld","_id":"cklan82nw003ddgtq3gyj1q5a"},{"post_id":"cklan82mu000idgtq2cedhd63","category_id":"cklan82nu0035dgtqg8sh95jw","_id":"cklan82nw003edgtqhxnefllr"},{"post_id":"cklan82n60016dgtq1ul45sls","category_id":"cklan82ns002udgtq31mockfo","_id":"cklan82nx003gdgtqe6vqarap"},{"post_id":"cklan82n60016dgtq1ul45sls","category_id":"cklan82nv0039dgtq7iqnhtkg","_id":"cklan82nx003idgtq90bkbszx"}],"PostTag":[{"post_id":"cklan82m90000dgtqasiu4t1y","tag_id":"cklan82ml0005dgtqh0p11g4o","_id":"cklan82mq000cdgtq2cv7ez34"},{"post_id":"cklan82mg0002dgtq5c12hy1z","tag_id":"cklan82mp000bdgtq38vh22nh","_id":"cklan82my000ndgtq82cedj6r"},{"post_id":"cklan82mg0002dgtq5c12hy1z","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82mz000qdgtqacd28pcj"},{"post_id":"cklan82mx000mdgtqbeq6arx2","tag_id":"cklan82ml0005dgtqh0p11g4o","_id":"cklan82n1000tdgtq2rci458d"},{"post_id":"cklan82my000odgtq79ty9fq3","tag_id":"cklan82ml0005dgtqh0p11g4o","_id":"cklan82n2000xdgtqhk96bcnc"},{"post_id":"cklan82ml0006dgtqdj30a4ho","tag_id":"cklan82mw000ldgtqa98wbuv3","_id":"cklan82n40011dgtqd8uw18dv"},{"post_id":"cklan82ml0006dgtqdj30a4ho","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82n50014dgtq24m413q8"},{"post_id":"cklan82mn0008dgtqgl4p9sjk","tag_id":"cklan82mw000ldgtqa98wbuv3","_id":"cklan82n9001ddgtq693x87v2"},{"post_id":"cklan82mn0008dgtqgl4p9sjk","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82na001fdgtq2st10gj5"},{"post_id":"cklan82n8001bdgtq9oaw40bi","tag_id":"cklan82ml0005dgtqh0p11g4o","_id":"cklan82nc001kdgtq5eakg4zn"},{"post_id":"cklan82n9001edgtq9kj4394s","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82nd001ndgtq5ze4bnnt"},{"post_id":"cklan82mo0009dgtqg3r63nt4","tag_id":"cklan82mw000ldgtqa98wbuv3","_id":"cklan82ne001rdgtq0l7h8gdd"},{"post_id":"cklan82mo0009dgtqg3r63nt4","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82nf001tdgtqc2wn7s3q"},{"post_id":"cklan82nc001mdgtq8nxqh9o1","tag_id":"cklan82ml0005dgtqh0p11g4o","_id":"cklan82ng001xdgtq2jwv4s7d"},{"post_id":"cklan82mq000ddgtq3w3z9519","tag_id":"cklan82nd001pdgtq6ahqdfqj","_id":"cklan82nj0023dgtqbcy19xb4"},{"post_id":"cklan82mq000ddgtq3w3z9519","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82nk0025dgtqb0145dy4"},{"post_id":"cklan82mr000edgtq3rqp6d2f","tag_id":"cklan82nh0020dgtqh5kv02r7","_id":"cklan82nn002cdgtq72xfgkbm"},{"post_id":"cklan82mr000edgtq3rqp6d2f","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82no002edgtq1pz26o5f"},{"post_id":"cklan82mu000idgtq2cedhd63","tag_id":"cklan82nn0029dgtq5vhw2ffp","_id":"cklan82nq002ldgtq6x9l4jbp"},{"post_id":"cklan82mu000idgtq2cedhd63","tag_id":"cklan82no002fdgtq2dko8rip","_id":"cklan82nq002ndgtqfvske4t0"},{"post_id":"cklan82mv000jdgtqgwwhexab","tag_id":"cklan82np002idgtq864390u8","_id":"cklan82nr002rdgtq4pcp5tfp"},{"post_id":"cklan82n0000sdgtq33qng1qk","tag_id":"cklan82nq002odgtqbaf32p4m","_id":"cklan82nt002ydgtq0bwd3e9v"},{"post_id":"cklan82n0000sdgtq33qng1qk","tag_id":"cklan82nr002sdgtq384cfqdz","_id":"cklan82nt002zdgtqdahz6lbm"},{"post_id":"cklan82n1000udgtq6lz68e55","tag_id":"cklan82ns002vdgtqceg6577b","_id":"cklan82nu0032dgtq4we4f3wv"},{"post_id":"cklan82n3000zdgtqbnqm3pai","tag_id":"cklan82nt0030dgtq6sphd6yw","_id":"cklan82nv0036dgtq9mqk5xvl"},{"post_id":"cklan82n40012dgtq6e5zejw0","tag_id":"cklan82nu0033dgtq18q1drb1","_id":"cklan82nv003adgtq5mvhbqra"},{"post_id":"cklan82n60016dgtq1ul45sls","tag_id":"cklan82nv0037dgtqdl1z4hmh","_id":"cklan82nx003hdgtq7wmp1m85"},{"post_id":"cklan82n60016dgtq1ul45sls","tag_id":"cklan82nw003cdgtq6jdedgsg","_id":"cklan82nx003jdgtq54r11g8y"},{"post_id":"cklan82n70017dgtq9atx1a0h","tag_id":"cklan82nx003fdgtqgq3p983q","_id":"cklan82ny003ldgtq3bxw6gtl"},{"post_id":"cklan82na001idgtqbxmjddiv","tag_id":"cklan82ny003kdgtqdmhm03a0","_id":"cklan82ny003mdgtq8wal5ucv"},{"post_id":"cklan82na001idgtqbxmjddiv","tag_id":"cklan82ms000hdgtq8j9g9ltf","_id":"cklan82ny003ndgtqgj186jq7"}],"Tag":[{"name":"linux","_id":"cklan82ml0005dgtqh0p11g4o"},{"name":"AAAI 2020","_id":"cklan82mp000bdgtq38vh22nh"},{"name":"Relation Extraction","_id":"cklan82ms000hdgtq8j9g9ltf"},{"name":"ACL 2020","_id":"cklan82mw000ldgtqa98wbuv3"},{"name":"COLING 2020","_id":"cklan82nd001pdgtq6ahqdfqj"},{"name":"ICASSP 2016","_id":"cklan82nh0020dgtqh5kv02r7"},{"name":"Kubernetes配置","_id":"cklan82nn0029dgtq5vhw2ffp"},{"name":"K8s配置","_id":"cklan82no002fdgtq2dko8rip"},{"name":"ICLR 2019","_id":"cklan82np002idgtq864390u8"},{"name":"爬虫框架","_id":"cklan82nq002odgtqbaf32p4m"},{"name":"python","_id":"cklan82nr002sdgtq384cfqdz"},{"name":"VS code","_id":"cklan82ns002vdgtqceg6577b"},{"name":"dpkg","_id":"cklan82nt0030dgtq6sphd6yw"},{"name":"MarkdownPad2","_id":"cklan82nu0033dgtq18q1drb1"},{"name":"Topic Model","_id":"cklan82nv0037dgtqdl1z4hmh"},{"name":"主题模型","_id":"cklan82nw003cdgtq6jdedgsg"},{"name":"markdown","_id":"cklan82nx003fdgtqgq3p983q"},{"name":"软件学报 2020","_id":"cklan82ny003kdgtqdmhm03a0"}]}}